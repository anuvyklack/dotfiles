#+startup: show2levels
#+auto_tangle: t

* early-init.el
:PROPERTIES:
:header-args: :tangle "./early-init.el"
:END:
These settings are going into separate init file: =early-init.el=, which will be
invoked before GUI invocation and general =init.el= file.
** Preamble
#+begin_src emacs-lisp
;;; early-init.el -*- lexical-binding: t; no-byte-compile: t -*-
;;;
;;; Commentary:
;;; This file was automatically generated by `org-babel-tangle'.
;;; Do not change this file.  Main config is located in ~/.config/emacs/README.org
;;;
;;; Code:
#+end_src

** Variables

#+begin_src emacs-lisp
(setq gc-cons-threshold most-positive-fixnum
      read-process-output-max (* 1024 1024 4) ; 4mb
      inhibit-compacting-font-caches t
      message-log-max 16384
      load-prefer-newer noninteractive)
#+end_src

Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
#+begin_src emacs-lisp
(setopt tool-bar-mode nil
        menu-bar-mode nil
        scroll-bar-mode nil)
#+end_src

Resizing the Emacs frame can be a terribly expensive part of changing the font.
By inhibiting this, we easily halve startup times with fonts that are larger
than the system default.
#+begin_src emacs-lisp
(setopt frame-inhibit-implied-resize t)
#+end_src

** Native compilation
#+begin_src emacs-lisp
(when (featurep 'native-compile)
  (setq native-comp-async-report-warnings-errors 'silent))
#+end_src

Set native compilation cache location:
#+begin_src emacs-lisp
(when (fboundp 'startup-redirect-eln-cache)
  (startup-redirect-eln-cache
    (convert-standard-filename
      (expand-file-name  "var/eln-cache/" user-emacs-directory))))
#+end_src

** auto-compile elisp libraries
#+begin_src emacs-lisp
(setq load-prefer-newer t)
(when (require 'auto-compile nil t)
  (auto-compile-on-load-mode)
  (auto-compile-on-save-mode))
#+end_src

** The end of =early-init.el= file

This concludes the =early-init.el= file.
#+begin_src emacs-lisp
(provide 'early-init)
;;; early-init.el ends here
#+end_src


* init.el
:PROPERTIES:
:header-args: :tangle "./init.el"
:END:
** Preamble
#+begin_src emacs-lisp
;;; init.el --- Emacs main configuration file -*- lexical-binding: t; no-byte-compile: t -*-
;;;
;;; Commentary:
;;; This file was automatically generated by `org-babel-tangle'.
;;; Do not change this file.  Main config is located in ~/.config/emacs/README.org
;;;
;;; Code:
#+end_src

** Packages management
*** package.el
#+begin_src emacs-lisp
(require 'package)
(setopt package-install-upgrade-built-in t)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(add-hook 'package-menu-mode-hook #'hl-line-mode)
#+end_src

*** use-package
#+begin_src emacs-lisp
(setopt use-package-enable-imenu-support t)
#+end_src

#+begin_src emacs-lisp
(when (version< emacs-version "30")
  (unless (package-installed-p 'vc-use-package)
    (package-vc-install "https://github.com/slotThe/vc-use-package"))
  (require 'vc-use-package))
#+end_src

** Libraries and essential packages
#+begin_src emacs-lisp
(use-package diminish :ensure t)
(use-package hydra    :ensure t)
(use-package auto-compile :ensure t)
(use-package no-littering :ensure t :demand t) ;; files paths configuration
(use-package f :ensure t)
#+end_src

*** gcmh (Garbage Collector Magic Hack)
#+begin_src emacs-lisp
(use-package gcmh
  :ensure t
  :init (gcmh-mode))
#+end_src

*** dash
#+begin_src emacs-lisp
(use-package dash
  :ensure t
  :hook (after-init . global-dash-fontify-mode)
  :config
  (with-eval-after-load 'info-look
    (dash-register-info-lookup)))
#+end_src

*** which-key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :demand t ; Force the package to load immediately.
  :diminish which-key-mode
  :hook after-init
  :custom
  (which-key-idle-delay 0.6)
  (which-key-popup-type 'side-window)
  (which-key-sort-order 'which-key-key-order-alpha))
#+end_src

**** my/which-key-set-command-description
#+begin_src emacs-lisp
(defun my/which-key-set-command-description (&rest spec)
  "Set description for command that would be shown in the whick-key menu."
  (dolist (s (-partition 2 spec))
    (-let* (((fname description) s)
            (fname (if (symbolp fname)
                       (symbol-name fname)
                     fname)))
      (add-to-list 'which-key-replacement-alist
                   `((nil . ,fname) . (nil . ,description))))))
#+end_src

**** COMMENT which-key-posframe
- [[https://github.com/emacsorphanage/which-key-posframe][GitHub - emacsorphanage/which-key-posframe]]

#+begin_src emacs-lisp
(use-package which-key-posframe
  :ensure t
  :after which-key
  :hook after-init
  :custom
  (which-key-posframe-poshandler 'posframe-poshandler-frame-bottom-center))
#+end_src

*** general
#+begin_src emacs-lisp
(use-package general
  :ensure t
  :after which-key
  :config
  (general-auto-unbind-keys))
#+end_src

*** My custom function
**** add-to-list
- [[https://stackoverflow.com/questions/24356401/how-to-append-multiple-elements-to-a-list-in-emacs-lisp][Source]]
#+begin_src emacs-lisp
(defun my/add-to-list (list elements &optional append)
  "Add ELEMENTS to the front of the LIST.

If APPEND is non-nil add ELEMENTS to the end of the LIST.
This function change the value of the LIST symbol.

LIST sould be a symbol.
ELEMENTS could be either a list or a single element."
  (unless (consp elements)
    (setq elements `(,elements)))
  (set list (if append
                (append (symbol-value list) elements)
              (append elements (symbol-value list)))))
#+end_src

**** remove-from-list
#+begin_src emacs-lisp
(defun my/remove-from-list (list elements)
  "Remove ELEMENTS from the LIST.

LIST should be a symbol.
ELEMENTS could be either a list or a single element."
  (unless (consp elements)
    (setq elements (list elements)))
  (dolist (element elements)
    (set list (remove element (symbol-value list)))))
#+end_src

**** set-face-attribute
#+begin_src emacs-lisp
(defun my/set-face-attribute (face-specs)
  (unless (listp (car face-specs))
    (setq face-specs (list face-specs)))
  (dolist (s face-specs)
    (-let [(face . spec) s]
      (apply #'set-face-attribute face nil spec))))
#+end_src

** Emacs core settings
*** Initial frame settings
#+begin_src emacs-lisp
(when window-system
  (set-frame-size (selected-frame) 1300 1000 :pixelwise))
#+end_src

#+begin_src emacs-lisp
(when window-system
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)
  (blink-cursor-mode -1))
#+end_src

*** Basic settings
#+begin_src emacs-lisp :noweb yes
(use-package better-defaults :ensure t)
(use-package emacs
  :after better-defaults
  :custom
  <<customize-emacs-variables>>
  :config
  <<config-emacs-settings>>)
#+end_src
**** custom
:PROPERTIES:
:header-args: :noweb-ref customize-emacs-variables
:END:

User credentials. Some modes can use full name and email address automatically.
#+begin_src emacs-lisp
(user-full-name "Yuriy Artemyev")
(user-mail-address "anuvyklack@gmail.com")
#+end_src

#+begin_src emacs-lisp
(ring-bell-function #'ignore)
(inhibit-startup-message t)
(cursor-type 'box)
(cursor-in-non-selected-windows nil)
#+end_src

=ga= keys in normal-state (native =M-=== key-chord) will show human readable output.
#+begin_src emacs-lisp
(what-cursor-show-names t)
#+end_src

~y-or-n-p~
#+begin_src emacs-lisp
(use-short-answers t)
#+end_src

**** config
:PROPERTIES:
:header-args: :noweb-ref config-emacs-settings
:END:

*** Custom file
Emacs customization system writes to =init.el= by default, which is not great when
using tangle approach. This setting move custom modifications to a separate file.

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

*** help system

Always move point into help buffer, when its appeares.
#+begin_src emacs-lisp
(setopt help-window-select t)
#+end_src

#+begin_src emacs-lisp
(setopt help-at-pt-display-when-idle t)
#+end_src

#+begin_src emacs-lisp
(keymap-unset help-map "C-c" :remove) ; 'describe-copying
#+end_src

**** helpful
#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  ;; :preface
  ;; (add-to-list 'load-path "~/code/emacs/helpful")
  :hook (helpful-mode . outline-minor-mode)
  :bind (([remap describe-function] . helpful-callable)
         ([remap describe-variable] . helpful-variable)
         ([remap describe-command] . helpful-command)
         ([remap describe-key] . helpful-key)
         :map help-map
         ("F" . helpful-function)))
#+end_src

*** tab-bar
Per-frame tabs, with each tab representing a window configuration (like in Vim).
#+begin_src emacs-lisp
(tab-bar-mode)
;; (tab-bar-history-mode)
#+end_src

Replace ~tab-bar-format-tabs~ with ~tab-bar-format-tabs-groups~ to make tab bar
displays tab groups. [[https://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=f9b737fb9d21ac7adff403274167e76e77d033b8][Source]]
#+begin_src emacs-lisp
;; :options
;; tab-bar-format-menu-bar
;; tab-bar-format-tabs
;; tab-bar-format-tabs-groups
;; tab-bar-separator
;; tab-bar-format-add-tab
;; tab-bar-format-align-right
;; tab-bar-format-global
(setopt tab-bar-format '(tab-bar-format-history
                         tab-bar-format-tabs-groups
                         tab-bar-separator
                         tab-bar-format-add-tab))
#+end_src

#+begin_src emacs-lisp
(setopt tab-bar-tab-hints nil ;; Show tab numbers.
        tab-bar-close-button-show nil)
#+end_src

#+begin_src emacs-lisp
;; (setopt tab-bar-show 1) ;; Hide tab bar if only 1 tabs open.
(setopt tab-bar-show t) ;; Always show tab bar.
#+end_src

Buffer to show in new tab.
#+begin_src emacs-lisp
;; (setopt tab-bar-new-tab-choice "*dashboard*")
#+end_src

*** isearch
#+begin_src emacs-lisp
(setopt isearch-lazy-count t
        isearch-lazy-highlight t)
#+end_src

*** recentf
Keep track of opened files.

#+begin_src emacs-lisp
(use-package recentf
  :after no-littering
  :custom
  (recentf-max-menu-items 300)
  (recentf-max-saved-items 300)
  :init (recentf-mode)
  :config
  ;; Exclude all files in the no-littering directories:
  (let ((var (recentf-expand-file-name no-littering-var-directory))
        (etc (recentf-expand-file-name no-littering-etc-directory)))
    (my/add-to-list 'recentf-exclude '(var etc)))
  ;; ;; Save recentf list into file every 10 minutes.
  ;; (run-at-time nil 600 'recentf-save-list)
  )
#+end_src

*** savehist
Save minibuffer history.

#+begin_src emacs-lisp
(use-package savehist
  :after no-littering
  :custom (savehist-additional-variables '(register-alist))
  :init (savehist-mode))
#+end_src

*** outline
#+begin_src emacs-lisp
(setopt outline-minor-mode-cycle nil)
#+end_src

#+begin_src emacs-lisp
;; (setopt outline-minor-mode-use-buttons 'in-margins)
(setopt outline-minor-mode-use-buttons t)
#+end_src

*** buffers
**** bufler
#+begin_src emacs-lisp
(use-package bufler
  :ensure t
  :custom
  (bufler-columns '("Name" "Size" "Path"))
  :config
  (my/remove-from-list 'bufler-filter-buffer-modes
                       'fundamental-mode)
  (my/add-to-list 'bufler-filter-buffer-modes
                  '(org-roam-mode
                    helpful-mode
                    ;; magit-status-mode magit-refs-mode magit-log-mode
                    mu4e-main-mode))
  (my/add-to-list 'bufler-filter-buffer-name-regexps
                  '("\\*EGLOT")))
#+end_src

**** COMMENT ibuffer
***** ibuffer
#+begin_src emacs-lisp :noweb yes
(use-package ibuffer
  :after projectile
  :custom
  <<ibuffer-custom>>
  :config
  <<ibuffer-config>>)
#+end_src
****** custom
:PROPERTIES:
:header-args: :noweb-ref ibuffer-custom
:END:
#+begin_src emacs-lisp
(ibuffer-expert t) ; Do not ask for confirmation to delete the unmodified buffer.
(ibuffer-truncate-lines t)
(ibuffer-show-empty-filter-groups nil) ; Don't show emtpy filter groups
(ibuffer-display-summary nil)
;; (ibuffer-read-only-char "%")
;; (ibuffer-modified-char "*")
;; (ibuffer-marked-char ">")
;; (ibuffer-locked-char "L")
;; (ibuffer-deletion-char "D")
;; (ibuffer-formats)
;; (define-ibuffer-column)
(ibuffer-formats '((mark modified read-only locked
                    " "
                    (name 25 25 :left :elide)
                    "   "
                    ;; (filename-and-process 75 -1 :left :elide)
                    (project-relative-filename-or-process 75 -1 :left :elide)
                    " "
                    mode)))
#+end_src

****** config
:PROPERTIES:
:header-args: :noweb-ref ibuffer-config
:END:
#+begin_src emacs-lisp
(add-hook 'ibuffer-hook
          (lambda ()
            (ibuffer-auto-mode) ; automatically update ibuffer
            (hl-line-mode)
            ;; (setq truncate-lines t) ; do not wrap long lines
            ;; (ibuffer-switch-to-saved-filter-groups "home")
            ))
#+end_src

#+begin_src emacs-lisp
(define-ibuffer-column project-relative-filename-or-process
  (:name "Filename/Process"
   :header-mouse-map ibuffer-filename/process-header-map
   :summarizer
   (lambda (strings)
     (setq strings (delete "" strings))
     (let ((procs (--count (get-text-property 1 'ibuffer-process it)
                           strings))
           (files (length strings)))
       (concat (cond ((zerop files) "No files")
                     ((= 1 files) "1 file")
                     (t (format "%d files" files)))
               ", "
               (cond ((zerop procs) "no processes")
                     ((= 1 procs) "1 process")
                     (t (format "%d processes" procs)))))))
  (let ((proc     (get-buffer-process buffer))
        (filename (ibuffer-make-column-filename buffer mark)))
    (if proc
        (concat (propertize (format "(%s %s)" proc (process-status proc))
                            'font-lock-face 'italic
                            'ibuffer-process proc)
                (if (> (length filename) 0)
                    (format " %s" filename)
                  ""))
      ;; else
      (let ((root-dir (cdr (ibuffer-projectile-root buffer))))
        (if root-dir
            (file-relative-name filename root-dir)
          (abbreviate-file-name filename))))))
#+end_src

***** COMMENT all-the-icons-ibuffer
#+begin_src emacs-lisp
(use-package all-the-icons-ibuffer
  :ensure t
  :after all-the-icons
  :hook ibuffer-mode
  :custom
  (all-the-icons-ibuffer-human-readable-size t))
#+end_src

***** ibuffer-projectile
#+begin_src emacs-lisp
(use-package ibuffer-projectile
  :ensure t
  :config
  (add-hook 'ibuffer-hook
            (lambda ()
              (ibuffer-projectile-set-filter-groups)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic)))))
#+end_src

*** Russian language
**** evil-xkbswitch
#+begin_src emacs-lisp
(use-package evil-xkbswitch
  :vc (:fetcher github :repo "linktohack/evil-xkbswitch")
  :after evil
  :diminish evil-xkbswitch-mode
  :config
  ;; If you use GNOME:
  (setq evil-xkbswitch-set-layout "g3kb-switch -s"
        evil-xkbswitch-get-layout "g3kb-switch")
  (evil-xkbswitch-mode))
#+end_src

**** emacs-smart-input-source
- [[https://github.com/laishulu/emacs-smart-input-source][emacs-smart-input-source]]

** Appearance
*** Fonts
#+begin_src emacs-lisp
(setq use-default-font-for-symbols nil)
#+end_src

#+begin_src emacs-lisp
;; (add-to-list 'default-frame-alist '(font . FONT))
#+end_src

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Inconsolata LGC" :height 125)
;; (set-face-attribute 'default nil :font "Roboto Mono" :height 125)
;; (set-face-attribute 'default nil :font "Monego" :height 125)
#+end_src

**** Icons
Emacs doesn't recognize [[id:0c1a10e0-1456-4e88-aadb-6a7fc45c2930][Vscode Codicons]] and [[id:b5e79f3d-a8e5-4df1-b34b-eee32de54782][Material Design Icons]] fonts.
So for icons need to install [[id:75194bd4-5012-4a57-bf00-f8467afe5bd7][Symbols Nerd Font Mono]] and [[id:bd42899e-c6df-4a9c-a71d-952d4692b507][Material Icons]] fonts.

***** all-the-icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :when (display-graphic-p)
  ;; :when window-system
  :config
  (let ((cache (expand-file-name ".all-the-icons-font-installed" user-emacs-directory)))
    (unless (file-exists-p cache)
      (all-the-icons-install-fonts t)
      (with-temp-buffer (write-file cache)))))
#+end_src

***** Nerd Font
#+begin_src emacs-lisp
(set-fontset-font t '(?\xf0001 . ?\xf1af0) "Symbols Nerd Font Mono" nil 'prepend)
#+end_src

#+begin_src emacs-lisp
;; (set-fontset-font t ?\xe876 "Material Design Icons" nil 'prepend)
;; (set-fontset-font t ? "Material Design Icons" nil 'prepend)
;; (set-fontset-font t ? "Material Design Icons Desktop" nil 'prepend)
#+end_src

***** Unicode Symbols for Legacy Computing
#+begin_src emacs-lisp
(set-fontset-font t '(?\x1fb00 . ?\x1fbca) "LegacyComputing" nil 'prepend)
(set-fontset-font t '(?🯰 . ?🯹) "LegacyComputing" nil 'prepend)
#+end_src

***** Codicons
#+begin_src emacs-lisp
;; (set-fontset-font t 'latin "Noto Sans")
;; (set-fontset-font t '(?\xea60 . ?\xec11) "codicon" nil 'prepend)

;; (set-fontset-font t '(? . ?) "codicon")

;; (let ((fontset (face-attribute 'default :fontset)))
;;   (set-fontset-font fontset '(?\xea60 . ?\xec11) "codicon" nil 'append))

;; (set-fontset-font (frame-parameter nil 'font)
;;                   '(?\xea60 . ?\xec11)
;;                   (font-spec :family "codicon"
;;                              :weight nil
;;                              :size nil)
;;                   nil
;;                   'prepend)
#+end_src

***** COMMENT FontAwesome
#+begin_src emacs-lisp
(let ((fontset (face-attribute 'default :fontset)))
  (set-fontset-font fontset '(?\xf000 . ?\xf2ff) "FontAwesome" nil 'append))
#+end_src

*** Line Height
#+begin_src emacs-lisp
(setq-default line-spacing 1)
#+end_src

*** Color schemes
**** ef-themes
#+begin_src emacs-lisp :noweb yes
(use-package ef-themes
  :ensure t
  :custom
  (ef-themes-mixed-fonts t)
  (ef-themes-variable-pitch-ui t)
  :config
  <<ef-themes-config>>
  (with-eval-after-load 'org
    <<ef-org-faces>>
    )
  (with-eval-after-load 'eglot
    <<ef-eglot-faces>>
    )
  )
#+end_src
***** config
:PROPERTIES:
:header-args: :noweb-ref ef-themes-config
:END:
#+begin_src emacs-lisp
(load-theme 'ef-light :no-confirm)
;; (load-theme 'ef-day :no-confirm)
#+end_src

#+begin_src emacs-lisp
(set-cursor-color "black")
#+end_src

#+begin_src emacs-lisp
(set-face-attribute 'help-key-binding
                    nil
                    :foreground "DarkBlue" :background "grey96"
                    :box '(:line-width (-1 . -1) :color "grey80")
                    :inherit 'fixed-pitch)

;; (my/set-face-attribute
;;  '(help-key-binding :foreground "DarkBlue" :background "grey96"
;;                     :box (:line-width (-1 . -1) :color "grey80")
;;                     :inherit fixed-pitch))
#+end_src

***** Org-mode faces
:PROPERTIES:
:header-args: :noweb-ref ef-org-faces
:END:

#+begin_src emacs-lisp
(my/set-face-attribute
 '((org-verbatim :foreground "#4250ef" :background "#f5f5f5")
   (org-code     :foreground "#cf25aa" :background "#f5f5f5")))
#+end_src

****** Headings
#+begin_src emacs-lisp
(my/set-face-attribute
 '((org-level-1 :foreground "#375cd8" :weight normal :height 1.09)
   (org-level-2 :foreground "#cf25aa" :weight normal :height 1.09)
   (org-level-3 :foreground "#1f77bb" :weight normal :height 1.09)
   (org-level-4 :foreground "#b65050" :weight normal :height 1.09)
   (org-level-5 :foreground "#6052cf" :weight normal :height 1.09)))
#+end_src

Add a box with the same color as a background around every org heading. It does
take effect of adding padding around headings, but it is a hack and not reliable.
#+begin_src emacs-lisp
;; (my/set-face-attribute
;;  `((org-level-1 :foreground "#375cd8" :weight normal :height 1.08
;;                 :box (:line-width 4 :color ,(face-background 'default)))
;;    (org-level-2 :foreground "#cf25aa" :weight normal :height 1.08
;;                 :box (:line-width 4 :color ,(face-background 'default)))
;;    (org-level-3 :foreground "#1f77bb" :weight normal :height 1.08
;;                 :box (:line-width 4 :color ,(face-background 'default)))
;;    (org-level-4 :foreground "#b65050" :weight normal :height 1.08
;;                 :box (:line-width 4 :color ,(face-background 'default)))
;;    (org-level-5 :foreground "#6052cf" :weight normal :height 1.08
;;                 :box (:line-width 4 :color ,(face-background 'default)))))
#+end_src

****** "TODO" keywords
#+begin_src emacs-lisp
(setq org-todo-keyword-faces
      '(("SOMEDAY"    . (:foreground "#6e6e6e"))
        ;; ("TODO"       . (:foreground "#cf7200"))
        ;; ("NEXT"       . (:foreground "#de0000"))
        ("INPROGRESS" . (:foreground "#0076c8"))
        ("WAITING"    . (:foreground "#cf7200"))
        ;; ("DONE"       . (:foreground "#598d3f"))
        ("CANCELLED"  . (:foreground "#63735b"))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ("󰒅" . (:foreground "#7b7b7b"))
        ;; ("󰿦" . (:foreground "#7b7b7b"))
        ;; ("󰔌" . (:foreground "#7b7b7b"))
        ;; ("󰄱" . (:foreground ""))
        ;; ("󱗝" . (:foreground ""))
        ;; ("󰡖" . (:foreground ""))
        ;; ("󰤌" . (:foreground ""))
        ;; ("󱅊" . (:foreground ""))
        ("󰔟" . (:foreground "#0076c8"))
        ;; ("󰄵" . (:foreground ""))
        ("󰅘" . (:foreground "#6e6e6e"))
        ("󱈎" . (:foreground "#6e6e6e"))))
#+end_src

****** Priorities
#+begin_src emacs-lisp
(setq org-priority-faces
      '((?A :foreground "red"     :weight bold)
        (?B :foreground "orange"  :weight bold)
        (?C :foreground "#7CB342" :weight bold)
        (?D :foreground "#2196F3" :weight bold)
        ;; (?D :foreground "#AB47BC" :weight bold)
        ))
#+end_src

***** avy faces
:PROPERTIES:
:header-args: :noweb-ref ef-themes-config
:END:
#+begin_src emacs-lisp :noweb yes
(with-eval-after-load 'avy
  <<ef-avy-faces>>
  )
#+end_src

#+begin_src emacs-lisp :noweb-ref ef-avy-faces
(my/set-face-attribute
 '((avy-background-face :foreground "#7e6f8e" :background unspecified)
   (avy-lead-face       :foreground "grey5"   :background "#ffe9b0" :weight bold)
   ;; (avy-lead-face-0     :background "#ffced7" :weight normal)
   (avy-lead-face-0     :background "#ffe2e7" :weight normal)
   (avy-lead-face-1     :foreground "black"   :background "#ffd5ff" :weight normal)
   (avy-lead-face-2     :background "#c1ffc4")))
#+end_src

#+begin_src emacs-lisp :noweb-ref ef-avy-faces
;; (my/set-face-attribute
;;  '((avy-lead-face   :foreground "red"   :background unspecified :weight bold)
;;    (avy-lead-face-0 :foreground "brown" :background unspecified :weight normal)))
#+end_src

***** eglot faces
:PROPERTIES:
:header-args: :noweb-ref ef-eglot-faces
:END:

#+begin_src emacs-lisp
(my/set-face-attribute
 '((eglot-highlight-symbol-face :background "grey98"
                                :box (:line-width (-1 . -1) :color "grey75")
                                :inherit unspecified)))
#+end_src

**** COMMENT OS^1
[[https://github.com/sashimacs/os1-theme][Source]]
#+begin_src emacs-lisp
(use-package os1-theme
  :vc (:fetcher github :repo "sashimacs/os1-theme")
  :config (load-theme 'os1 :no-confirm))
#+end_src

**** COMMENT modus-themes
#+begin_src emacs-lisp
(use-package modus-themes
  :ensure t
  :config
  (load-theme 'modus-operandi-tritanopia :no-confirm))
#+end_src

**** COMMENT shanty-themes
#+begin_src emacs-lisp
(use-package shanty-themes
  :ensure t
  ;; :custom
  ;; ;; Enable or disable the boxes around function definitions.
  ;; (shanty-themes-function-box t)
  :config
  ;; (load-theme 'shanty-themes-light :no-confirm)
  (load-theme 'shanty-themes-dark :no-confirm))
#+end_src

**** COMMENT doom-themes
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  :config
  ;; (load-theme 'doom-spacegrey t)
  ;; (load-theme 'doom-flatwhite t)
  ;; (load-theme 'doom-miramare t)
  ;; (load-theme 'doom-plain t)
  (load-theme 'doom-one t)
  )
#+end_src

**** COMMENT gruvbox-material
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t))

(use-package doom-gruvbox-material-theme
  :vc (:fetcher github :repo "Cardoso1994/doom-gruvbox-material-theme")
  :after doom-themes
  :custom
  (doom-gruvbox-material-background "soft")  ; soft, medium, hard
  (doom-gruvbox-material-palette "material") ; material, mix, original
  ;; (doom-theme 'doom-gruvbox-material)
  :config
  ;;; Symlink `gruvbox-material' file to `doom-themes' directory.
  (let* ((elpa-dir "~/.config/emacs/elpa")
         (doom-themes-dir (car (f-glob "doom-themes-*" elpa-dir)))
         (theme-file "doom-gruvbox-material-theme.el")
         (from (f-join elpa-dir "doom-gruvbox-material-theme" theme-file))
         (to (f-join doom-themes-dir theme-file)))
    (unless (f-file? to)
      (f-symlink from to)))
  (load-theme 'doom-gruvbox-material t))
#+end_src

*** Fringes
- [[https://emacsredux.com/blog/2015/01/18/customizing-the-fringes/][Customizing the Fringes | Emacs Redux]]

The fringes are used to display symbols that provide information about the text
in the window. You can type =M-x fringe-mode= to disable the fringes, or modify
their width. This command affects fringes in all frames; to modify fringes on
the selected frame only, use =M-x set-fringe-style=. You can make your changes to
the fringes permanent by customizing the variable ~fringe-mode~.

#+begin_src emacs-lisp
(setopt fringe-mode 10)
#+end_src

*** Page breaks
From-feed ASCII cahacter.

**** COMMENT form-feed
#+begin_src emacs-lisp
(use-package form-feed
  :ensure t
  :custom (form-feed-lighter "# ^L")
  :hook (emacs-lisp-mode
         nushell-ts-mode))
#+end_src

**** COMMENT form-feed-st
#+begin_src emacs-lisp
(use-package form-feed-st
  :ensure t
  :hook (emacs-lisp-mode
         nushell-ts-mode))
#+end_src

**** page-break-lines
#+begin_src emacs-lisp
(use-package page-break-lines
  :ensure t
  :hook (emacs-lisp-mode
         nushell-ts-mode)
  ;; :config
  ;; (global-page-break-lines-mode)
  )
#+end_src

*** Scrolling
#+begin_src emacs-lisp
(setopt scroll-margin 0
        auto-window-vscroll nil
        scroll-error-top-bottom nil)
#+end_src

#+begin_src emacs-lisp
(setopt mouse-wheel-tilt-scroll t
        mouse-wheel-progressive-speed nil)
#+end_src

*** Do not jump half the page when point goes out of the screen.

#+begin_src emacs-lisp
(setopt scroll-conservatively 101)
#+end_src

Restore original value for some functions.
#+begin_src emacs-lisp
(defun with-default-scroll-settings (fun)
  (eval `(define-advice ,fun
             (:around (orig-fun &rest args) scroll-conservatively)
           (-let (((scroll-conservatively) (get 'scroll-conservatively 'standard-value)))
             (apply orig-fun args)))))

(mapcar #'with-default-scroll-settings '(dired-do-find-regexp-and-replace
                                         projectile-replace
                                         projectile-replace-regexp))
#+end_src

*** Smooth scrolling
#+begin_src emacs-lisp
(setq jit-lock-stealth-time 1.25) ; Calculate fonts when idle for 1.25 seconds.
(setq jit-lock-stealth-nice 0.2)  ; Seconds between font locking.
(setq jit-lock-chunk-size 4096)
#+end_src

#+begin_src emacs-lisp
(setq jit-lock-defer-time 0)
(with-eval-after-load 'evil
  (add-hook 'evil-insert-state-entry-hook
            (lambda () (setq jit-lock-defer-time 0.25))
            nil t)
  (add-hook 'evil-insert-state-exit-hook
            (lambda () (setq jit-lock-defer-time 0))
            nil t))
#+end_src

**** COMMENT good-scroll
#+begin_src emacs-lisp :noweb yes
(use-package good-scroll
  :ensure t
  :after evil
  :custom (good-scroll-duration 0.3)
  :config
  (good-scroll-mode)
  ;; Return variables back
  (setq mwheel-scroll-up-function   #'scroll-up
        mwheel-scroll-down-function #'scroll-down)
  <<good-scroll-config>>
  )
#+end_src
***** config
:PROPERTIES:
:header-args: :noweb-ref good-scroll-config
:END:
#+begin_src emacs-lisp
(defun good-scroll--convert-line-to-step (line)
  (cl-typecase line
    (integer              (* line (line-pixel-height)))
    ((or null (member -)) (- (good-scroll--window-usable-height)
                             (* next-screen-context-lines
                                (line-pixel-height))))
    (t                    (line-pixel-height))))
#+end_src

****** COMMENT Rebind scrolling keybindings explicitly
#+begin_src emacs-lisp
(defun good-scroll-up-half-screen ()
  (interactive)
  (good-scroll-move (/ (good-scroll--window-usable-height) 2)))

(defun good-scroll-down-half-screen ()
  (interactive)
  (good-scroll-move (- (/ (good-scroll--window-usable-height) 2))))

(general-def :states 'motion
  "C-d" 'good-scroll-up-half-screen
  "C-u" 'good-scroll-down-half-screen
  "C-f" 'good-scroll-up-full-screen
  "C-b" 'good-scroll-down-full-screen)

;; Page-Up / Page-Down keys
(general-def
  "<next>"  'good-scroll-up-full-screen
  "<prior>" 'good-scroll-down-full-screen)
#+end_src

******* COMMENT Evil =C-y= / =C-e= keybindings:

#+begin_src emacs-lisp
(evil-define-command evil-scroll-line-up (count)
  "Scroll the window COUNT lines upwards."
  :repeat nil
  :keep-visual t
  (interactive "p")
  (let ((scroll-preserve-screen-position nil)
        (steps (- (good-scroll--convert-line-to-step count))))
    (good-scroll-move steps)))

(evil-define-command evil-scroll-line-down (count)
  "Scroll the window COUNT lines downwards."
  :repeat nil
  :keep-visual t
  (interactive "p")
  (let ((scroll-preserve-screen-position nil)
        (steps (good-scroll--convert-line-to-step count)))
    (good-scroll-move steps)))
#+end_src

****** Rebind scrolling keybindings implicitly

Rebind scrolling keybindings implicitly by replacing
~scroll-up~ / ~scroll-down~ functions.

#+begin_src emacs-lisp
(defun good-scroll--scroll-up (&optional arg)
  (good-scroll-move (good-scroll--convert-line-to-step arg)))

(defun good-scroll--scroll-down (&optional arg)
  (good-scroll-move (- (good-scroll--convert-line-to-step arg))))

(advice-add 'scroll-up   :override 'good-scroll--scroll-up)
(advice-add 'scroll-down :override 'good-scroll--scroll-down)
#+end_src

****** Make evil =C-y= / =C-e= scroll =n= lines at time
#+begin_src emacs-lisp
(let ((n 3)) ;; number of lines for short move
  (define-advice evil-scroll-line-down (:around (callback count) triple)
    (funcall callback (* count n)))

  (define-advice evil-scroll-line-up (:around (callback count) triple)
    (funcall callback (* count n))))
#+end_src

**** pixel-scroll
#+begin_src emacs-lisp :noweb yes
(use-package pixel-scroll
  :hook (after-init . pixel-scroll-precision-mode)
  :custom
  ;; (pixel-scroll-precision-use-momentum nil)
  (pixel-scroll-precision-interpolate-page t)
  (pixel-scroll-precision-interpolate-mice nil)
  (pixel-scroll-precision-large-scroll-height 20.0)
  :config
  <<pixel-scroll-config>>
  )
#+end_src
***** Evil keybindings for smooth scrolling
:PROPERTIES:
:header-args: :noweb-ref pixel-scroll-config
:END:
#+begin_src emacs-lisp
(setopt pixel-scroll-precision-interpolation-total-time 0.3)

(let ((num-of-lines 4))
  (evil-define-command my/pixel-scroll-interpolate-line-up (count)
    :repeat nil
    :keep-visual t
    (interactive "p")
    (let* ((pixel-scroll-precision-interpolation-total-time 0.08)
           (pixels-per-line (/ (window-text-height nil t)
                               (window-text-height)))
           (delta (* pixels-per-line
                     num-of-lines
                     count)))
      (pixel-scroll-precision-interpolate delta nil 1)))

  (evil-define-command my/pixel-scroll-interpolate-line-down (count)
    :repeat nil
    :keep-visual t
    (interactive "p")
    (let* ((pixel-scroll-precision-interpolation-total-time 0.08)
           (pixels-per-line (/ (window-text-height nil t)
                               (window-text-height)))
           (delta (- (* pixels-per-line
                        num-of-lines
                        count))))
      (pixel-scroll-precision-interpolate delta nil 1))))

(evil-define-command my/pixel-scroll-interpolate-half-page-up ()
  "Interpolate a scroll upwards by half page."
  :repeat nil
  :keep-visual t
  (interactive)
  (pixel-scroll-precision-interpolate (/ (window-text-height nil t) 2)
                                      nil 1))

(evil-define-command my/pixel-scroll-interpolate-half-page-down ()
  "Interpolate a scroll downwards by half page."
  :repeat nil
  :keep-visual t
  (interactive)
  (pixel-scroll-precision-interpolate (- (/ (window-text-height nil t) 2))
                                      nil 1))

(evil-add-command-properties #'pixel-scroll-interpolate-down :repeat nil :keep-visual t)
(evil-add-command-properties #'pixel-scroll-interpolate-up   :repeat nil :keep-visual t)

(general-def
  [remap evil-scroll-down]      'my/pixel-scroll-interpolate-half-page-down ; C-d
  [remap evil-scroll-up]        'my/pixel-scroll-interpolate-half-page-up   ; C-u
  [remap evil-scroll-page-down] 'pixel-scroll-interpolate-down              ; C-f
  [remap evil-scroll-page-up]   'pixel-scroll-interpolate-up                ; C-b
  [remap evil-scroll-line-down] 'my/pixel-scroll-interpolate-line-down      ; C-e
  [remap evil-scroll-line-up]   'my/pixel-scroll-interpolate-line-up)       ; C-y

;; (general-def :keymaps 'help-mode-map :states 'normal
;;   "C-f" 'pixel-scroll-interpolate-down
;;   "C-b" 'pixel-scroll-interpolate-up)
#+end_src

*** Long lines
Do not wrap long lines.
#+begin_src emacs-lisp
(setopt truncate-lines t)
#+end_src

**** Visually wrap long lines

- ~visual-line-mode~ :: (built-in) Turn on long lines wrapping on words ends.

***** COMMENT virtual-auto-fill

#+begin_src emacs-lisp
(use-package virtual-auto-fill :ensure t)
#+end_src

- ~virtual-auto-fill-mode~ :: Visually wrap lines between wrap prefix and ~fill-column~.

This package combine together two packages:
- =visual-fill-column=
- =adaptive-wrap=

***** COMMENT visual-fill-column & adaptive-wrap
This two packages improves ~visual-line-mode~.
Detailed description with images is in the repo: [[https://codeberg.org/joostkremers/visual-fill-column][joostkremers/visual-fill-column]].

1. Visually break long lines on ~fill-column~.
   #+begin_src emacs-lisp
   (use-package visual-fill-column
     :ensure t
     :custom
     (visual-fill-column-width 90)
     ;; (visual-fill-column-center-text t)
     :hook (visual-line-mode . visual-fill-column-mode))
   #+end_src

2. Visually prepend wrapped lines to preserve visual column structures.
   #+begin_src emacs-lisp
   (use-package adaptive-wrap
     :ensure t
     :hook (visual-line-mode . adaptive-wrap-prefix-mode))
   #+end_src

*** Display line numbers
#+begin_src emacs-lisp
(use-package display-line-numbers
  :custom
  ;; (display-line-numbers-width 4)
  (display-line-numbers-grow-only t)
  (display-line-numbers-width-start t)
  :hook (prog-mode . display-line-numbers-mode))
#+end_src

*** Display fill-column indicator
#+begin_src emacs-lisp
(use-package display-fill-column-indicator
  :hook prog-mode)
#+end_src

*** Show column number in modeline
#+begin_src emacs-lisp
(column-number-mode)
#+end_src

*** Modeline
**** doom-modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  ;; :elpaca (:host github :repo "seagle0128/doom-modeline"
  ;;                ;; :ref "aa0e2dd"
  ;;                :ref "379b45bffe7d67683f17c3e815797a082d8793d3")
  :init
  (setq doom-modeline-support-imenu t)
  :custom
  (doom-modeline-height 27)
  (doom-modeline-buffer-file-name-style 'relative-from-project)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-time-icon t)
  (doom-modeline-highlight-modified-buffer-name nil)
  :config
  (doom-modeline-mode))
#+end_src

*** Compose escape signs together to make regexps more readable

=\\= in strings is displayed as a ~easy-escape-character~ (single =\= by default)
and fontified using ~easy-escape-face~.

#+begin_src emacs-lisp
(use-package easy-escape
  :ensure t
  :custom
  (easy-escape-character ?⧵) ;; REVERSE SOLIDUS OPERATOR
  ;; (easy-escape-character ?⧹) ;; BIG REVERSE SOLIDUS
  ;; (easy-escape-character ?＼) ;; FULLWIDTH REVERSE SOLIDUS
  :hook (emacs-lisp-mode . easy-escape-minor-mode))
#+end_src

*** rainbow-mode — Colorize strings that represent colors.
#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure t
  :hook (emacs-lisp-mode conf-space-mode fish-mode conf-toml-mode toml-ts-mode))
#+end_src

*** Highlight whitespace characters
- ~leerzeichen-mode~
#+begin_src emacs-lisp
(use-package leerzeichen
  :ensure t)
#+end_src

*** prettify-symbols-mode
#+begin_src emacs-lisp
(setopt prettify-symbols-unprettify-at-point t)
#+end_src

** Evil
*** evil
#+begin_src emacs-lisp :noweb yes
(use-package evil
  :ensure t
  :preface
  (setq evil-want-keybinding nil)
  :init (evil-mode)
  :custom
  ;; Needed for evil-collection.
  (evil-want-integration t)
  (evil-want-keybinding nil)

  (evil-want-C-u-scroll t)
  (evil-want-C-d-scroll t)
  (evil-want-C-i-jump t)
  (evil-want-C-u-delete t)
  (evil-respect-visual-line-mode t)
  ;; (evil-want-minibuffer t)
  (evil-want-fine-undo t)
  (evil-undo-system 'undo-redo)
  (evil-overriding-maps nil)
  (evil-move-beyond-eol t)
  ;; (evil-ex-complete-emacs-commands 'always)
  (evil-shift-round t)
  (org-return-follows-link t)
  (evil-vsplit-window-right t)
  (evil-split-window-below t)

  :config

  ;;; Make `Y' work as `y$'.
  ;;; Set it here explicitly, because it doesn't work if set in `custom' section.
  (setopt evil-want-Y-yank-to-eol t)

  ;; (setopt evil-search-module 'isearch)
  (setopt evil-search-module 'evil-search)

  ;;; Bind `:ls' command to `bufler' (`ibuffer') instead of `list-buffers'.
  (evil-ex-define-cmd "ls" 'bufler)
  ;; (evil-ex-define-cmd "ls" 'ibuffer-jump)

  ;;; Paste and indent before/after.
  (defun my/paste-and-indent-before ()
    (interactive)
    (with-undo-amalgamate
      (evil-paste-before 1)
      (evil-indent (evil-get-marker ?\[)
                   (evil-get-marker ?\]))))

  (defun my/paste-and-indent-after ()
    (interactive)
    (with-undo-amalgamate
      (evil-paste-after 1)
      (evil-indent (evil-get-marker ?\[)
                   (evil-get-marker ?\])))))
#+end_src

**** custom =ZZ= command

Save buffer and kill it.

#+begin_src emacs-lisp
(with-eval-after-load 'evil
 ;; (advice-add :after 'evil-window-vsplit)
 (evil-define-command my/evil-save-modified-buffer-and-kill-it (file &optional bang)
   "Save the current buffer and kill it"
   :repeat nil
   (interactive "<f><!>")
   (when (buffer-modified-p)
     (evil-write nil nil nil file bang))
   (kill-this-buffer)
   ;; (ibuffer)
   (bufler)))
#+end_src

*** evil-collection
#+begin_src emacs-lisp
(use-package evil-collection
  :ensure t
  :after evil
  :custom
  ;; SPC is my leader key, so forbid evil-collection to bind to it.
  (evil-collection-key-blacklist '("SPC"))
  (evil-collection-setup-minibuffer t)
  (evil-collection-corfu-key-themes '(default tab-n-go))
  :config
  (evil-collection-init))
#+end_src

*** evil-easymotion
#+begin_src emacs-lisp
(use-package evil-easymotion
  :ensure t
  :after (avy evil)
  :config
  (evil-define-avy-motion avy-goto-word-0-above exclusive)
  (evil-define-avy-motion avy-goto-word-0-below exclusive)
  (evilem-make-motion evilem-motion-forward-WORD-begin  #'evil-forward-WORD-begin)
  (evilem-make-motion evilem-motion-backward-WORD-begin #'evil-backward-WORD-begin)
  (evilem-make-motion evilem-motion-forward-word-end    #'evil-forward-word-end)
  (evilem-make-motion evilem-motion-forward-WORD-end    #'evil-forward-WORD-end)
  (general-def :keymaps 'semicolon-leader-map
    "w"  'evil-avy-goto-word-0-below
    "W"  'evilem-motion-forward-WORD-begin
    "b"  'evil-avy-goto-word-0-above
    "B"  'evilem-motion-backward-WORD-begin
    "e"  'evilem-motion-forward-word-end
    "E"  'evilem-motion-forward-WORD-end
    "ge" 'evilem-motion-backward-word-end
    "gE" 'evilem-motion-backward-WORD-end
    "j"  'evilem-motion-next-visual-line
    "k"  'evilem-motion-previous-visual-line))
#+end_src

*** evil-snipe
#+begin_src emacs-lisp :noweb yes
(use-package evil-snipe
  :ensure t
  :after evil-collection
  :custom
  (evil-snipe-scope 'whole-visible)
  (evil-snipe-override-evil-repeat-keys nil)
  (evil-snipe-smart-case t)
  :config
  (evil-snipe-mode)
  (evil-snipe-override-mode)
  (my/add-to-list
   'evil-snipe-disabled-modes '(telega-root-mode
                                pdf-view-mode
                                ;; helpful-mode
                                magit-mode ;; magit-status-mode
                                nov-mode))
  (general-def :keymaps 'evil-snipe-parent-transient-map
    "n" 'evil-snipe-repeat
    "N" 'evil-snipe-repeat-reverse
    "<tab>"     'evil-snipe-repeat
    "<backtab>" 'evil-snipe-repeat-reverse)

  ;; Integration with evil-easymotion
  (with-eval-after-load 'evil-easymotion
    (general-def :keymaps 'evil-snipe-parent-transient-map
      ";" (evilem-create 'evil-snipe-repeat
                         :bind ((evil-snipe-scope 'buffer)
                                (evil-snipe-enable-highlight nil)
                                (evil-snipe-enable-incremental-highlight nil))
                         :post-hook #'evil-snipe--cleanup))))
#+end_src

*** evil-visualstar
Make =*= vim operator work with visual selection.

#+begin_src emacs-lisp
(use-package evil-visualstar
  :ensure t
  :after evil
  :config (global-evil-visualstar-mode))
#+end_src

*** evil-cleverparens
#+begin_src emacs-lisp :noweb yes
(use-package evil-cleverparens
  :ensure t
  :after evil
  :hook lisp-data-mode
  :custom
  (evil-cleverparens-use-s-and-S nil)
  (evil-cleverparens-drag-ignore-lines t)
  :config

  (evil-define-motion my/evil-cp-forward-sexp (count)
    "Motion for moving forward by a sexp."
    :type exclusive
    (let ((count (or count 1)))
      (when (evil-eolp)
        (forward-char))
      (forward-sexp count)
      (forward-sexp)
      (backward-sexp)))

  (evil-define-motion my/evil-cp-backward-sexp (count)
    "Motion for moving backwward by a sexp."
    :type exclusive
    (let ((count (or count 1)))
      (backward-sexp count)))

  (evil-define-motion my/evil-cp-up-sexp (count)
    "Move the cursor to the nearest paired closing bracket."
    :move-point nil
    :type inclusive
    (let ((count (or count 1)))
      (when (evil-cp--looking-at-any-opening-p)
        (evilmi-jump-items)
        (setq count (- count 1)))
      (when (> count 0)
        (when (evil-cp--looking-at-any-closing-p)
          (forward-char))
        (and (sp-up-sexp count)
             (backward-char))))))
#+end_src

*** evil-goggles
#+begin_src emacs-lisp :noweb yes
(use-package evil-goggles
  :ensure t
  :after (evil evil-cleverparens)
  ;; :custom
  ;; (evil-goggles-duration 0.100) ; default is 0.200
  ;; (evil-goggles-enable-delete nil)
  ;; (evil-goggles-enable-change nil)
  :config

  ;;; Add `evil-cleverparens' support
  (progn
    (defvar my/evil-cp-goggles-commands
      '((evil-cp-delete      :face evil-goggles-delete-face :switch t :advice evil-goggles--generic-blocking-advice)
        (evil-cp-delete-line :face evil-goggles-delete-face :switch t :advice evil-goggles--delete-line-advice)
        (evil-cp-yank        :face evil-goggles-yank-face   :switch t :advice evil-goggles--generic-async-advice)
        (evil-cp-yank-line   :face evil-goggles-yank-face   :switch t :advice evil-goggles--generic-async-advice)
        (evil-cp-change      :face evil-goggles-change-face :switch t :advice evil-goggles--generic-blocking-advice)
        (evil-cp-change-line :face evil-goggles-change-face :switch t :advice evil-goggles--generic-blocking-advice)))
    (my/add-to-list 'evil-goggles--commands my/evil-cp-goggles-commands :append))

  (evil-goggles-mode)

  ;; Use diff-mode's faces; deleted text will be highlighed with `diff-removed',
  ;; other faces such as `diff-added' will be used for other actions.
  (evil-goggles-use-diff-faces))
#+end_src

*** evil-org
#+begin_src emacs-lisp
(use-package evil-org
  ;; :ensure t
  :load-path "~/code/emacs/evil-org-mode"
  :after evil-collection
  :hook
  (org-mode . evil-org-mode)
  (org-agenda-mode . (lambda ()
                       (require 'evil-org-agenda)
                       (evil-org-agenda-set-keys)))
  :config
  (evil-org-set-key-theme '(operators
                            textobjects
                            insert
                            ;; navigation
                            additional
                            ;; shift
                            todo
                            ;; heading
                            )))
#+end_src

*** evil-anzu
#+begin_src emacs-lisp
(use-package evil-anzu
  :ensure t
  :after (evil anzu))
#+end_src

*** evil-nerd-commenter
Use =gc{motion}= to comment target and =gcc= to comment line.

#+begin_src emacs-lisp :noweb yes
(use-package evil-nerd-commenter
  :ensure t
  :after evil-collection
  :config
  (setopt evilnc-comment-text-object "c")
  (keymap-set evil-inner-text-objects-map evilnc-comment-text-object #'evilnc-inner-commenter)
  (keymap-set evil-outer-text-objects-map evilnc-comment-text-object #'evilnc-outer-commenter)
  (general-def :states 'motion
    "gc" 'evilnc-comment-operator))
#+end_src

*** better-jumper
#+begin_src emacs-lisp
(use-package better-jumper
  :ensure t
  :after evil-collection
  :custom
  (better-jumper-context 'window)
  (better-jumper-new-window-behavior 'copy)
  (better-jumper-add-jump-behavior 'append)
  :config
  (better-jumper-mode)
  (general-def
    [remap evil-jump-backward] 'better-jumper-jump-backward
    [remap evil-jump-forward]  'better-jumper-jump-forward
    "<tab>" 'indent-for-tab-command))
#+end_src

*** evil-surround
#+begin_src emacs-lisp :noweb yes
(use-package evil-surround
  :ensure t
  :after evil
  :init (global-evil-surround-mode)
  :config
  <<evil-surround-config>>)
#+end_src
**** config
:PROPERTIES:
:header-args: :noweb-ref evil-surround-config
:END:
#+begin_src emacs-lisp
(add-hook 'c++-ts-mode-hook
          (lambda ()
            (my/add-to-list 'evil-surround-pairs-alist
                            '((?< . ("< " . " >"))
                              (?> . ("<" . ">"))))))
#+end_src

#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (my/add-to-list 'evil-surround-pairs-alist
                            '((?* . ("*" . "*"))
                              (?/ . ("/" . "/"))
                              (?_ . ("_" . "_"))
                              (?+ . ("+" . "+"))
                              (?= . ("=" . "="))
                              (?~ . ("~" . "~"))))))
#+end_src

#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (push '(?` . ("`" . "'")) evil-surround-pairs-alist)))
#+end_src

*** evil-matchit
#+begin_src emacs-lisp
(use-package evil-matchit
  :ensure t
  :after evil-collection
  :init (global-evil-matchit-mode))
#+end_src

*** evil-fringe-mark
#+begin_src emacs-lisp
(use-package evil-fringe-mark
  :ensure t
  :hook (after-init . global-evil-fringe-mark-mode)
  ;; :config
  ;; (setq left-fringe-width 16)
  )
#+end_src

** Completion
*** Minibuffer completion
**** COMMENT fido-vertical-mode
#+begin_src emacs-lisp
(fido-vertical-mode)
#+end_src

**** vertico
#+begin_src emacs-lisp :noweb yes
(use-package vertico
  :ensure t
  :after better-defaults
  :custom
  <<vertico-custom>>
  :config
  <<vertico-config>>
  <<vertico-extensions>>
  )
#+end_src
***** custom
:PROPERTIES:
:header-args: :noweb-ref vertico-custom
:END:

#+begin_src emacs-lisp
(vertico-count 14) ;; How many candidates to show.
(vertico-scroll-margin 2)
(vertico-cycle nil)
(vertico-resize 'grow-only) ;; Grow and shrink the Vertico minibuffer.
#+end_src

Hide commands in =M-x= menu which do not work in the current mode.
- Vertico commands are hidden in normal buffers.
- Corfu commands are hidden, since they are not supposed to be used via =M-x=.
#+begin_src emacs-lisp
(read-extended-command-predicate #'command-completion-default-include-p)
#+end_src

#+begin_src emacs-lisp
(enable-recursive-minibuffers t)
(minibuffer-depth-indicate-mode t)
#+end_src

#+begin_src emacs-lisp
(read-file-name-completion-ignore-case t)
(read-buffer-completion-ignore-case t)
(completion-ignore-case t)
#+end_src

***** config
:PROPERTIES:
:header-args: :noweb-ref vertico-config
:END:

Turn off ~ido-mode~ because [[*Emacs][better-defaults]] package turns it on.
#+begin_src emacs-lisp
(ido-mode -1)
(vertico-mode)
#+end_src

#+begin_src emacs-lisp
(defun my/crm-indicator (args)
  "Add prompt indicator to `completing-read-multiple'.
We display [CRM<separator>], e.g., [CRM,] if the separator is a comma."
  (cons (format "[CRM%s] %s"
                (replace-regexp-in-string "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'"
                                          ""
                                          crm-separator)
                (car args))
        (cdr args)))

(advice-add #'completing-read-multiple :filter-args #'my/crm-indicator)
#+end_src

Do not allow the cursor in the minibuffer prompt.
#+begin_src emacs-lisp
(setq minibuffer-prompt-properties '(read-only t
                                     cursor-intangible t
                                     face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

***** vertico-extensions
:PROPERTIES:
:header-args: :noweb-ref vertico-extensions
:END:
****** vertico-repeat
#+begin_src emacs-lisp
(use-package vertico-repeat
  :after vertico
  :config
  ;; (keymap-global-set "M-r" #'vertico-repeat)
  (add-hook 'minibuffer-setup-hook #'vertico-repeat-save))
#+end_src

****** vertico-directory
#+begin_src emacs-lisp
(use-package vertico-directory
  :after vertico
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

****** COMMENT vertico-multiform
#+begin_src emacs-lisp
(use-package vertico-multiform
  :config
  (vertico-multiform-mode)
  (setq vertico-multiform-categories
        ;; '((file buffer grid)
        ;;   (imenu (:not indexed mouse))
        ;;   (symbol (vertico-sort-function . vertico-sort-alpha)))

        ;; ;; Configure the display per command.
        ;; ;; Use a buffer with indices for imenu
        ;; ;; and a flat (Ido-like) menu for M-x.
        ;; '((consult-imenu buffer indexed)
        ;;   (execute-extended-command unobtrusive))

        ;; Configure the display per completion category.
        ;; Use the grid display for files and a buffer
        ;; for the consult-grep commands.
        '((file grid)
          (consult-grep buffer))
        )
  )
#+end_src

**** consult
#+begin_src emacs-lisp :noweb yes
(use-package consult
  :ensure t
  :init
  (setq completion-in-region-function #'consult-completion-in-region)
  :config
  <<consult-config>>)
#+end_src
***** config
:PROPERTIES:
:header-args: :noweb-ref consult-config
:END:
****** yank fix
By default ~consult-yank-from-kill-ring~ not override region in visual mode, but
append to it. This advice fixes this.

#+begin_src emacs-lisp
(with-eval-after-load 'evil
 (defun my/kill-on-paste (str &optional arg)
   "Delete the region before inserting poped string."
   (when (eq evil-state 'visual)
     (kill-region (region-beginning) (region-end))))

 (advice-add 'consult-yank-from-kill-ring :before #'my/kill-on-paste))
#+end_src

****** COMMENT cunsult-xref
#+begin_src emacs-lisp
(setopt xref-show-definitions-function 'consult-xref
        xref-show-xrefs-function 'consult-xref)
#+end_src

**** consult-dir
#+begin_src emacs-lisp
(use-package consult-dir
  :ensure t
  :bind ("C-x C-d" . consult-dir))
#+end_src

**** marginalia
#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :init (marginalia-mode))
#+end_src

**** COMMENT affe
#+begin_src emacs-lisp :noweb yes
(use-package affe
  :ensure t
  :config
  <<affe-config>>
  )
#+end_src
***** config
:PROPERTIES:
:header-args: :noweb-ref affe-config
:END:

- =-H=   :: Search hidden files.
- =-I=   :: Do not respect .gitignoew files.
- =-t f= :: Filter by type: file (f).
#+begin_src emacs-lisp
(setopt affe-find-command "fd -HI -t f")
#+end_src

#+begin_src emacs-lisp
(setopt affe-grep-command "rg --no-ignore-vcs --null --color=never --max-columns=1000 --no-heading --line-number -v ^$")
#+end_src

Manual preview key for =affe-grep=:
#+begin_src emacs-lisp
(consult-customize affe-grep :preview-key "M-.")
#+end_src

#+begin_src emacs-lisp
(defun affe-orderless-regexp-compiler (input _type _ignorecase)
  (setq input (orderless-pattern-compiler input))
  (cons input (apply-partially #'orderless--highlight input)))

(setq affe-regexp-compiler #'affe-orderless-regexp-compiler)
#+end_src

**** icons
***** COMMENT all-the-icons-completion
#+begin_src emacs-lisp
(use-package all-the-icons-completion
  :ensure t
  :demand t
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :config (all-the-icons-completion-mode))
#+end_src

***** nerd-icons-completion
#+begin_src emacs-lisp
(use-package nerd-icons-completion
  :ensure t
  :hook (marginalia-mode . nerd-icons-completion-marginalia-setup)
  :init (nerd-icons-completion-mode))
#+end_src

*** Text completion
**** corfu
#+begin_src emacs-lisp :noweb yes
(use-package corfu
  :ensure t
  :custom
  <<corfu-custom>>
  :config
  (global-corfu-mode)
  <<corfu-config>>)
#+end_src
***** custom
:PROPERTIES:
:header-args: :noweb-ref corfu-custom
:END:
****** Emacs variables related to completion

=TAB= cycle if there are only few candidates:
#+begin_src emacs-lisp
(completion-cycle-threshold 3)
#+end_src

Enable indentation + completion using the =TAB= key.
~completion-at-point~ is often bound to =M-TAB=.
#+begin_src emacs-lisp
(tab-always-indent 'complete)
(tab-first-completion nil)
#+end_src

****** Corfu custom variables
#+begin_src emacs-lisp
;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
(corfu-auto t)                 ;; Enable auto completion
(corfu-separator ?\s)          ;; Orderless field separator
(corfu-auto-prefix 3)
;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
;; (corfu-preview-current nil)    ;; Disable current candidate preview
;; (corfu-preselect 'prompt)      ;; Preselect the prompt
;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
;; (corfu-scroll-margin 5)        ;; Use scroll margin
#+end_src

***** config
:PROPERTIES:
:header-args: :noweb-ref corfu-config
:END:
****** Completing in the minibuffer for commands that doesn't use Vertico

Such as =:= (~evli-ex~), =M-:= (~eval-expression~) and =M-!= (~shell-command~).

Activate ~corfu-mode~ only if ~completion-at-point~ is bound in the ~minibuffer-local~
keymap.

#+begin_src emacs-lisp
(defun corfu-enable-in-minibuffer ()
  "Enable Corfu in the minibuffer if `completion-at-point' is bound."
  (when (where-is-internal #'completion-at-point
                           (list (current-local-map)))
    (setq-local corfu-auto t ;; Enable/disable auto completion
                corfu-echo-delay t ;; Disable automatic echo and popup
                corfu-auto-prefix 2
                corfu-popupinfo-delay nil)
    (corfu-mode)))

(add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)
#+end_src

****** COMMENT Completing for every minibuffer, if no completion UI is active

First we check for Vertico. Then we ensure that Corfu is not enabled if a
password is read from the minibuffer.

#+begin_src emacs-lisp
(defun corfu-enable-always-in-minibuffer ()
  "Enable Corfu in the minibuffer if Vertico are not active."
  (unless (or (bound-and-true-p vertico--input)
              (eq (current-local-map) read-passwd-map))
    (setq-local corfu-auto t ;; Enable/disable auto completion
                corfu-echo-delay t ;; Disable automatic echo and popup
                corfu-auto-prefix 2
                corfu-popupinfo-delay nil)
    (corfu-mode)))

(add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)
#+end_src

****** Move Corfu list to minibuffer
#+begin_src emacs-lisp
(defun corfu-move-to-minibuffer ()
  (interactive)
  (when completion-in-region--data
    (let ((completion-extra-properties corfu--extra)
          completion-cycle-threshold
          completion-cycling)
      (apply #'consult-completion-in-region completion-in-region--data))))

(keymap-set corfu-map "M-m" #'corfu-move-to-minibuffer)
(add-to-list 'corfu-continue-commands #'corfu-move-to-minibuffer)
#+end_src

***** corfu extensions
:PROPERTIES:
:header-args: :noweb-ref corfu-config
:END:

Remembers selected candidates and sorts the candidates by their history position.
#+begin_src emacs-lisp
(use-package corfu-history
  :config (corfu-history-mode))
#+end_src

Display candidate documentation or source in a popup next to the candidate menu.
#+begin_src emacs-lisp
(use-package corfu-popupinfo
  :custom (corfu-popupinfo-delay (cons 0.5 0.5))
  :config (corfu-popupinfo-mode))
#+end_src

Provides commands to show additional information to the candidates in a separate
buffer. In the [[elisp:(describe-keymap 'corfu-map)][corfu-map]] they are bound to:
- =M-g= (~corfu-info-location~)
- =M-h= (~corfu-info-documentation~)
#+begin_src emacs-lisp
(use-package corfu-info)
#+end_src

**** kind-icons
#+begin_src emacs-lisp
(use-package kind-icon
  :ensure t
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

**** dabbrev
Use Dabbrev with Corfu.
#+begin_src emacs-lisp
(use-package dabbrev
  :custom
  (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'"))
  :config
  (general-def
    "M-/"   'dabbrev-completion
    "C-M-/" 'dabbrev-expand))
#+end_src

**** cape
#+begin_src emacs-lisp :noweb yes
(use-package cape
  :ensure t
  :config
  <<cape-config>>
  )
#+end_src
***** config
:PROPERTIES:
:header-args: :noweb-ref cape-config
:END:

*NOTE:* The order matters!
#+begin_src emacs-lisp
(my/add-to-list 'completion-at-point-functions
                '(;; cape-line
                  ;; cape-symbol
                  ;; cape-dict
                  ;; cape-abbrev
                  ;; cape-rfc1345
                  ;; cape-sgml
                  cape-tex
                  cape-keyword
                  cape-history
                  ;; cape-elisp-block
                  cape-file
                  cape-dabbrev
                  ;; dabbrev-capf ; Emacs 29 built-in
                  ))
#+end_src

Invoke desired capfs manually. Alternative prefix keys: =C-c p=, =M-p=, =M-+=.
#+begin_src emacs-lisp
(general-def
  "C-c p p" 'completion-at-point ; capf
  "C-c p t" 'complete-tag        ; etags
  "C-c p d" 'cape-dabbrev        ; or dabbrev-completion
  "C-c p h" 'cape-history
  "C-c p f" 'cape-file
  "C-c p k" 'cape-keyword
  "C-c p s" 'cape-symbol
  "C-c p a" 'cape-abbrev
  "C-c p l" 'cape-line
  "C-c p w" 'cape-dict
  "C-c p \\" 'cape-tex
  "C-c p _" 'cape-tex
  "C-c p ^" 'cape-tex
  "C-c p &" 'cape-sgml
  "C-c p r" 'cape-rfc1345)
#+end_src

*** orderless
#+begin_src emacs-lisp :noweb yes
(use-package orderless
  :ensure t
  :config
  <<orderless-config>>
  )
#+end_src
**** config
:PROPERTIES:
:header-args: :noweb-ref orderless-config
:END:

#+begin_src emacs-lisp
(setq completion-styles '(orderless basic))
;; (setq completion-styles '(substring orderless))
;; (setq completion-styles '(flex)) ;; fuzzy search
#+end_src

#+begin_src emacs-lisp
(setq orderless-component-separator #'orderless-escapable-split-on-space)
#+end_src

#+begin_src emacs-lisp
(setq orderless-matching-styles '(orderless-initialism
                                  orderless-prefixes
                                  orderless-regexp))
#+end_src

Configure a custom style dispatcher (see the [[https://github.com/minad/consult/wiki][Consult wiki]])
#+begin_src emacs-lisp
;; (setq orderless-style-dispatchers '(+orderless-dispatch)
;;       orderless-component-separator #'orderless-escapable-split-on-space)
#+end_src

#+begin_src emacs-lisp
(setq completion-category-defaults nil)
#+end_src

~partial-completion~ for file path expansion. ~partial-completion~ is important for
file wildcard support. Multiple files can be opened at once with ~find-file~ if
you enter a wildcard.

#+begin_src emacs-lisp
(setq completion-category-overrides '((file (styles . (partial-completion)))))
#+end_src

***** COMMENT Fast prefix filtering with Orderless filtering

If you want to combine fast prefix filtering and Orderless filtering you can
still do that by defining a custom Orderless completion style via
~orderless-define-completion-style~. We use a custom style dispatcher, which
enables prefix filtering for input shorter than 4 characters. Note that such a
setup is quite advanced. Please refer to the Orderless documentation and source
code for further details.

#+begin_src emacs-lisp
(defun orderless-fast-dispatch (word index total)
  (and (= index 0) (= total 1) (length< word 4)
       `(orderless-regexp . ,(concat "^" (regexp-quote word)))))

(orderless-define-completion-style orderless-fast
  (orderless-style-dispatchers '(orderless-fast-dispatch))
  (orderless-matching-styles '(orderless-literal orderless-regexp)))

(setq-local corfu-auto t
            corfu-auto-delay 0
            corfu-auto-prefix 0
            completion-styles '(orderless-fast))
#+end_src

** Text editing
#+begin_src emacs-lisp
(setopt fill-column 80
        comment-empty-lines t
        require-final-newline 'visit-save
        sentence-end-double-space nil)
#+end_src

*** Automatic parens pairing
#+begin_src emacs-lisp
(electric-pair-mode)
#+end_src

Make =electric-pair= mode not to complete ~<>~ pair when ~<~ char entered in org mode.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (setq-local electric-pair-inhibit-predicate
                        (lambda (c)
                          (if (char-equal c ?<)
                              t
                            (electric-pair-default-inhibit c))))))
#+end_src

*** Delete selection by typing
This is necessary for the replacement of selected text with the
~consult-yank-from-kill-ring~ function to work.

#+begin_src emacs-lisp
(delete-selection-mode)
#+end_src

*** flyspell
**** flyspell
#+begin_src emacs-lisp
(use-package flyspell
  :custom
  (flyspell-issue-message-flag nil))
#+end_src

**** flyspell-correct
Spell check

#+begin_src emacs-lisp
(use-package flyspell-correct
  :ensure t
  ;; :hook ((markdown-mode . flyspell-mode)
  ;;        (org-mode . flyspell-mode)
  ;;        (text-mode . flyspell-mode))
  )
#+end_src

**** flyspell-correct-popup
#+begin_src emacs-lisp
(use-package flyspell-correct-popup
  :ensure t
  :after flyspell-correct)
#+end_src

*** hide-show-mode
#+begin_src emacs-lisp
(setopt hs-hide-comments-when-hiding-all nil)
#+end_src

*** fill-paragraph
#+begin_src emacs-lisp
;; Don’t break after the first word of a sentence or before the last
(add-hook 'fill-nobreak-predicate #'fill-single-word-nobreak-p)

;; Don’t break after a one-letter word preceded by a whitespace character
(add-hook 'fill-nobreak-predicate #'fill-single-char-nobreak-p)
#+end_src

**** COMMENT unpackaged/flex-fill-paragraph
- [[https://github.com/alphapapa/unpackaged.el#flexibly-fillunfill-paragraphs][Source]]

#+begin_src emacs-lisp
(defvar unpackaged/flex-fill-paragraph-column nil
  "Last fill column used in command `unpackaged/flex-fill-paragraph'.")

;;;###autoload
(defun unpackaged/flex-fill-paragraph (&optional fewer-lines unfill)
  "Fill paragraph, incrementing fill column to cause a change when repeated.
The global value of `fill-column' is not modified; it is only
bound around calls to `fill-paragraph'.

When called for the first time in a sequence, unfill to the
default `fill-column'.

When called repeatedly, increase `fill-column' until filling
changes.

With one universal prefix, increase `fill-column' until the
number of lines is reduced.  With two, unfill completely."
  (interactive "P")
  (let* ((fewer-lines (or fewer-lines (equal current-prefix-arg '(4))))
         (unfill (or unfill (equal current-prefix-arg '(16))))
         (fill-column
          (cond (unfill (setf unpackaged/flex-fill-paragraph-column nil)
                        most-positive-fixnum)
                (t (setf unpackaged/flex-fill-paragraph-column
                         (if (equal last-command this-command)
                             (or (unpackaged/flex-fill-paragraph--next-fill-column fewer-lines)
                                 fill-column)
                           fill-column))))))
    (fill-paragraph)
    (message "Fill column: %s" fill-column)))

(defun unpackaged/flex-fill-paragraph--next-fill-column (&optional fewer-lines)
  "Return next `fill-column' value.
If FEWER-LINES is non-nil, reduce the number of lines in the
buffer, otherwise just change the current paragraph."
  ;; This works well, but because of all the temp buffers, sometimes when called
  ;; in rapid succession, it can cause GC, which can be noticeable.  It would be
  ;; nice to avoid that.  Note that this has primarily been tested on
  ;; `emacs-lisp-mode'; hopefully it works well in other modes.
  (let* ((point (point))
         (source-buffer (current-buffer))
         (mode major-mode)
         (fill-column (or unpackaged/flex-fill-paragraph-column fill-column))
         (old-fill-column fill-column)
         (hash (unless fewer-lines
                 (buffer-hash)))
         (original-num-lines (when fewer-lines
                               (line-number-at-pos (point-max)))))
    (with-temp-buffer
      (delay-mode-hooks
        (funcall mode))
      (setq-local fill-column old-fill-column)
      (insert-buffer-substring source-buffer)
      (goto-char point)
      (cl-loop while (fill-paragraph)
               ;; If filling doesn't change after 100 iterations, abort by returning nil.
               if (> (- fill-column old-fill-column) 100)
               return nil
               else do (cl-incf fill-column)
               while (if fewer-lines
                         (= original-num-lines (line-number-at-pos (point-max)))
                       (string= hash (buffer-hash)))
               finally return fill-column))))
#+end_src

**** COMMENT far-fill-paragraph

Provides ~far-fill-paragraph~ function which fills the paragraph at the point.
#+begin_src emacs-lisp
(use-package far
  :vc (:fetcher github :repo "eshrh/far.el"))
#+end_src

*** COMMENT indent-relative region

#+begin_src emacs-lisp
(save-excursion)

(progn
  (back-to-indentation)
  (indent-relative))

(foreach-in-region)

(when (use-region-p))
(region-beginning)
(region-end)

(defun do-lines (fun &optional start end)
  "Invoke function FUN on the text of each line from START to END."
  ;; (interactive
  ;;  (let ((fn  (intern (completing-read "Function: " obarray 'functionp t))))
  ;;    (if (use-region-p)
  ;;        (list fn (region-beginning) (region-end))
  ;;      (list fn (point-min) (point-max)))))
  (save-excursion
    (goto-char start)
    (while (< (point) end)
      (funcall fun (buffer-substring (line-beginning-position) (line-end-position)))
      (forward-line 1))))
#+end_src

*** ws-butler
#+begin_src emacs-lisp
(use-package ws-butler
  :ensure t
  :config
  (ws-butler-global-mode))
#+end_src

*** par
- [[https://emacs.stackexchange.com/questions/26361/how-can-i-use-par-as-my-paragraph-formatter][Source]]

#+begin_src emacs-lisp
(when (executable-find "par")
  (defun my/par-fill-region (begin end par-option)
    "Use `par' executable to fill region between BEGIN and END.

- With C-u also justify the text.
- With C-u C-u try to make all lines of almost equal lengths instead
  of justifying.

If PAR-OPTION is \\='(4) `\\[universal-argument]', also justify the text.
If PAR-OPTION is \\='(16) `\\[universal-argument] \\[universal-argument]', try to
make all lines of almost equal lengths instead of justifying.

See `man par' for more information."
    (interactive "r\nP")
    (let* ((width-str (number-to-string fill-column))
           (err-buf "*par Error*")
           (par-cmd
            (concat "par "
                    "w" width-str " " ; set fill width
                    ;; Body characters: . , ? upper-case lower-case
                    (shell-quote-argument "B=.,?_A_a") " "
                    ;; Quote characters: space > | <comment-start char>
                    (shell-quote-argument
                     (concat "Q=_s>|" (when comment-start comment-start))) " "
                    ;; Allow bodiless characters like *, space, .. to inc/dec by
                    ;; up to 10 characters to adjust line width.
                    "r10"
                    "T4" ; Expand tab chars to 4 spaces
                    ;; Prefixes may not contain any trailing body characters, and
                    ;; suffixes may not contain any leading body characters
                    "b"
                    "h2"
                    "e1" ; Expel/remove superfluous lines
                    (when (equal '(16) par-option)
                      "f") ; Try to make all lines of nearly the same length
                    "g" ; Make a better guess at inserting line breaks
                    (when (equal '(4) par-option)
                      "j") ; Justify the lines by inserting spaces between words
                    "q" ; Insert blank lines before/after quoted text
                    "R" ; Throw an error if a word length exceeds the fill width
                    "E" ; Send error to stderr instead of stdout
                    ))
           (before-text (buffer-substring-no-properties begin end))
           par-ret
           ;; Do the formatting in a temp buffer so that the text in the original
           ;; buffer doesn't get corrupted in case `par' fails due to some error.
           (after-text (with-temp-buffer
                         (insert before-text)
                         (setq par-ret (shell-command-on-region
                                        (point-min) (point-max)
                                        par-cmd nil :replace
                                        err-buf :display-error-buffer))
                         (buffer-substring-no-properties (point-min) (point-max)))))
      ;; If 1 is returned, error occurred in the cmd execution; 0 - no error
      (if (= 1 par-ret)
          (progn
            ;; Switch to the error buffer
            (switch-to-buffer-other-window err-buf)
            (special-mode)) ; Set this mode so that you can quit it quickly using C-u q
        ;; If no error occurred, do below in the original buffer
        (delete-region begin end)
        (insert after-text))
      (message "Executed `%s' on the region" par-cmd))))
#+end_src

** IDE
*** Indentation
Do not reindet the previous line on insert newline.
#+begin_src emacs-lisp
(setq-default electric-indent-inhibit t)
#+end_src

**** Automaticaly guess indentation level
#+begin_src emacs-lisp
(use-package dtrt-indent
  :ensure t
  :hook
  ((c-mode c++-mode c-ts-mode c++-ts-mode) . dtrt-indent-mode)
  ;; :config
  ;; (dtrt-indent-global-mode)
  )
#+end_src

*** Colors in compilers output

Convert ansi-colors to emacs faces in compiliers output.
#+begin_src emacs-lisp
(use-package ansi-color
  :custom (ansi-color-for-compilation-mode t)
  :hook (compilation-filter . ansi-color-compilation-filter))
#+end_src

*** project.el
#+begin_src emacs-lisp
(setq project-vc-extra-root-markers
      '(".projectile" ".project"))
#+end_src

*** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :custom
  (projectile-auto-discover t)
  (projectile-project-search-path '("~"))
  :init (projectile-mode))
#+end_src

**** consult-projectile
#+begin_src emacs-lisp
(use-package consult-projectile
  :ensure t
  :after projectile
  :bind (([remap projectile-switch-to-buffer] . consult-projectile-switch-to-buffer)
         ([remap projectile-find-dir] . consult-projectile-find-dir)
         ([remap projectile-find-file] . consult-projectile-find-file)
         ([remap projectile-recentf] . consult-projectile-recentf)
         ;; ([remap projectile-switch-project] . consult-projectile-switch-project)
         ([remap projectile-switch-project] . consult-projectile)))

;; The multiview includes initially buffers, files and known projects.  To include
;; recent files and directires add `consult-projectile--source-projectile-dir' and/or
;; `consult-projectile--source-projectile-recentf' to `consult-projectile-sources'.
#+end_src

*** LSP
**** COMMENT lsp-mode
***** lsp-mode
#+begin_src emacs-lisp :noweb yes
(use-package lsp-mode
  :ensure t
  ;; :commands lsp
  :custom
  (lsp-idle-delay 0.5)
  (lsp-completion-provider :none) ; I use Corfu
  ;; (lsp-headerline-breadcrumb-enable-diagnostics nil)
  ;; (lsp-headerline-breadcrumb-icons-enable t)
  ;; (lsp-diagnostics-provider :flycheck)
  (lsp-eldoc-render-all t) ;; Show all documenttion
  (lsp-eldoc-enable-hover nil)
  :hook
  ;; ((c-mode c++-mode c-ts-mode c++-ts-mode) . lsp)
  ((c-mode c++-mode c-ts-mode c++-ts-mode) . lsp-deferred)
  :config
  <<lsp-mode-config>>
  )
#+end_src

****** config
:PROPERTIES:
:header-args: :noweb-ref lsp-mode-config
:END:

#+begin_src emacs-lisp
(add-hook 'lsp-mode  #'lsp-enable-which-key-integration)
#+end_src

#+begin_src emacs-lisp
(add-hook 'lsp-completion-mode
          (lambda ()
            (setf (->> completion-category-defaults
                       (alist-get 'lsp-capf)
                       (alist-get 'styles))
                  '(orderless))))
#+end_src

#+begin_src emacs-lisp
;; (add-hook 'lsp-after-initialize-hook)
#+end_src

***** lsp-ui
#+begin_src emacs-lisp
(use-package lsp-ui
  :ensure t
  ;; :commands lsp-ui-mode
  :hook (lsp-mode . lsp-ui-mode)
  ;; :custom
  ;; (lsp-ui-doc-enable nil)
  ;; (lsp-ui-doc-delay 0.5)
  ;; (lsp-ui-doc-position 'bottom)
  :config
  (general-def :keymaps 'lsp-ui-mode-map
    [remap xref-find-definitions] 'lsp-ui-peek-find-definitions
    [remap xref-find-references]  'lsp-ui-peek-find-references)
  )
#+end_src

***** COMMENT lsp-treemacs
#+begin_src emacs-lisp
(use-package lsp-treemacs
  :ensure t
  :commands lsp-treemacs-errors-list)
#+end_src

***** consult-lsp
#+begin_src emacs-lisp
(use-package consult-lsp
  :ensure t
  :after (consult lsp-mode))
#+end_src

***** eldoc-box
Show eldoc content in the floating frame.

#+begin_src emacs-lisp
(use-package eldoc-box
  :ensure t
  :autoload (eldoc-box--replace-en-space
             eldoc-box--prettify-markdown-separator
             eldoc-box--remove-linked-images
             eldoc-box--remove-noise-chars
             eldoc-box--fontify-html
             eldoc-box--condense-large-newline-gaps)
  :config
  (my/add-to-list 'eldoc-box-self-insert-command-list
                  '(evil-force-normal-state)))
#+end_src

***** COMMENT lsp-pyright
#+begin_src emacs-lisp
(use-package lsp-pyright
  :ensure t
  :hook
  (python-mode . (lambda ()
                   (require 'lsp-pyright)
                   (lsp)))) ;; or lsp-deferred
#+end_src

***** COMMENT dap-mode
#+begin_src emacs-lisp
(use-package dap-mode :ensure t)
(use-package dap-python :ensure t)
#+end_src

**** eglot
In case you have some problem with eglot, first update it to the last version
with ~eglot-upgrade-eglot~.

***** eglot
#+begin_src emacs-lisp :noweb yes
(use-package eglot
  :hook
  ((;; c-mode c++-mode
    c-ts-mode c++-ts-mode
    cmake-mode cmake-ts-mode) . eglot-ensure)
  :custom
  (eglot-autoshutdown t)
  (eglot-extend-to-xref t)
  (eglot-events-buffer-size 0) ; Don't use event's buffer.
  (eglot-report-progress t)
  (eglot-send-changes-idle-time 1.2)
  (eglot-ignored-server-capabilities '(:documentOnTypeFormattingProvider))
  :config
  <<eglot-config>>
  )
#+end_src
****** config
:PROPERTIES:
:header-args: :noweb-ref eglot-config
:END:

#+begin_src emacs-lisp
(defun my/eglot-managed-buffer-setup ()
  (if (eglot-managed-p)
      (progn
        (setq-local eldoc-idle-delay 0.5
                    eldoc-echo-area-use-multiline-p t
                    flymake-no-changes-timeout 0.5)
        (use-local-map eglot-mode-map))
    ;; Eglot stops managing buffer
    (mapc #'kill-local-variable '(eldoc-idle-delay
                                  eldoc-echo-area-use-multiline-p
                                  flymake-no-changes-timeout))))

(add-hook 'eglot-managed-mode-hook #'my/eglot-managed-buffer-setup)
#+end_src

#+begin_src emacs-lisp
;; (add-to-list 'eglot-stay-out-of 'eldoc)
#+end_src

******* Make a Cape super Capf
- [[https://github.com/minad/corfu/wiki#making-a-cape-super-capf-for-eglot][source]]

#+begin_src emacs-lisp
(defun my/eglot-capf ()
  (setq-local completion-at-point-functions '(#'cape-capf-super
                                              #'eglot-completion-at-point
                                              ;; #'tempel-expand
                                              #'cape-file)))

(add-hook 'eglot-managed-mode-hook #'my/eglot-capf)
#+end_src

******* COMMENT Cape integration
- [[https://github.com/minad/corfu/wiki#configuring-corfu-for-eglot][source]]

*BUG:* I disable this config because it breakes completion for C++ with clangd! ([[https://github.com/minad/corfu/discussions/400][source]])

#+begin_src emacs-lisp
(with-eval-after-load 'cape
  (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster))
#+end_src

******* Documentatin window configs
#+begin_src emacs-lisp
(define-advice eldoc-doc-buffer (:after (_) prettify-eldoc-buffer)
  (with-current-buffer eldoc--doc-buffer
    (setq-local fill-column 90)
    (visual-line-mode)
    (virtual-auto-fill-mode)
    ;; (eldoc-box--prettify-markdown-separator)
    (eldoc-box--replace-en-space)
    ;; (eldoc-box--remove-linked-images)
    ;; (eldoc-box--remove-noise-chars)
    ;; (eldoc-box--fontify-html)
    ;; (eldoc-box--condense-large-newline-gaps)
    ))
#+end_src

******* LSP-servers config
******** COMMENT emacs-lsp-booster
- [[https://github.com/blahgeek/emacs-lsp-booster][Source]]
********* eglot-booster
- [[https://github.com/jdtsmith/eglot-booster][Source]]
#+begin_src emacs-lisp
(use-package eglot-booster
  :vc (:fetcher github :repo "jdtsmith/eglot-booster")
  :after eglot
  :config
  (eglot-booster-mode))
#+end_src

******** clangd settings
#+begin_src emacs-lisp
(add-to-list 'eglot-server-programs
             '((c++-mode c++-ts-mode)
               . (;; "emacs-lsp-booster" ;; in case I start to use emacs-lsp-booster
                  "clangd"
                  "--compile-commands-dir=debug"
                  "--background-index"
                  "--suggest-missing-includes"
                  "--pch-storage=memory"

                  ;; bounded  :: Similar completion items (e.g. function overloads) are
                  ;;             combined.  Type information shown where possible.
                  ;; detailed :: One completion item for each semantically distinct
                  ;;             completion, with full type information.
                  "--completion-style=bundled")))
#+end_src

******** COMMENT ccls settings
#+begin_src emacs-lisp
(dolist (mode '(c++-mode c++-ts-mode))
  (add-to-list 'eglot-server-programs
               `(,mode . ("ccls"))))
#+end_src

******** neocmakelsp (cmake)
#+begin_src emacs-lisp
(dolist (mode '(cmake-mode cmake-ts-mode))
  (add-to-list 'eglot-server-programs
               `(,mode . ("neocmakelsp" "--stdio"))))
#+end_src

******* COMMENT Disable eglot lsp-server communicating buffer
- [[https://www.reddit.com/r/emacs/comments/1447fy2/comment/jnev6ca/?utm_source=share&utm_medium=web2x&context=3][Source]]

The events buffer is enabled by default, and slow down the performance.
It contains all the communications between eglot and the lsp server (some are
very chatty), and it's also pretty-printed. Turn it off:

#+begin_src emacs-lisp
(fset #'jsonrpc--log-event #'ignore)
#+end_src

***** eldoc-box
Show eldoc content in the floating frame.

#+begin_src emacs-lisp
(use-package eldoc-box
  :ensure t
  :autoload (eldoc-box--replace-en-space
             eldoc-box--prettify-markdown-separator
             eldoc-box--remove-linked-images
             eldoc-box--remove-noise-chars
             eldoc-box--fontify-html
             eldoc-box--condense-large-newline-gaps)
  :after eglot
  :config
  (my/add-to-list 'eldoc-box-self-insert-command-list
                  '(evil-force-normal-state)))
#+end_src

***** COMMENT eldoc-overlay
#+begin_src emacs-lisp
(use-package eldoc-overlay
  :ensure t)
#+end_src

***** flymake
#+begin_src emacs-lisp
(setopt
 flymake-start-on-save-buffer t)
#+end_src

#+begin_src emacs-lisp
(dolist (hook '(flymake-diagnostics-buffer-mode-hook
                flymake-project-diagnostics-mode-hook))
  (add-hook hook #'hl-line-mode))
#+end_src

****** COMMENT flymake-diagnostic-at-point
#+begin_src emacs-lisp
(use-package flymake-diagnostic-at-point
  :ensure t
  :hook (flymake-mode . flymake-diagnostic-at-point-mode))
#+end_src

***** consult-eglot
This package provides a single command ~consult-eglot-symbols~ that query
workspace symbol from eglot using consult.

#+begin_src emacs-lisp
(use-package consult-eglot
  :ensure t
  :after eglot)
#+end_src

***** COMMENT flycheck-eglot
#+begin_src emacs-lisp
(use-package flycheck-eglot
  :ensure t
  :after (flycheck eglot)
  :config
  (global-flycheck-eglot-mode))
#+end_src

***** breadcrumb
#+begin_src emacs-lisp
(use-package breadcrumb
  :ensure t
  :hook
  ((c-mode c++-mode c-ts-mode c++-ts-mode) . breadcrumb-local-mode))
#+end_src

**** xref
#+begin_src emacs-lisp
(setopt xref-auto-jump-to-first-definition 'show)
#+end_src

**** COMMENT flycheck
***** flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :custom
  (flycheck-display-errors-function #'flycheck-display-error-messages-unless-error-list)
  ;; (flycheck-indication-mode nil)
  :config
  (global-flycheck-mode))
#+end_src

***** flycheck-inline
#+begin_src emacs-lisp
(use-package flycheck-inline
  :ensure t
  :hook (flycheck-mode . flycheck-inline-mode))
#+end_src

***** COMMENT flycheck-pos-tip
#+begin_src emacs-lisp
(use-package flycheck-pos-tip
  :ensure t
  :after flycheck
  :config
  (flycheck-pos-tip-mode))
#+end_src

*** Snippets
**** COMMENT tempel
#+begin_src emacs-lisp
;; Templates that can be used as 'capf'
(use-package tempel
  :after corfu
  :init
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
                (#'tempel-expand . completion-at-point-functions)))
  :hook
  (prog-mode text-mode) . tempel-setup-capf)
#+end_src

*** Structural editing
**** [[*evil-cleverparens][evil-cleverparens]]
**** COMMENT symex
- [[https://github.com/drym-org/symex.el?tab=readme-ov-file&utm_source=pocket_saves][Source]]
#+begin_src emacs-lisp
(use-package symex
  :ensure t
  :custom
  (symex-modal-backend 'evil)
  :config
  ;; (dolist (mode '(lisp-mode emacs-lisp-mode))
  ;;   (let ((hook (intern (concat (symbol-name mode) "-hook"))))
  ;;     (add-hook hook (lambda ()
  ;;                      ;; (general-def :keymaps 'local :states 'normal
  ;;                      ;;   "\\" 'symex-mode-interface)
  ;;                      (general-def :keymaps 'local :states 'normal
  ;;                        "<escape>" 'symex-mode-interface)
  ;;                      (general-def :keymaps 'local :states 'insert
  ;;                        "<escape>" 'symex-mode-interface)))))
  (add-hook 'lisp-data-mode-hook
            (lambda ()
              ;; (general-def :keymaps 'local :states 'normal
              ;;   "\\" 'symex-mode-interface)
              (general-def :keymaps 'local :states 'normal
                "<escape>" 'symex-mode-interface)
              (general-def :keymaps 'local :states 'insert
                "<escape>" 'symex-mode-interface)))
  ;; Should be set before invoking `symex-initialize'.
  (setq symex--user-evil-keyspec
        '(("j" . symex-go-up)
          ("k" . symex-go-down)))
  (symex-initialize))
#+end_src

**** COMMENT puni
#+begin_src emacs-lisp
(use-package puni
  :ensure t
  :defer t
  :hook (term-mode . puni-disable-puni-mode)
  :init
  ;; The autoloads of Puni are set up so you can enable `puni-mode` or
  ;; `puni-global-mode` before `puni` is actually loaded. Only after you press
  ;; any key that calls Puni commands, it's loaded.
  (puni-global-mode))
#+end_src

**** COMMENT lispy
#+begin_src emacs-lisp
(use-package lispy
  :ensure t
  :custom
  (lispy-safe-delete t)
  (lispy-safe-copy t)
  (lispy-safe-paste t)
  :hook (emacs-lisp-mode . lispy-mode))
#+end_src

**** COMMENT lispyville
#+begin_src emacs-lisp :noweb yes
(use-package lispyville
  :ensure t
  :after general
  :hook (lispy-mode . my/lispyville-mode)
  :config
  <<lispyville-config>>)
#+end_src
***** config
:PROPERTIES:
:header-args: :noweb-ref lispyville-config
:END:

#+begin_src emacs-lisp
(lispyville-set-key-theme
 '(operators c-w c-u prettify additional-motions additional wrap))
#+end_src

#+begin_src emacs-lisp
(defun my/lispyville-mode ()
  (lispyville-mode)
  (general-def :keymaps 'local :states 'normal
    "(" 'lispyville-backward-up-list
    "g c" 'lispyville-comment-or-uncomment
    "[ SPC" 'evil-collection-unimpaired-insert-newline-above
    "] SPC" 'evil-collection-unimpaired-insert-newline-below)
  (general-def :keymaps 'local :states '(motion normal visual)
    ";" '(:keymap semicolon-leader-map)
    ;; ";" '(:keymap evilem-map)
    )
  (general-def :keymaps 'local :states 'visual
    "g c" 'lispyville-comment-or-uncomment))
#+end_src

*** COMMENT Auto close =*compilation*= buffer if success
#+begin_src emacs-lisp
(setq compilation-finish-functions
      (lambda (buf str)
        (if (null (string-match ".*exited abnormally.*" str))
            ;;no errors, make the compilation window go away in a few seconds
            (progn
              (run-at-time "0.6 sec"
                           nil
                           'delete-windows-on
                           (get-buffer-create "*compilation*"))
              ;; (run-at-time "0.4 sec" nil
              ;;              (lambda ()
              ;;                (-> (get-buffer-create "*compilation*")
              ;;                    (get-buffer-window)
              ;;                    (select-window))
              ;;                (switch-to-buffer nil)))
              (message "No Compilation Errors!")))))
#+end_src

** Tools
*** COMMENT embark
#+begin_src emacs-lisp
(use-package embark
  :ensure t
  :config
  (general-def :states 'motion
    "," 'embark-act
    "M-," 'embark-dwim)
  ;; ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; ;; strategy, if you want to see the documentation from multiple providers.
  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)
  )
#+end_src

**** embark-consult
#+begin_src emacs-lisp
(use-package embark-consult
  :ensure t
  :hook (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

*** avy
#+begin_src emacs-lisp
(use-package avy
  :ensure t
  :custom
  (avy-background t)
  (avy-keys (number-sequence ?a ?z)) ;; Any lower-case letter a-z.
  ;; (avy-words)
  (avy-style 'at-full)
  (avy-all-windows nil))
#+end_src

#+begin_src emacs-lisp :tangle no
;; (define-advice forward-evil-paragraph
;;     (:around (callback &rest args) use-default-paragraph-definiton-in-org)
;;   (if (derived-mode-p 'org-mode)
;;       (let ((paragraph-start    (default-value 'paragraph-start))
;;             (paragraph-separate (default-value 'paragraph-separate)))
;;         (apply callback args))
;;     (apply callback args)))

(with-eval-after-load 'avy
  (define-advice avy-action-goto))
#+end_src

*** anzu
#+begin_src emacs-lisp
(use-package anzu
  :ensure t
  :init (global-anzu-mode)
  :config
  (general-def
    [remap query-replace]                'anzu-query-replace
    [remap query-replace-regexp]         'anzu-query-replace-regexp
    [remap isearch-query-replace]        'anzu-isearch-query-replace
    [remap isearch-query-replace-regexp] 'anzu-isearch-query-replace-regexp))
#+end_src

*** expand-region
#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :after evil-collection
  :custom
  (expand-region-contract-fast-key "C-v")
  :config
  (general-def :states 'visual
    "v" 'er/expand-region))

;; (defun my/collapse-region ()
;;   (interactive)
;;   (er/expand-region -1))
;; (general-def :states 'visual
;;   "v" 'er/expand-region
;;   "C-v" 'my/collapse-region)
#+end_src

*** zoxide
#+begin_src emacs-lisp
(use-package zoxide
  :ensure t
  :bind (:map leader-map
         ("fz" . zoxide-find-file)))
#+end_src

*** origami
#+begin_src emacs-lisp
(use-package origami
  :ensure t
  :after evil
  ;; :custom
  ;; (origami-show-fold-header t) ;; highlight fold headers
  ;; :init (global-origami-mode)
  :config
  ;; (setq origami-fold-style 'triple-braces)
  (general-def :keymaps 'origami-mode-map :states 'normal
    "z j" 'origami-forward-fold
    "z k" 'origami-previous-fold))
#+end_src

*** rainbow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** rg
#+begin_src emacs-lisp
(use-package rg
  :ensure t)
#+end_src

*** fzf
#+begin_src emacs-lisp
(use-package fzf
  :ensure t
  :custom
  ;; (fzf/args "-x --color bw --print-query --margin=1,0 --no-hscroll")
  ;; (fzf/executable "fzf")
  (fzf/git-grep-args "-i --line-number %s")
  ;; command used for `fzf-grep-*` functions
  ;; example usage for ripgrep:
  (fzf/grep-command "rg --files --no-ignore --hidden --follow -g \"!{.git,node_modules}\" 2> /dev/null'")
  ;; If nil, the fzf buffer will appear at the top of the window
  (fzf/position-bottom t)
  (fzf/window-height 20)
  :config
  (defun my/fzf-curdir ()
    (interactive)
    (fzf-find-file-in-dir  default-directory))
  (defun my/fzf-home ()
    (interactive)
    (fzf-find-file-in-dir (getenv "HOME")))
  (my/which-key-set-command-description
   'my/fzf-curdir "fzf"
   'my/fzf-home   "fzf-home")
  )
#+end_src

*** undo tree
#+begin_src emacs-lisp
(use-package vundo
  :ensure t
  ;; :vc (:fetcher github :repo "casouri/vundo")
  :custom
  (vundo-glyph-alist vundo-unicode-symbols)
  ;; (vundo-roll-back-on-quit nil)
  (vundo-compact-display nil)
  :config
  (general-def :states 'normal
    "U" 'vundo))
#+end_src

*** separedit
#+begin_src emacs-lisp
(use-package separedit :ensure t
  :custom
  ;; Default major-mode for edit buffer can also be other mode e.g. ‘org-mode’.
  (separedit-default-mode 'markdown-mode)
  (separedit-preserve-string-indentation t)
  (separedit-continue-fill-column t)
  (separedit-write-file-when-execute-save t)
  (separedit-remove-trailing-spaces-in-comment t)
  :config
  ;; ;; Key binding for modes you want edit or simply bind ‘global-map’ for all.
  (general-def :keymaps 'global-map :states 'normal
    "z'" 'separedit)
  ;; (general-def :keymaps 'prog-mode-map :states 'normal
  ;;   "z'" 'separedit)
  ;; (general-def :keymaps 'minibuffer-local-map :states 'normal
  ;;   "z'" 'separedit)
  ;; (general-def :keymaps 'help-mode-map :states 'normal
  ;;   "z'" 'separedit)
  ;; (general-def :keymaps 'helpful-mode-map :states 'normal
  ;;   "z'" 'separedit)
  ;; (with-eval-after-load 'obsidian
  ;;   (general-def :keymaps 'obsidian-mode-map :states 'normal
  ;;     "z'" 'separedit))

  ;; (general-def :keymaps 'separedit-mode-map :states 'normal
  ;;   "ZZ" 'separedit-commit
  ;;   "ZQ" 'separedit-abort)
  (general-def :keymaps 'separedit-mode-map :states 'normal
    [remap edit-indirect-commit] 'separedit-commit))
#+end_src

*** restart-emacs
#+begin_src emacs-lisp
(use-package restart-emacs
  :ensure t
  :commands (restart-emacs  restart-emacs-start-new-emacs))
#+end_src

*** COMMENT moom
#+begin_src emacs-lisp
(use-package moom
  :ensure t
  :after transient
  :config
  (moom-mode)
  (moom-move-frame-to-edge-right))
#+end_src

*** COMMENT elisp-demos
#+begin_src emacs-lisp
(use-package elisp-demos
  :ensure t
  :after helpful
  :config
  (advice-add #'helpful-update :after #'elisp-demos-advice-helpful-update))
#+end_src

*** COMMENT zoom
#+begin_src emacs-lisp
(use-package zoom
  :ensure t
  :custom
  (split-width-threshold 130) ;; Threshold to split window horizontally.
  (zoom-mode t)
  (zoom-ignored-major-modes '(dired-mode))
  (temp-buffer-resize-mode t))
#+end_src

*** COMMENT fancy-compilation
#+begin_src emacs-lisp
(use-package fancy-compilation
  :ensure t
  :config (fancy-compilation-mode))
#+end_src

** Org-mode
*** org
#+begin_src emacs-lisp :noweb yes
(use-package org
  :custom
  <<org-custom>>
  :config
  <<org-config>>)
#+end_src
**** custom
:PROPERTIES:
:header-args: :noweb-ref org-custom
:END:

Sometimes you may inadvertently edit an invisible part of the buffer and be
confused on what has been edited and how to undo the mistake. This setting
allow to preventing this.
#+begin_src emacs-lisp
;; (org-fold-catch-invisible-edits 'smart)
(org-fold-catch-invisible-edits 'show-and-error)
#+end_src

Turn on ~org-indent-mode~ on startup, which softly indent text according to
outline structure.
#+begin_src emacs-lisp
(org-startup-indented t)
#+end_src

Cycle globally if cursor is at beginning of buffer and not at a headline.
#+begin_src emacs-lisp
(org-cycle-global-at-bob t)
#+end_src

Make ~org-beginning-of-line~ and ~org-end-of-line~ ignore leading stars or tags on
headings. Repeat to toggle. ~evil-org-insert-line~ and ~evil-org-append-line~ also
respect this setting.
#+begin_src emacs-lisp
(org-special-ctrl-a/e t)
#+end_src

Прижимать тэги к 80 колонке справа.
#+begin_src emacs-lisp
(org-tags-column -80)
#+end_src

The maximum level for Imenu access to Org headlines.
#+begin_src emacs-lisp
(org-imenu-depth 8)
#+end_src

Show inline images by default in org-mode.
#+begin_src emacs-lisp
(org-startup-with-inline-images t)
#+end_src

#+begin_src emacs-lisp
(org-image-actual-width '(400))
#+end_src

Open src block buffer to the right of the current window keeping all other
windows.
#+begin_src emacs-lisp
;; (org-src-window-setup 'split-window-right)
(org-src-window-setup 'current-window) ; edit in current window
#+end_src

Indentation for the content of a source code block.
#+begin_src emacs-lisp
(org-edit-src-content-indentation 0)
(org-src-preserve-indentation nil)
#+end_src

If non-nil, the effect of =TAB= in a code block is as if it were issued in the
language major mode buffer.
#+begin_src emacs-lisp
(org-src-tab-acts-natively nil)
#+end_src

Follow org links by press Enter with point on it.
#+begin_src emacs-lisp
;; (org-return-follows-link t)
#+end_src

Follow org links by press Tab with point on it.
#+begin_src emacs-lisp
;; (org-tab-follows-link t)
#+end_src

#+begin_src emacs-lisp
(org-use-speed-commands nil)
#+end_src

Changes to task states might get logged, especially for recurring
routines. If so, log them in a drawer, not the content of the note.
#+begin_src emacs-lisp
;; (org-log-state-notes-into-drawer t)
#+end_src

Show only description of the link.
#+begin_src emacs-lisp
(org-link-descriptive t)
#+end_src

#+begin_src emacs-lisp
(org-ctrl-k-protect-subtree t)
(org-id-locations-file-relative t)
;; (org-indirect-buffer-display 'current-window)
(org-list-allow-alphabetical t)
(org-log-into-drawer t)
#+end_src

Initial visibility.
#+begin_src emacs-lisp
;; (org-startup-folded 'content)
(org-startup-folded 'show2levels)
#+end_src

Properties apply also for sublevels.
#+begin_src emacs-lisp
(org-use-property-inheritance t)
#+end_src

#+begin_src emacs-lisp
(org-src-fontify-natively t)
(org-fontify-whole-heading-line t)
(org-fontify-done-headline t)
(org-fontify-quote-and-verse-blocks t)
#+end_src

#+begin_src emacs-lisp
(org-log-done 'time) ; Track time when tasks were finished.
(org-deadline-warning-days 14)
(org-log-redeadline 'note)
(org-log-reschedule nil)
#+end_src

#+begin_src emacs-lisp
(org-pretty-entities t)
#+end_src

***** lists settings
#+begin_src emacs-lisp
;; (org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+")))
#+end_src

Additional indentation for sub-items in a list.
#+begin_src emacs-lisp
;; (org-list-indent-offset 1)
#+end_src

Consider plain lists items as a lower level subheadings, during cycling
with =Tab= key.
#+begin_src emacs-lisp
;; (org-cycle-include-plain-lists 'integrate)
#+end_src

***** [[*Applications used to open external files][org-file-apps]]
***** attachments
#+begin_src emacs-lisp
(org-attach-store-link-p t)
(org-attach-dir-relative t)
(org-attach-id-dir "data/")
;; (org-attach-use-inheritance nil)
(org-attach-auto-tag "ATTACH")
#+end_src

***** "TODO" keywords and Priorities
#+begin_src emacs-lisp
(org-todo-keywords
 '((sequence ;; "󰔌"  ; SOMEDAY
             "󰒅"  ; SOMEDAY
             "󰄱"  ; TODO
             "󰡖"  ; NEXT
             ;; "󰤌"  ; IN PROCESS
             "󱅊"  ; IN PROGRESS
             "󱗝"  ; IN PROGRESS
             "󰔟"  ; WAITING
             "|"
             "󰄵"  ; DONE
             "󱈎"  ; ARCHIVED
             "󰅘") ; CANCELLED
   (sequence "SOMEDAY" "TODO" "NEXT" "IN-PROGRESS" "WAITING" "|"
             "DONE" "ARCHIVED" "CANCELLED")))
#+end_src

Make priority signs be integers from 1 to 5, with 3 as default.
Default priorities are: =#A=, =#B=, =#C=, with =#B= as default.
#+begin_src emacs-lisp
(org-priority-highest ?A)
(org-priority-lowest  ?D)
(org-priority-default ?C)
#+end_src

Consider all nested entries in the subtree for cookies. ([[info:org#Breaking Down Tasks][Manual]])
#+begin_src emacs-lisp
(org-hierarchical-todo-statistics nil)
#+end_src

***** tags
#+begin_src emacs-lisp
;; (org-use-tag-inheritance nil)
(org-tags-exclude-from-inheritance '("project" "main" "index"))
(org-tags-match-list-sublevels nil)
#+end_src

***** footnotes
#+begin_src emacs-lisp
(org-footnote-define-inline nil)
(org-footnote-auto-adjust t)
#+end_src

***** babel
Allow babel code execution without confirming it every time.
#+begin_src emacs-lisp
(org-confirm-babel-evaluate nil)
#+end_src

Available embedded languages for babel.
#+begin_src emacs-lisp
(org-babel-load-languages '((sql . t)
                            (shell . t)
                            (emacs-lisp . t)
                            (python . t)
                            (plantuml . t)))
#+end_src

Use PlantUML executable instead of =.jar= file together with Java.
#+begin_src emacs-lisp
(org-plantuml-exec-mode 'plantuml)
(org-plantuml-jar-path (expand-file-name "~/.nix-profile/lib/plantuml.jar"))
#+end_src

**** config
:PROPERTIES:
:header-args: :noweb-ref org-config
:END:
***** Applications used to open external files
I set up it here, but not in custom section, because of bug: the
options just don't set if I set it in use-package =:custom= section.

#+begin_src emacs-lisp
(setq org-file-apps '(("\\.pdf\\'" . "xdg-open %s")
                      ;; ("\\.pdf\\'" . "evince %s")
                      ("\\.djvu\\'" . "xdg-open %s")
                      ("\\.\\(?:jpe?g\\|png\\)\\'" . "xdg-open %s")
                      (auto-mode . emacs)
                      (directory . emacs)
                      ("\\.mm\\'" . default)
                      ("\\.x?html?\\'" . default)))
#+end_src

***** icon that denotes folded node

↴ ⤵ 󱞣   󱞤
󰌑  󰃺 󰑎 󰕌 󱞥 󱞩 󰘌
▼ ▶  
󰤻 󰝡 󰕏 󰕎  󱦷
…   󰩮 󰇘  󰇜
󰮵 󰮶 󰮺 󰮸
󰷻 󰜥   󱒒 󰓡
  󰌒     󰞔 󰞘 
󰑀 󰑂 󰑅  󰑃 󰑄
󰶻 󰔰 󰔴
#+begin_src emacs-lisp
(set-fontset-font t ?⤵ "DejaVu Serif" nil 'prepend)
;; (org-ellipsis " ⤵")
(setopt org-ellipsis " ")
;; (org-ellipsis " 󰇜")
;; (org-ellipsis " ")
#+end_src

***** Babel
Redisplay images produced by babel after evaluating the block source.
#+begin_src emacs-lisp
(add-hook 'org-babel-after-execute-hook
          (lambda ()
            (when org-inline-image-overlays
              (org-redisplay-inline-images))))
#+end_src

***** Returning convenient paragrapsh behavior in evil
- [[https://emacs.stackexchange.com/a/38605][Source]]

Переоределяем понятие =paragraph= в =org-mode= для ряда функций на стандартное:
параграф — это любой сплошной текст разделённый пустыми линиями.

#+begin_src emacs-lisp
(with-eval-after-load 'evil
  (define-advice forward-evil-paragraph
      (:around (orig-fun &rest args) use-default-paragraph-definiton-in-org)
    (if (derived-mode-p 'org-mode)
        (let ((paragraph-start    (default-value 'paragraph-start))
              (paragraph-separate (default-value 'paragraph-separate)))
          (apply orig-fun args))
      (apply orig-fun args))))
#+end_src

***** Fonts and icons
****** COMMENT Font in agenda buffer
#+begin_src emacs-lisp
(defun my/org-setup-agenda-buffer-face ()
  (setq buffer-face-mode-face '(:family "iA Writer Mono S"))
  (buffer-face-mode))

(add-hook 'org-agenda-mode-hook 'my/org-setup-agenda-buffer-face)
#+end_src

****** Prettify symbols mode
#+begin_src emacs-lisp
;; ("TODO" . "")
;; ("WAIT" . "")
;; ("NOPE" . "")
;; ("DONE" . "")
;; ("[#A]" . "")
;; ("[#B]" . "")
;; ("[#C]" . "")
;; ("[ ]" . "")
;; ("[X]" . "")
;; ("[-]" . "")
;; (":PROPERTIES:" . "")
;; (":END:" . "―")
;; ("#+STARTUP:" . "")
;; ("#+TITLE: " . "")
;; ("#+RESULTS:" . "")
;; ("#+NAME:" . "")
;; ("#+ROAM_TAGS:" . "")
;; ("#+FILETAGS:" . "")
;; ("#+HTML_HEAD:" . "")
;; ("#+SUBTITLE:" . "")
;; ("#+AUTHOR:" . "")
;; (":Effort:" . "")
;; ("SCHEDULED:" . "")
;; ("DEADLINE:" . "")

(defun my/org-icons ()
  "Beautify org mode keywords."
  (setq prettify-symbols-alist
        (mapcan (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
                '(("#+begin_src" . "")
                  ("#+end_src" . "―")
                  ("#+begin_example" . "")
                  ("#+end_example" . "")
                  ("#+begin_quote" . "")
                  ("#+end_quote" . "")
                  ;; ("#+begin_quote" . "")
                  ;; ("#+end_quote" . "")
                  ;; ("#+header:" . ?)
                  ;; ("#+name:" . ?﮸)
                  ;; ("#+results:" . ?)
                  ;; ("#+call:" . ?)
                  ;; (":properties:" . ?)
                  ;; (":logbook:" . ?)
                  )))
  (prettify-symbols-mode))
#+end_src

*** org files appearence
**** org-superstar

• ◦ ‣ ￭ ■ ⋄ ○ □ ▬ ▶ ▸ ◂ ◆

#+begin_src emacs-lisp
(use-package org-superstar
  :ensure t
  :after org
  :custom
  (org-superstar-remove-leading-stars nil)
  (org-superstar-headline-bullets-list '("●"))
  ;; (org-superstar-leading-bullet)
  (org-superstar-item-bullet-alist '((?+ . ?▸)
                                     (?- . ?•)
                                     (?* . ?◆)
                                     ))
  :hook (org-mode . org-superstar-mode))
#+end_src

**** org-pretty-tags
#+begin_src emacs-lisp
(use-package org-pretty-tags
  :ensure t
  :after org
  :hook org-mode
  :custom
  (org-pretty-tags-surrogate-strings '(("ATTACH" . "󰁦"))))
#+end_src

**** COMMENT org-fancy-priorities
   █
⬢ ⬣ ⯀ ⯁
#+begin_src emacs-lisp
(use-package org-fancy-priorities
  :ensure t
  :hook org-mode
  :custom
  ;; (org-fancy-priorities-list '("🟥" "🟧" "🟨" "🟩" "🟦" "🟪"))
  ;; (org-fancy-priorities-list '("" "" ""))
  ;; (org-fancy-priorities-list '("" "" ""))
  ;; (org-fancy-priorities-list '("█" "█" "█"))
  ;; (org-fancy-priorities-list '("⯀" "⯀" "⯀"))
  ;; (org-fancy-priorities-list '("⬢" "⬢" "⬢"))
  ;; (org-fancy-priorities-list '("⬣" "⬣" "⬣"))
  (org-priority-faces
   '((?A :foreground "red" :weight bold)
     ;; (?B :foreground "orange" :weight bold)
     (?B :foreground "#FFCC32" :weight bold)
     (?C :foreground "#7CB342" :weight bold)))
  )
#+end_src

**** COMMENT org-modern
#+begin_src emacs-lisp
(use-package org-modern
  :ensure t
  :after org
  :hook ((org-mode . org-modern-mode)
         (org-agenda-finalize . org-modern-agenda)))
#+end_src

**** COMMENT svg-tag-mode
#+begin_src emacs-lisp
(use-package svg-tag-mode
  :ensure t
  :config
  (setq svg-tag-tags
        '(
          ;; ("\\(:[A-Za-z0-9_]+\\)" . ((lambda (tag)
          ;;                          (svg-tag-make tag :beg 1))))
          ;; ("\\(:[A-Za-z0-9_]+:\\)$" . ((lambda (tag)
          ;;                            (svg-tag-make tag :beg 1 :end -1))))))

          ;; Progress
          ;; ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
          ;;                             (svg-progress-percent (substring tag 1 -2)))))
          ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
                                      (svg-progress-count (substring tag 1 -1)))))

          ;; ;; Citation of the form [cite:@Knuth:1984]
          ;; ("\\(\\[cite:@[A-Za-z]+:\\)" . ((lambda (tag)
          ;;                              (svg-tag-make tag
          ;;                                            :inverse t
          ;;                                            :beg 7 :end -1
          ;;                                            :crop-right t))))
          ;; ("\\[cite:@[A-Za-z]+:\\([0-9]+\\]\\)" . ((lambda (tag)
          ;;                                      (svg-tag-make tag
          ;;                                                    :end -1
          ;;                                                    :crop-left t))))

          ;; ;; Active date (with or without day name, with or without time)
          ;; (,(format "\\(<%s>\\)" date-re) .
          ;;  ((lambda (tag)
          ;;     (svg-tag-make tag :beg 1 :end -1 :margin 0))))
          ;; (,(format "\\(<%s \\)%s>" date-re day-time-re) .
          ;;  ((lambda (tag)
          ;;     (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0))))
          ;; (,(format "<%s \\(%s>\\)" date-re day-time-re) .
          ;;  ((lambda (tag)
          ;;     (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0))))
          ;;
          ;; ;; Inactive date  (with or without day name, with or without time)
          ;; (,(format "\\(\\[%s\\]\\)" date-re) .
          ;;  ((lambda (tag)
          ;;     (svg-tag-make tag :beg 1 :end -1 :margin 0 :face 'org-date))))
          ;; (,(format "\\(\\[%s \\)%s\\]" date-re day-time-re) .
          ;;  ((lambda (tag)
          ;;     (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0 :face 'org-date))))
          ;; (,(format "\\[%s \\(%s\\]\\)" date-re day-time-re) .
          ;;  ((lambda (tag)
          ;;     (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0 :face 'org-date)))))
        )))
#+end_src

**** COMMENT org-link-beautify
#+begin_src emacs-lisp
(use-package org-link-beautify
  :ensure t
  :config
  (org-link-beautify-mode))
#+end_src

**** COMMENT org-tag-beautify
#+begin_src emacs-lisp
(use-package org-tag-beautify
  :ensure t
  :custom (org-tag-beautify-data-dir "~/Code/Emacs/org-tag-beautify/data/")
  :config
  (org-tag-beautify-add-tags-to-list)
  (org-tag-beautify-mode))
#+end_src

*** org-roam
**** org-roam
#+begin_src emacs-lisp :noweb yes
(use-package org-roam
  :ensure t
  :after org
  :custom
  <<org-roam-custom>>
  :config
  <<org-roam-config>>
  )
#+end_src
***** custom
:PROPERTIES:
:header-args: :noweb-ref org-roam-custom
:END:
#+begin_src emacs-lisp
(org-roam-directory (file-truename "~/notes"))
#+end_src

Provide link completion matching outside of Org links.
#+begin_src emacs-lisp
;; (org-roam-completion-everywhere t)
#+end_src

How to store link on org-mode outline node:
- t            :: Create an ID if needed to make a link to the current entry.
- use-exixting :: Use existing ID, do not create one.
#+begin_src emacs-lisp
;; (org-id-link-to-org-use-id 'create-if-interactive)
(org-id-link-to-org-use-id 'use-existing)
#+end_src

Make =org-roam= snappier during sqlite database synchronization.
#+begin_src emacs-lisp
(org-roam-db-gc-threshold most-positive-fixnum)
#+end_src

Set a more informative completion interface, for vertico.
#+begin_src emacs-lisp
(org-roam-node-display-template (concat "${title:*} "
                                        (propertize "${tags:17}" 'face 'org-tag)))
#+end_src

https://github.com/org-roam/org-roam/issues/576
#+begin_src emacs-lisp
(org-roam-graph-executable "dot")
#+end_src

***** config
:PROPERTIES:
:header-args: :noweb-ref org-roam-config
:END:

#+begin_src emacs-lisp
(org-roam-db-autosync-mode)
#+end_src

#+begin_src emacs-lisp
(add-to-list 'org-default-properties "ROAM_EXCLUDE")
#+end_src

#+begin_src emacs-lisp
;; (add-to-list 'display-buffer-alist
;;              '("\\*org-roam\\*"
;;                (display-buffer-in-direction)
;;                (direction . right)
;;                (window-width . 0.33)
;;                (window-height . fit-window-to-buffer)))
#+end_src

***** Additional functions
:PROPERTIES:
:header-args: :noweb-ref org-roam-config
:END:
****** Insert node immediate
#+begin_src emacs-lisp
(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))
#+end_src

****** Create untracked node
#+begin_src emacs-lisp
(defun my/org-roam-create-untracked-node ()
  "Create Org-Roam node with `ROAM_EXCLUDE' property."
  (interactive)
  (org-id-get-create)
  (org-set-property "ROAM_EXCLUDE" "t"))
#+end_src

**** org-roam-dailies
#+begin_src emacs-lisp
(use-package org-roam-dailies
  :after org-roam
  :custom
  (org-roam-dailies-directory "journal/")
  ;; (org-roam-dailies-capture-templates
  ;;  '(("d" "default" entry "* %<%I:%M %p>: %?"
  ;;     :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
  )
#+end_src

**** consult-org-roam
#+begin_src emacs-lisp :noweb yes
(use-package consult-org-roam
  :ensure t
  :after org-roam
  :custom
  <<consult-org-roam-custom>>
  :config
  (consult-org-roam-mode))
#+end_src
***** custom
:PROPERTIES:
:header-args: :noweb-ref consult-org-roam-custom
:END:

Use =ripgrep= for searching with ~consult-org-roam-search~.
#+begin_src emacs-lisp
(consult-org-roam-grep-func #'consult-ripgrep)
#+end_src

Configure a custom narrow key for ~consult-buffer~.
#+begin_src emacs-lisp
(consult-org-roam-buffer-narrow-key ?r)
#+end_src

Display org-roam buffers right after non-org-roam buffers in ~consult-buffer~
(and not down at the bottom).
#+begin_src emacs-lisp
;; (consult-org-roam-buffer-after-buffers t)
#+end_src

**** org-roam-ui
#+begin_src emacs-lisp
(use-package org-roam-ui
  :ensure t
  :after org-roam
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-follow-mode t)
  (org-roam-ui-open-on-start nil))
#+end_src

*** COMMENT consult-notes
#+begin_src emacs-lisp
(use-package consult-notes
  :ensure t
  :custom
  (consult-notes-org-roam-show-file-size nil)
  ;; :commands (consult-notes
  ;;            consult-notes-search-in-all-notes
  ;;            ;; if using org-roam
  ;;            consult-notes-org-roam-find-node
  ;;            consult-notes-org-roam-find-node-relation)
  :config
  ;; (setq consult-notes-file-dir-sources '(("Name" ?k ey "path/to/dir"))) ;; Set notes dir(s), see below
  ;; ;; Set org-roam integration, denote integration, or org-heading integration e.g.:
  ;; (setq consult-notes-org-headings-files '("~/path/to/file1.org"
  ;;                                          "~/path/to/file2.org"))
  ;; (consult-notes-org-headings-mode)
  (consult-notes-org-roam-mode))
#+end_src

*** org-contrib
#+begin_src emacs-lisp
(use-package org-contrib
  :ensure t
  :config
  (use-package org-eldoc
    ;; :config (org-eldoc-load)
    ))
#+end_src

*** org-agenda
**** Custom variables
#+begin_src emacs-lisp
(setopt
 ;; org-agenda-window-setup 'reorganize-frame
 org-agenda-window-setup 'other-tab
 org-agenda-restore-windows-after-quit t)
#+end_src

#+begin_src emacs-lisp
(setopt org-agenda-skip-timestamp-if-done t
        org-agenda-skip-scheduled-if-done nil
        org-agenda-skip-deadline-if-done nil
        org-agenda-include-deadlines t
        org-agenda-include-diary nil
        org-agenda-block-separator 61
        org-agenda-compact-blocks nil
        org-agenda-start-with-log-mode nil)
#+end_src

#+begin_src emacs-lisp
(setopt org-agenda-prefix-format '((agenda . " %i %-14:c%?-12t% s")
                                   (todo   . " %i %-14:c")
                                   (tags   . " %i %-14:c")
                                   (search . " %i %-14:c")))
#+end_src

**** org-super-agenda
#+begin_src emacs-lisp
(use-package org-super-agenda
  :ensure t
  :after org-agenda
  :defer 2
  :config
  (let ((inhibit-message t))
    (org-super-agenda-mode))
  ;; Fix problem with evil keybindings in org-super-agenda-mode.
  ;; https://github.com/alphapapa/org-super-agenda/issues/50#issuecomment-817432643
  (setopt org-super-agenda-header-map nil))
#+end_src

**** Custom org-agenda commmands
#+begin_src emacs-lisp :noweb yes
(setq my/org-super-agenda-groups
      '((:name "Important"
               :priority "A"
               :tag ("money" "bills")
               :property "urgent")
        (:name "Overdue"
               :deadline past
               :order 2)
        (:name "Due Today"
               :deadline today
               :order 3)
        (:name "Current Taks"
               :todo "NEXT"
               :order 4)
        (:name "Work"
               :category "work"
               :order 5)
        (:name "Projects"
               :tag "project"
               :order 6)
        (:name "House"
               :category "house"
               :tag "house"
               :order 6)
        (:name "Subaru"
               :category "car"
               :tag ("car" "subaru")
               :order 6)
        (:name "Personal"
               :habit t
               :tag "personal"
               :order 6)
        ;; (:name "Github"
        ;;        :category "issue"
        ;;        :tag "issue"
        ;;        :order 12)
        ))

(setq org-agenda-custom-commands
      '(("n" "Agenda and all TODOs"
         (;; (agenda "" ((org-agenda-span 7)
          ;;             (org-super-agenda-groups
          ;;              '((:name "Today"
          ;;                       :time-grid t
          ;;                       :date today
          ;;                       :todo "TODAY"
          ;;                       :scheduled today
          ;;                       :order 1)
          ;;                (:discard (:anything t))))))
          (agenda "" ((org-super-agenda-groups nil)))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups my/org-super-agenda-groups)))))
        ("g" "Custom list of all TODO entries"
         ((alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups my/org-super-agenda-groups)))))))
#+end_src

*** org-tempo
Org 9.2 introduced a new template expansion mechanism, combining
~org-insert-structure-template~ bound to =z,= (default binding =C-c C-,=).
The previous ~easy-templates~ mechanism (=<s Tab=) should be enabled manualy.
For more information, refer to the commentary section in =org-tempo.el=.

Type =<se Tab= to insert emacs-lisp source code block,
type =<sh Tab= to insert bash source block and so on.

#+begin_src emacs-lisp
(use-package org-tempo
  :after org
  :config
  (my/add-to-list 'org-structure-template-alist
                  '(("se" . "src emacs-lisp")
                    ("sh" . "src sh")
                    ("sc" . "src cpp")
                    ("sC" . "src common lisp")
                    ("sp" . "src python")
                    ("sl" . "src lua")
                    ("sf" . "src fennel")
                    ;; ("sr" . "src rust")
                    ("sm" . "src markdown"))))
#+end_src

*** org-inlinetask
#+begin_src emacs-lisp
(use-package org-inlinetask
  :after org
  :custom
  (org-cycle-max-level 14)
  (org-inlinetask-min-level 15))
#+end_src

*** org-ql
#+begin_src emacs-lisp
(use-package org-ql
  :ensure t)
#+end_src

*** org-appear
#+begin_src emacs-lisp
(use-package org-appear
  :ensure t
  :after org
  :custom (org-hide-emphasis-markers t)
  :hook org-mode)
#+end_src

*** org-cliplink
#+begin_src emacs-lisp
(use-package org-cliplink
  :ensure t)
#+end_src

*** org-transclusion
#+begin_src emacs-lisp
(use-package org-transclusion
  :ensure t
  :after org
  :config
  (set-face-attribute 'org-transclusion-fringe nil :foreground "green" :background "green")
  ;; (set-face-attribute 'org-transclusion-source-fringe nil :foreground "green" :background "green")
  )
#+end_src

*** org-auto-tangle
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :ensure t
  :hook org-mode
  ;; :custom (org-auto-tangle-babel-safelist '("~/.config/emacs/README.org"))
  )
#+end_src

*** export
**** pandoc
#+begin_src emacs-lisp
(use-package ox-pandoc :ensure t)
#+end_src

** Obsidian
*** obsidian.el
#+begin_src emacs-lisp
(use-package obsidian
  :ensure t
  :demand t
  :custom
  ;; Create missing files in inbox, when clicking on a wiki link?
  ;; t: in inbox, nil: next to the file with the link
  (obsidian-wiki-link-create-file-in-inbox nil)
  ;; The directory for daily notes (file name is YYYY-MM-DD.md)
  (obsidian-daily-notes-directory "Daily Notes")
  ;; Directory of note templates, unset (nil) by default
  ;(obsidian-templates-directory "Templates")
  ;; Daily Note template name - requires a template directory.
  ;; Default: Daily Note Template.md
  ;(obsidian-daily-note-template "Daily Note Template.md")
  :config
  (obsidian-specify-path "~/obsidian")
  (global-obsidian-mode t))
#+end_src
*** [[Markdown-mode]]
*** edit-indirect
Provide [[elisp:(helpful-function 'edit-indirect-region)][edit-indirect-region]] function which allows to edit region in separate
buffer with native major-mode like ~org-edit-special~ function.

#+begin_src emacs-lisp
(use-package edit-indirect :ensure t)
#+end_src

** Extra facitilies
*** Dired
**** COMMENT Dirvish
#+begin_src emacs-lisp :noweb yes
(use-package dirvish
  :ensure t
  ;; :hook
  ;; (dired-mode . dired-omit-mode)
  :custom
  <<dirvish-custom>>
  :config
  (dirvish-override-dired-mode)
  (dirvish-peek-mode)
  ;; (dirvish-side-follow-mode)
  (setq dirvish-preview-dispatchers
        (cl-substitute 'pdf-preface 'pdf dirvish-preview-dispatchers))
  )
#+end_src
***** custom
:PROPERTIES:
:header-args: :noweb-ref dirvish-custom
:END:

| *-l*               | use a long listing format                     |
| *-a*, *--all*        | do not ignore entries starting with =.=         |
| *-A*, *--almost-all* | do not list implied =.= and =..=                  |
| *-F*, *--classify*   | append indicator (one of =*/=>@¦=) to entries   |
| *-v*               | natural sort of (version) numbers within text |
#+begin_src emacs-lisp
(dired-listing-switches "-lAh -v --group-directories-first")
;; (dired-listing-switches "-lAhF -v --group-directories-first")
;; (dired-listing-switches "-l --human-readable --group-directories-first")
#+end_src

#+begin_src emacs-lisp
;; (dired-kill-when-opening-new-dired-buffer t) ;; Dirvish ignore this option.
(delete-by-moving-to-trash t)
(dired-recursive-deletes 'always)
(dired-recursive-copies 'always)
(dired-no-confirm t)
(dired-dwim-target t)
(dired-omit-files "\\`[.]?#\\|\\`[.][.]?\\'\\|\\`[.].+")
#+end_src

#+begin_src emacs-lisp
(dirvish-default-layout '(0 0.4 0.6))
(dirvish-layout-recipes '((0 1 0)
                          (0 0.4 0.6)))
(dirvish-side-width 38)
(dirvish-mode-line-format '(:left (sort symlink) :right (vc-info yank index)))
(dirvish-header-line-format '(:left (path) :right (free-space)))
#+end_src

#+begin_src emacs-lisp
(dirvish-hide-details t)
#+end_src

#+begin_src emacs-lisp
;; (dirvish-attributes '(vc-state file-size subtree-state collapse all-the-icons))
(dirvish-attributes '(all-the-icons file-time file-size collapse subtree-state vc-state git-msg))
#+end_src

#+begin_src emacs-lisp
(dirvish-open-with-programs `((,dirvish-image-exts ,(executable-find "qimgv") "%f")
                              (,dirvish-video-exts ,(executable-find "vlc")   "%f")))
#+end_src

#+begin_src emacs-lisp
(dirvish-quick-access-entries
 `(("h" "~/"                          "Home")
   ("d" "~/Downloads/"                "Downloads")
   ("m" "/run/media/"                 "Drives")
   ("t" "~/.local/share/Trash/files/" "TrashCan")
   ("e" ,user-emacs-directory         "Emacs")))
#+end_src

**** Dired
***** dired
#+begin_src emacs-lisp :noweb yes
(use-package dired
  :custom
  <<dired-custom>>
  :hook
  (dired-mode . dired-omit-mode)
  (dired-mode . dired-hide-details-mode)
  (dired-mode . hl-line-mode))
#+end_src
****** custom
:PROPERTIES:
:header-args: :noweb-ref dired-custom
:END:

| *-l*               | use a long listing format                     |
| *-a*, *--all*        | do not ignore entries starting with =.=         |
| *-A*, *--almost-all* | do not list implied =.= and =..=                  |
| *-F*, *--classify*   | append indicator (one of =*/=>@¦=) to entries   |
| *-v*               | natural sort of (version) numbers within text |
#+begin_src emacs-lisp
(dired-listing-switches "-lAhF -v --group-directories-first")
;; (dired-listing-switches "-l --human-readable --group-directories-first")
#+end_src

#+begin_src emacs-lisp
(dired-kill-when-opening-new-dired-buffer t)
(delete-by-moving-to-trash t)
(dired-recursive-deletes 'always)
(dired-recursive-copies 'always)
(dired-no-confirm t)
(dired-dwim-target t)
(dired-omit-files "\\`[.]?#\\|\\`[.][.]?\\'\\|\\`[.].+")
#+end_src

***** dired-hacks
- [[https://github.com/Fuco1/dired-hacks][GitHub - Fuco1/dired-hacks: Collection of useful dired additions]]

#+begin_src emacs-lisp
(use-package dired-ranger  :ensure t)
(use-package dired-subtree :ensure t)
(use-package dired-narrow  :ensure t)
(use-package dired-open    :ensure t)
(use-package dired-toggle-sudo :ensure t)
#+end_src

***** COMMENT wdired
#+begin_src emacs-lisp
(setopt wdired-allow-to-change-permissions t)
#+end_src

***** dired-collapse
Toggle collapsing of unique nested paths in Dired.

#+begin_src emacs-lisp
(use-package dired-collapse
  :ensure t
  ;; :hook (dired-mode . dired-collapse-mode)
  )
#+end_src

***** dired-rainbow
#+begin_src emacs-lisp :noweb yes
(use-package dired-rainbow
  :ensure t
  :config
  (dired-rainbow-define html "#4e9a06" ("htm" "html" "xhtml"))

  ;; Video files:
  (defconst my/video-files-extensions
    '("mp3" "mp4" "MP3" "MP4" "avi" "mpg" "flv" "ogg" "mkv")
    "Media files.")
  (dired-rainbow-define media "#ce5c00" my/video-files-extensions)

  ;; Highlight executable files, but not directories:
  (dired-rainbow-define-chmod executable-unix "#4e9a06" "-.*x.*"))
#+end_src

***** diredfl
Addtional syntax highlighting for dired
#+begin_src emacs-lisp
(use-package diredfl
  :ensure t
  ;; :config
  ;; (set-face-attribute 'diredfl-dir-name nil :bold t)
  :hook dired-mode
  ;; :hook dirvish-directory-view-mode
  )
#+end_src

***** COMMENT dired-recent
I'm not sure that this package is needed, since I already use [[consult-dir][consult-dir]].
=C-x C-d= to open ~dired-recent-open~.

#+begin_src emacs-lisp
(use-package dired-recent
  :ensure t
  :config
  (dired-recent-mode)
  (keymap-unset dired-recent-mode-map "C-x C-d" :remove))
#+end_src

***** COMMENT dired-preview
#+begin_src emacs-lisp
(use-package dired-preview :ensure t)
#+end_src

*** Magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :custom
  ; hide ^M characters at the end of a line in diffs
  (magit-diff-hide-trailing-cr-characters t)
  :config
  (define-advice magit-display-buffer-traditional
      (:around (orig-fun buffer) open-status-buffer-in-current-window)
    "Show `magit-status' buffer in current window."
    (if (with-current-buffer buffer
          (equal major-mode 'magit-status-mode))
        (display-buffer buffer '(display-buffer-same-window))
      ;; else
      (funcall orig-fun buffer))))
#+end_src

#+begin_src emacs-lisp
(use-package git-modes :ensure t)
#+end_src

#+begin_src emacs-lisp
(use-package forge :ensure t :after magit)
#+end_src

**** difftastic
#+begin_src emacs-lisp
(use-package difftastic
  :ensure t
  ;; :after magit-diff
  :demand t
  :bind (:map magit-blame-read-only-mode-map
              ("D" . difftastic-magit-show)
              ("S" . difftastic-magit-show))
  :config
  (with-eval-after-load 'magit-diff
    (transient-append-suffix 'magit-diff '(-1 -1)
      [("D" "Difftastic diff (dwim)" difftastic-magit-diff)
       ("S" "Difftastic show" difftastic-magit-show)])))
#+end_src

*** Documents viewing
**** Info
Tell Emacs where to search Info files of the packages installed with Nix package
manager. (particular =mu4e=)
#+begin_src emacs-lisp
;; (add-to-list 'Info-directory-list (expand-file-name ".nix-profile/share/info"))

(-map (lambda (dir)
        (let ((dir (expand-file-name dir)))
          (when (f-directory? dir)
            (add-to-list 'Info-additional-directory-list dir))))
      '("~/.local/share/info"
        "~/.nix-profile/share/info"))
#+end_src

#+begin_src emacs-lisp
(use-package info-rename-buffer
  :ensure t
  :after info
  :config (info-rename-buffer-mode))
#+end_src

Provides links from elisp symbols in Gnu-Emacs Info viewer to their help
documentation.
#+begin_src emacs-lisp
(use-package inform
  :after info
  :ensure t)
#+end_src

Extra coloring in Info mode.
#+begin_src emacs-lisp
(use-package info-colors
  :ensure t
  :hook (Info-selection . info-colors-fontify-node))
#+end_src

**** pdf
***** pdf-tools
#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :config
  ;; Makes Emacs load and use PDF Tools as soon as a PDF file is opened, but not sooner.
  (pdf-loader-install))
#+end_src

***** org-pdftools
Add support for org links from pdftools buffer.

#+begin_src emacs-lisp
(use-package org-pdftools
  :ensure t
  :hook ((org-mode . org-pdftools-setup-link)
         (pdf-view-mode . org-pdftools-setup-link)))
#+end_src

**** epub (nov.el)
#+begin_src emacs-lisp
(use-package nov
  :ensure t
  :mode ("\\.epub\\'" . nov-mode)
  :custom (nov-text-width 80)
  :hook ((nov-mode . visual-line-mode)
         ;; (nov-mode . visual-fill-column-mode)
         ))
#+end_src

**** fb2-reader
#+begin_src emacs-lisp
(use-package fb2-reader
  :ensure t
  :mode ("\\.fb2\\(\\.zip\\)?\\'" . fb2-reader-mode)
  :commands fb2-reader-continue
  :custom
  ;; This mode renders book with fixed width, adjust to your preferences.
  (fb2-reader-page-width 80)
  (fb2-reader-image-max-width 400)
  (fb2-reader-image-max-height 400))
#+end_src

**** djvu
#+begin_src emacs-lisp
(use-package djvu :ensure t)
#+end_src

*** LaTeX
**** AUCTeX
#+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :init
  (setopt TeX-auto-save t
          TeX-parse-self t)
  (setq-default TeX-master nil))
#+end_src

**** xenops
- [[https://github.com/dandavison/xenops][Source]]
#+begin_src emacs-lisp
(use-package xenops
  :ensure t
  :after no-littering
  :init
  (setq xenops-cache-directory (expand-file-name "xenops" no-littering-var-directory))
  :config
  ;; (setq xenops-math-image-scale-factor 1.4)
  (setq xenops-math-image-current-scale-factor 0.6)
  :hook
  latex-mode
  LaTeX-mode
  ;; org-mode
  ;; (xenops-mode . (lambda ()
  ;;                  (advice-remove 'org-fill-paragraph
  ;;                                 #'xenops-math-fill-paragraph-after-advice)))
  )
#+end_src

*** Email
**** mu4e
#+begin_src emacs-lisp
(-setq (my/mu4e-path) (directory-files "~/.nix-profile/share/emacs/site-lisp/elpa"
                                       :full "mu4e-.*"))
#+end_src

Add mu4e manual into Info path.
#+begin_src emacs-lisp
(add-to-list 'Info-directory-list my/mu4e-path)
#+end_src

#+begin_src emacs-lisp :noweb yes
(use-package mu4e
  :load-path my/mu4e-path
  :commands (mu4e mu4e-search)
  :custom
  (mu4e-mu-binary (expand-file-name "~/.nix-profile/bin/mu"))
  <<mu4e-custom>>
  :config
  <<mu4e-config>>
  )
#+end_src

***** custom
:PROPERTIES:
:header-args: :noweb-ref mu4e-custom
:END:

Use mu4e for e-mail in emacs.
#+begin_src emacs-lisp
(mail-user-agent 'mu4e-user-agent)
#+end_src

The one with =:favorite t= will be used for the modeline.
#+begin_src emacs-lisp
(mu4e-bookmarks
 `((:name "Inbox"
          ;; :query ,(string-join '("maildir:\"/anuvyklack@gmail/[Gmail]/Вся почта\""
          ;;                        "AND NOT maildir:/anuvyklack@gmail/Архив") " ")
          :query ,(concat "maildir:\"/anuvyklack@gmail/[Gmail]/Вся почта\" "
                          "AND NOT maildir:/anuvyklack@gmail/Архив "
                          "AND NOT flag:list ")
          :key ?i
          :favorite t)
   (:name "Mail lists"
          :query ,(concat "flag:list "
                          "AND maildir:\"/anuvyklack@gmail/[Gmail]/Вся почта\" ")
          ;; :query ,(concat "flag:list "
          ;;                 "AND NOT maildir:/anuvyklack@gmail/[Gmail]/Корзина "
          ;;                 "AND NOT maildir:/anuvyklack@gmail/[Gmail]/Спам")
          :key ?l)
   ;; (:name "Unread messages" :query "flag:unread AND NOT flag:trashed" :key ?u)
   (:name "Today's messages"
          :query ,(concat "date:today..now "
                          "AND NOT maildir:/anuvyklack@gmail/[Gmail]/Корзина "
                          "AND NOT maildir:/anuvyklack@gmail/[Gmail]/Спам")
          :key ?t)
   (:name "Last 7 days"
          :query ,(concat "date:7d..now "
                          "AND NOT maildir:/anuvyklack@gmail/[Gmail]/Корзина "
                          "AND NOT maildir:/anuvyklack@gmail/[Gmail]/Спам ")
          :hide-unread t :key ?w)
   (:name "Archive" :query "maildir:/anuvyklack@gmail/Архив" :key ?a)
   ;; (:name "Messages with images"
   ;;        :query ,(concat "mime:image/*"
   ;;                        "AND NOT maildir:/anuvyklack@gmail/[Gmail]/Корзина "
   ;;                        "AND NOT maildir:/anuvyklack@gmail/[Gmail]/Спам ")
   ;;        :key ?p)
   ))
#+end_src

Note that these folders below must start with =/=.
#+begin_src emacs-lisp
(mu4e-refile-folder "/anuvyklack@gmail/Архив")
;; (mu4e-refile-folder "/anuvyklack@gmail/[Gmail]/Вся почта")
(mu4e-sent-folder   "/anuvyklack@gmail/[Gmail]/Отправленные")
(mu4e-drafts-folder "/anuvyklack@gmail/[Gmail]/Черновики")
(mu4e-trash-folder  "/anuvyklack@gmail/[Gmail]/Корзина")
#+end_src

Setup some handy shortcuts you can quickly switch to your Inbox -- press =ji=
then, when you want archive some messages, move them to the =Архив= folder by
pressing =ma=.
#+begin_src emacs-lisp
(mu4e-maildir-shortcuts
 '((:maildir "/anuvyklack@gmail/[Gmail]/Отправленные" :key ?s)
   (:maildir "/anuvyklack@gmail/Архив" :key ?a)
   ;; (:maildir "/anuvyklack@gmail/Inbox" :key ?i)
   (:maildir "/anuvyklack@gmail/[Gmail]/Вся почта" :key ?A)
   (:maildir "/anuvyklack@gmail/[Gmail]/Корзина"   :key ?t)))
#+end_src

#+begin_src emacs-lisp
(mu4e-headers-fields
 '((:human-date . 12)
   (:flags . 6)
   ;; (:mailing-list . 10)
   (:from . 25)
   (:subject)
   ;; (:thread-subject)
   ))
#+end_src

#+begin_src emacs-lisp
;; (mu4e-headers-date-format "%Y/%m/%d")
#+end_src

Don't save message to =Sent Messages=, Gmail/IMAP takes care of this.
#+begin_src emacs-lisp
(mu4e-sent-messages-behavior 'delete)
#+end_src

This is set to ~t~ to avoid mail syncing issues when using =mbsync=. If you use
=offlineimap= this should be set to ~nil~.
#+begin_src emacs-lisp
(mu4e-change-filenames-when-moving t)
#+end_src

Refresh mail using =mbsync= every 10 minutes.
#+begin_src emacs-lisp
(mu4e-update-interval (* 10 60))
#+end_src

Shell command to re-sync mails.
#+begin_src emacs-lisp
(mu4e-get-mail-command "mbsync -a")
#+end_src

Use [[*vertico][vertico]] for completing instead of ido.
#+begin_src emacs-lisp
(mu4e-completing-read-function 'completing-read)
#+end_src

Skip duplicate messages: do not includ more than one in search results.
#+begin_src emacs-lisp
(mu4e-search-skip-duplicates t)
#+end_src

Do not only show the messages that directly match a certain query, but also
include messages that are related to these messages. That is, messages that
belong to the same discussion threads are included in the results, just like
e.g. Gmail does it.
#+begin_src emacs-lisp
(mu4e-search-include-related t)
#+end_src

***** config
:PROPERTIES:
:header-args: :noweb-ref mu4e-config
:END:

#+begin_src emacs-lisp
;; (add-to-list 'mu4e-bookmarks
;;     ;; ':favorite t' i.e, use this one for the modeline
;;    '(:query "maildir:/anuvyklack@gmail/Inbox" :name "Inbox" :key ?i :favorite t))
#+end_src

Not set flag =T= on deletion. Just move to =Trash= folder. [[https://github.com/djcb/mu/issues/1136#issuecomment-1229005006][Source]]
#+begin_src emacs-lisp
(setf (plist-get (alist-get 'trash mu4e-marks) :action)
      (lambda (docid msg target)
        (mu4e--server-move docid (mu4e--mark-check-target target) "-N"))) ; Instead of "+T-N"
#+end_src

****** icons
#+begin_src emacs-lisp
(setq mu4e-use-fancy-chars nil)
#+end_src

Marks for headers. Each is a cons-cell: ~(basic . fancy)~.
#+begin_src emacs-lisp
(setq mu4e-headers-draft-mark     '("D" . "")
      mu4e-headers-flagged-mark   '("F" . "")
      mu4e-headers-new-mark       '("N" . "")
      mu4e-headers-passed-mark    '("P" . "")
      mu4e-headers-replied-mark   '("R" . "")
      mu4e-headers-seen-mark      '("S" . "")
      mu4e-headers-trashed-mark   '("T" . "")
      mu4e-headers-attach-mark    '("a" . "📎")
      mu4e-headers-encrypted-mark '("x" . "")
      mu4e-headers-signed-mark    '("s" . "")
      mu4e-headers-unread-mark    '("u" . "")
      mu4e-headers-list-mark      '("l" . "")
      mu4e-headers-personal-mark  '("p" . "")
      mu4e-headers-calendar-mark  '("c" . ""))
#+end_src

#+begin_src emacs-lisp
;; (setq mu4e-headers-thread-child-prefix           '("├>" . "├─➤ ")
;;       mu4e-headers-thread-last-child-prefix    '("└>" . "└─➤ ")
;;       mu4e-headers-thread-orphan-prefix        '("┬>" . "┬─➤ ")
;;       mu4e-headers-thread-single-orphan-prefix   '("─>" . "──➤ ")
;;       ;; The following two should have the same width.
;;       mu4e-headers-thread-connection-prefix    '("│" . "│ ")
;;       mu4e-headers-thread-blank-prefix           '(" " . " "))
#+end_src

#+begin_src emacs-lisp
(setq mu4e-headers-thread-orphan-prefix        '("◊ " . "◊ ")
      ;; mu4e-headers-thread-single-orphan-prefix '("◊ " . "◊ ")
      mu4e-headers-thread-single-orphan-prefix '("> " . "◊ ")
      mu4e-headers-thread-duplicate-prefix     '("≡ " . "≡ ")
      mu4e-headers-thread-root-prefix          '("□ " . "□ ")
      mu4e-headers-thread-first-child-prefix   '("○ " . "○ ")
      mu4e-headers-thread-child-prefix         '("├╴" . "├╴")
      mu4e-headers-thread-last-child-prefix    '("└╴" . "└╴")
      ;; mu4e-headers-thread-first-child-prefix   '("○ " . "○ ")
      ;; mu4e-headers-thread-child-prefix         '("├>" . "├>")
      ;; mu4e-headers-thread-last-child-prefix    '("└>" . "└>")
      ;; The following two should have the same width.
      mu4e-headers-thread-connection-prefix    '("│ " . "│ ")
      mu4e-headers-thread-blank-prefix         '("  " . "  "))
#+end_src

**** Send emails
#+begin_src emacs-lisp
(use-package smtpmail
  :custom
  (message-send-mail-function 'smtpmail-send-it)
  (starttls-use-gnutls t)
  (smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil)))
  (smtpmail-auth-credentials '(("smtp.gmail.com" 587 "anuvyklack@gmail.com" nil)))
  (smtpmail-default-smtp-server "smtp.gmail.com")
  (smtpmail-smtp-server "smtp.gmail.com")
  (smtpmail-smtp-service 587)

  ;; Don't keep message buffers around.
  (message-kill-buffer-on-exit t))
#+end_src

*** Man
#+begin_src emacs-lisp
(setenv "MANPATH" (shell-command-to-string "manpath"))
#+end_src

*** COMMENT telega
#+begin_src emacs-lisp :noweb yes
(use-package telega
  :ensure t
  :defer t
  :custom
  <<telega-custom>>)
#+end_src
**** custom
:PROPERTIES:
:header-args: :noweb-ref telega-custom
:END:

#+begin_src emacs-lisp
(telega-directory (file-truename "~/.local/share/telega"))
#+end_src

Telega uses Ido completing read function instead of the default one (that the
user prefers). [[https://github.com/zevlg/telega.el/issues/358#issuecomment-1126650770][Source]]
#+begin_src emacs-lisp
(telega-completing-read-function completing-read-function)
#+end_src

*** COMMENT pocket-reader
#+begin_src emacs-lisp
(use-package pocket-reader :ensure t)
#+end_src

** Major modes
*** Tree-sitter (treesit.el)

Manually build tree-sitter grammar: [[elisp:(helpful-function 'treesit-install-language-grammar)][treesit-install-language-grammar]]

Sources to install C and C++ grammar.
#+begin_src emacs-lisp
(setq treesit-language-source-alist
      '((cpp "https://github.com/anuvyklack/tree-sitter-cpp")
        ;; (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
        (c   "https://github.com/tree-sitter/tree-sitter-c")))

(-each treesit-language-source-alist
  (-lambda ((lang url))
    (unless (treesit-language-available-p lang)
      (treesit-install-language-grammar lang))))
#+end_src

#+begin_src emacs-lisp
(setopt treesit-font-lock-level 4)
;; (setopt treesit-extra-load-path )
#+end_src

**** Auto install tree-sitter grammars
#+begin_src emacs-lisp :noweb yes
(use-package treesit-auto
  :ensure t
  :custom
  (treesit-auto-install 'prompt)
  :config
  <<treesit-auto-extra-grammars>>
  ;; (setopt treesit-auto-langs
  ;;         (seq-map #'treesit-auto-recipe-lang treesit-auto-recipe-list))
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+end_src

***** treesit grammars
:PROPERTIES:
:header-args: :noweb-ref treesit-auto-extra-grammars
:END:
Additional grammars to what are packed with =treesit-auto= package.
****** nushell
#+begin_src emacs-lisp
(add-to-list 'treesit-auto-langs 'nu)
(add-to-list 'treesit-auto-recipe-list
             (make-treesit-auto-recipe
              :lang 'nu
              :ts-mode 'nushell-ts-mode
              :url "https://github.com/nushell/tree-sitter-nu"
              :revision "main"
              :source-dir "src"
              :ext "\\.nu\\'"))
#+end_src

****** nix
#+begin_src emacs-lisp
(add-to-list 'treesit-auto-langs 'nix)
(add-to-list 'treesit-auto-recipe-list
             (make-treesit-auto-recipe
              :lang 'nix
              :ts-mode 'nix-ts-mode
              :remap 'nix-mode
              :url "https://github.com/nix-community/tree-sitter-nix"
              :revision "master"
              :source-dir "src"
              :ext "\\.nix\\'"))
#+end_src

****** COMMENT fennel
#+begin_src emacs-lisp
(add-to-list 'treesit-auto-langs 'fennel)
(add-to-list 'treesit-auto-recipe-list
             (make-treesit-auto-recipe
              :lang 'fennel
              :ts-mode 'fennel-ts-mode
              :remap 'fennel-mode
              :url "https://github.com/travonted/tree-sitter-fennel"
              :revision "master"
              :source-dir "src"
              :ext "\\.fnl\\'"))
#+end_src

*** Prog mode
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook
          (lambda ()
            (setq-local show-trailing-whitespace t)))
#+end_src

*** Emacs lisp
#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (setq-local tab-width lisp-body-indent
                        evil-shift-width  lisp-body-indent)
            ;; (message "evil-shift-width: %s" evil-shift-width)
            (hs-minor-mode)
            (general-def :keymaps 'local :states 'normal
              "K" 'helpful-at-point ;; 'describe-symbol
              "p" 'my/paste-and-indent-after
              "P" 'my/paste-and-indent-before)))
#+end_src

#+begin_src emacs-lisp
(add-hook 'lisp-data-mode-hook
          (lambda ()
            (general-def :keymaps 'local :states 'normal
              "K" 'helpful-at-point)))
#+end_src

**** COMMENT Skip dash on word movements
#+begin_src emacs-lisp
(defun skip-dash-backward (n &rest foo)
  (if (eq (char-before (point)) ?-)
      (backward-char))
  (message "Skipped dash"))

(defun skip-dash-forward (n &rest foo)
  (if (eq (char-after (point)) ?-)
      (forward-char))
  (message "Skipped dash"))

(defun skip-dash-forward-end (n &rest foo)
  (if (eq (char-after (+ 1 (point))) ?-)
      (forward-char))
  (message "Skipped dash"))

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (advice-add 'evil-forward-word-begin  :after  #'skip-dash-forward)
            (advice-add 'evil-forward-word-end    :before #'skip-dash-forward-end)
            (advice-add 'evil-backward-word-begin :before #'skip-dash-backward)))
#+end_src

*** Shell mode
#+begin_src emacs-lisp
(setq sh-basic-offset 2
      sh-indentation 2)

;; (add-hook 'sh-mode-hook
;;           (lambda ()
;;             (setq sh-basic-offset 2
;;                   sh-indentation 2)))
#+end_src

*** Dired
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook
          (lambda ()
            (evil-matchit-mode -1)))
#+end_src

*** C/C++
#+begin_src emacs-lisp :noweb yes
(use-package c-ts-mode
  :custom
  (c-ts-mode-indent-offset 4)
  ;; (c-doc-comment-style '((c-mode . gtkdoc)
  ;;                        (c++-mode . doxygen)
  ;;                        (c++-ts-mode . doxygen)))
  :hook
  ((c-ts-mode c++-ts-mode) . (lambda ()
                               ;; (setq electric-indent-inhibit t)
                               (hs-minor-mode)))
  :config
  <<c-ts-mode-config>>
  (c-ts-mode-toggle-comment-style -1))
#+end_src

**** Indentation rules
:PROPERTIES:
:header-args: :noweb-ref c-ts-mode-config
:END:

- [[info:elisp#Parser-based Indentation][Treesitter-based indentation]] documentation to write custom indentation rules. ([[https://www.gnu.org/software/emacs/manual/html_node/elisp/Parser_002dbased-Indentation.html][online]])

- Use ~treesit-explore-mode~ to see where you're at in the treesitter tree.

- Set ~(setq treesit--indent-verbose t)~ to debug which rule is being applied at
  a given point.

#+begin_src emacs-lisp
(defun my/c-ts-indent-style()
  `(;; align function arguments to the start of the first one, offset if standalone
    ((match nil "argument_list" nil 1 1) parent-bol c-ts-mode-indent-offset)
    ((parent-is "argument_list") (nth-sibling 1) 0)
    ;; same for parameters
    ((match nil "parameter_list" nil 1 1) parent-bol c-ts-mode-indent-offset)
    ((parent-is "parameter_list") (nth-sibling 1) 0)
    ;; indent inside case blocks
    ((parent-is "case_statement") standalone-parent c-ts-mode-indent-offset)
    ;; do not indent preprocessor statements
    ((node-is "preproc") column-0 0)
    ;; do not add indentation level for namespace
    ((n-p-gp nil nil "namespace_definition") grand-parent 0)
    ;; append to bsd style
    ,@(alist-get 'bsd (c-ts-mode--indent-styles 'cpp))))

(setopt c-ts-mode-indent-style #'my/c-ts-indent-style)
#+end_src

*** CMake
- [[https://github.com/Kitware/CMake/blob/master/Auxiliary/cmake-mode.el][cmake-mode.el]]

#+begin_src emacs-lisp
(use-package cmake-mode :ensure t)
#+end_src

*** Org mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (setq fill-column 80) ;; set textwidth to 80
            ;; (display-line-numbers-mode -1)
            (auto-revert-mode) ;; обновлять буфер, если файл изменился
            (auto-fill-mode) ;; hard wrap long lines
            (my/org-icons)
            ;; (setq-local tab-width 2)
            (setq-local evil-shift-width 2)
            (general-def :keymaps 'local :states 'normal
              "SPC f i" 'consult-org-heading)))
#+end_src

*** Fennel
- [[https://git.sr.ht/~technomancy/fennel-mode][~technomancy/fennel-mode]]

#+begin_src emacs-lisp
(use-package fennel-mode
  :ensure t
  :mode "\\.fnl\\'")
#+end_src

*** Fish
#+begin_src emacs-lisp
(use-package fish-mode :ensure t)
#+end_src

*** Lemon (parser)
#+begin_src emacs-lisp
(use-package lemon-mode
  :ensure t
  :mode ("\\.y\\'" . lemon-c++-mode))
#+end_src

*** Lua
#+begin_src emacs-lisp
(use-package lua-mode
  :ensure t
  :config
  (add-hook 'lua-mode-hook
            (lambda ()
              (setq-local tab-width 3
                          evil-shift-width 3))))
#+end_src

*** Markdown-mode
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode) ;; Github Flavored Markdown
  :hook (gfm-mode . visual-line-mode)
        (markdown-mode . (lambda ()
                           ;; (markdown-toggle-url-hiding 1)
                           (auto-revert-mode) ;; обновлять буфер, если файл изменился
                           (setq-local tab-width 2
                                       evil-shift-width 2)))
  :custom
  ;; Command to convert plain text to HTML
  (markdown-command '("pandoc" "--from=markdown" "--to=html5"))
  ;; Command to call standalone Markdown previewer
  (markdown-open-command nil)
  ;; Command to open image link via `markdown-follow-*' commands
  (markdown-open-image-command nil)
  (markdown-asymmetric-header nil)
  (markdown-marginalize-headers t)
  (markdown-list-indent-width 2)
  (markdown-enable-wiki-links t)
  (markdown-wiki-link-alias-first nil)
  ;; (markdown-wiki-link-fontify-missing t)
  ;; (markdown-wiki-link-search-type 'project)
  (markdown-enable-math t)
  (markdown-link-space-sub-char " ")
  (markdown-reference-location 'subtree)
  ;; (markdown-hide-markup t)
  (markdown-hide-urls t)
  ;; (markdown-hr-display-char)
  (markdown-list-item-bullets)
  (markdown-fontify-code-blocks-natively t)
  ;; (markdown-code-lang-modes)
  (markdown-gfm-uppercase-checkbox t)
  (markdown-enable-highlighting-syntax t))
#+end_src

**** evil-markdown
#+begin_src emacs-lisp
(use-package evil-markdown
  :vc (:fetcher github :repo "Somelauw/evil-markdown")
  :after (evil markdown-mode))
#+end_src

*** Nix
**** COMMENT nix-mode
- [[https://github.com/NixOS/nix-mode][NixOS/nix-mode]]

#+begin_src emacs-lisp
(use-package nix-mode
  :ensure t
  :mode "\\.nix\\'")
#+end_src

**** nix-ts-mode
- [[https://github.com/remi-gelinas/nix-ts-mode][remi-gelinas/nix-ts-mode]]

#+begin_src emacs-lisp
(use-package nix-ts-mode
  :ensure t
  :mode "\\.nix\\'"
  :config
  (add-hook 'nix-ts-mode-hook
            (lambda()
              (setq-local evil-shift-width  nix-ts-mode-indent-offset))))
#+end_src

*** COMMENT Nushell
#+begin_src emacs-lisp
(use-package nushell-ts-mode
  :vc (:fetcher github :repo "herbertjones/nushell-ts-mode"))
#+end_src

*** PlantUML
#+begin_src emacs-lisp
(use-package plantuml-mode
  :ensure t
  :custom
  (plantuml-jar-path (expand-file-name "~/.nix-profile/lib/plantuml.jar"))
  (plantuml-default-exec-mode 'executable))
#+end_src

*** Python
#+begin_src emacs-lisp
(add-hook 'python-mode-hook
          (lambda ()
            ;; (setq-local evil-shift-width  python-indent-offset)
            ))
#+end_src

*** Yaml
#+begin_src emacs-lisp
(use-package yaml-ts-mode
  :mode
  ("\\.yml\\'" . yaml-ts-mode)
  ("\\.yaml\\'" . yaml-ts-mode)
  ("clang.format\\'" . yaml-ts-mode))
#+end_src

**** COMMENT yaml-pro
#+begin_src emacs-lisp
(use-package yaml-pro
  :ensure t
  :hook (yaml-ts-mode . yaml-pro-ts-mode))
#+end_src

*** xkb-mode
#+begin_src emacs-lisp
(use-package xkb-mode :ensure t)
#+end_src

*** COMMENT Options for =init.el= file
#+begin_src emacs-lisp
(add-hook 'find-file-hook
          (lambda ()
            (when (string-equal (buffer-file-name) user-init-file)
              ;; (outline-minor-mode 1)
              (general-def :keymaps 'global :states 'normal
                "zj" 'origami-forward-fold
                "zk" 'origami-previous-fold))))
#+end_src

** Custom commands
*** narrow-to-active-region
#+begin_src emacs-lisp
(defun my/narrow-to-active-region ()
  (interactive)
  (narrow-to-region (region-beginning)
                    (region-end))
  (evil-exit-visual-state))
#+end_src

*** dired-open-file
#+begin_src emacs-lisp
(defun my/dired-xdg-open ()
  "In a dired buffer, open file or folder on the current line with `xdg-open'
shell command."
  (interactive)
  (let ((file (dired-get-filename nil t)))
    (call-process "xdg-open" nil 0 nil file)))
#+end_src

*** COMMENT ansi-color
#+begin_src emacs-lisp
(require 'ansi-color)
(defun display-ansi-colors ()
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))
#+end_src

*** toggle line spacing
- [[http://xahlee.info/emacs/emacs/emacs_toggle_line_spacing.html][Source]]
#+begin_src emacs-lisp
(defun my/toggle-line-spacing ()
  "Toggle line spacing between no extra space to extra 0.2 line height."
  (interactive)
  (if line-spacing
      (setq line-spacing nil)
    (setq line-spacing (default-value 'line-spacing)))
  (redraw-frame (selected-frame)))
#+end_src

*** Copy current file path and line-position to clipboard
#+begin_src emacs-lisp
(defun my/copy-file-current-line-position-to-clipboard ()
  "Copy current line in file to clipboard as '</path/to/file>:<line-number>'"
  (interactive)
  (let* ((path (if (equal current-prefix-arg '(4))
                   (string-replace (getenv "HOME") "~" (buffer-file-name))
                 (buffer-file-name)))
         (path-with-line-number (concat path ":" (number-to-string (line-number-at-pos)))))
    (kill-new path-with-line-number)
    (message path-with-line-number)))
#+end_src

#+begin_src emacs-lisp
(defun my/copy-file-org-link-to-clipboard ()
  "Copy current line in file to clipboard as 'file:</path/to/file>::<line-number>'"
  (interactive)
  (let ((path-with-line-number
         (concat "file:" (buffer-file-name) "::" (number-to-string (line-number-at-pos)))))
    (kill-new path-with-line-number)
    (message (concat path-with-line-number " copied to clipboard"))))
#+end_src

** Keybindings
*** Keymaps
#+begin_src emacs-lisp
(define-prefix-command 'leader-map)
(define-prefix-command 'semicolon-leader-map)
(define-prefix-command 'my/bookmark-map)
(define-prefix-command 'my/orgmode-leader-map)
(define-prefix-command 'my/obsidian-map)
(define-prefix-command 'my/notes-map)
#+end_src

*** Which-key descriptions
ZZ 'evil-save-modified-and-close

**** misc
#+begin_src emacs-lisp
(my/which-key-set-command-description
 'my/narrow-to-active-region "narrow to region"
 'narrow-to-region           "narrow to region")
#+end_src

**** evil
#+begin_src emacs-lisp
(my/which-key-set-command-description
 'evil-scroll-line-to-top    "scroll line to top"
 'evil-scroll-line-to-center "scroll line to center"
 'evil-scroll-line-to-bottom "scroll line to bottom"
 'evil-scroll-bottom-line-to-top "scroll line to top"
 'evil-scroll-top-line-to-bottom "scroll line to bottom"
 'evil-scroll-line-to-top-first-non-blank    "scroll line to top"
 'evil-scroll-line-to-bottom-first-non-blank "scroll line to bottom"
 'evil-scroll-line-to-center-first-non-blank "scroll line to center"
 'evil-first-non-blank       "start of line"
 'evil-end-of-line           "end of line"
 'evil-org-beginning-of-line "start of line"
 'evil-org-end-of-line       "end of line"
 'evil-open-fold             "open fold"
 'evil-close-fold            "close fold"
 'evil-open-fold-rec         "open fold recursively")

(my/which-key-set-command-description
 'evil-collection-unimpaired-insert-newline-above "insert newline above"
 'evil-collection-unimpaired-insert-newline-below "insert newline below"
 'evil-next-mark-line         "next mark line"
 'evil-previous-mark-line     "prev mark line"
 'evil-next-mark              "next mark"
 'evil-previous-mark          "previous mark"
 'evil-next-buffer            "next buffer"
 'evil-prev-buffer            "previous buffer"
 'evil-forward-section-begin  "forward section"
 'evil-backward-section-begin "backward section")
#+end_src

**** org-mode
#+begin_src emacs-lisp
(my/which-key-set-command-description
 'outline-up-heading             "up heading"
 'outline-show-subtree           "show subtree"
 'outline-hide-entry             "hide entry"
 'outline-hide-other             "hide all other"
 'outline-hide-body              "hide all bodies")

(my/which-key-set-command-description
 'org-ctrl-c-ctrl-c              "C-c C-c"
 'org-toggle-comment             "comment subtree"
 'org-sparse-tree                "sparce tree"
 'org-insert-structure-template  "structure template"
 'org-narrow-to-subtree          "narrow to subtree"
 'org-table-create-or-convert-from-region "table"
 'org-id-get-create              "create ID"
 'org-set-property               "set subtree property"
 'org-babel-insert-header-arg    "set src block header"
 'org-footnote-action            "footnote"
 'org-insert-link                "insert link"
 'org-deadline                   "deadline"
 'org-schedule                   "schedule"
 'org-time-stamp                 "time stamp"
 'org-time-stamp-inactive        "inactive time stamp"
 'org-cliplink                   "URL form clipboard"
 'org-attach                     "attachment"
 'org-agenda-file-to-front       "add file to agenda"
 'org-remove-file                "remove file from agenda"
 'org-next-link                  "next link"
 'org-previous-link              "previous link"
 'org-next-visible-heading       "next heading"
 'org-previous-visible-heading   "prev heading"
 'org-kill-note-or-show-branches "show subtree headings")
#+end_src

*** General keybindings
**** universal-argument
#+begin_src emacs-lisp
(general-def :keymaps 'universal-argument-map
  "M-u" 'universal-argument-more)
#+end_src

**** evil
#+begin_src emacs-lisp
(general-def :states 'motion
  "M-u" 'universal-argument
  "SPC" '(:keymap leader-map)
  ";"   '(:keymap semicolon-leader-map)
  "<backspace>"     'execute-extended-command ; emacs M-x
  "C-<backspace>"   'vertico-repeat
  "C-S-<backspace>" 'vertico-repeat-select
  "gh"  'evil-first-non-blank
  "gl"  'evil-end-of-line
  ;; "gb"  'ibuffer-jump
  "gb"  'bufler
  "C-s" 'evil-write
  "C-p" 'consult-yank-from-kill-ring
  "-"   'dired-jump
  "/"   'consult-line
  "?"   'evil-search-forward
  "zn"  'narrow-to-region
  "zw"  'widen
  "z="  'flyspell-correct-wrapper
  "g <tab>"     'tab-new
  "g <backtab>" 'tab-bar-move-window-to-tab
  "C-<tab>"     'tab-next
  "C-<backtab>" 'tab-previous)

(general-def :states 'normal
  "ga" 'describe-char)

(general-def :states '(normal visual)
  "C-p" 'consult-yank-from-kill-ring)

(general-def :states 'visual
  "zn" 'my/narrow-to-active-region)

(general-def :states '(replace insert)
  "C-<backspace>" 'evil-delete-backward-word)

(general-def :states 'insert
  "C-l" 'right-char
  "C-S-t" 'indent-relative
  "M-t" 'indent-relative)
#+end_src

**** COMMENT Invoke =C-w= (~evil-window-map~) as hydra head
- [[https://github.com/abo-abo/hydra/issues/335][Source]]
#+begin_src emacs-lisp
(eval
 `(defhydra hydra-evil-window-map (:columns 2)
    ,@(mapcar (lambda (x)
                (list (car x) (intern (cdr x)) (cdr x)))
              (which-key--get-keymap-bindings evil-window-map))
    ("q" nil "quit")))

(general-def :states 'normal
  "C-w" 'hydra-evil-window-map/body)
#+end_src

**** help system
#+begin_src emacs-lisp
(general-def :keymaps 'help-map
  "s" 'info-lookup-symbol
  "M" 'describe-keymap)
#+end_src

*** Leader map
#+begin_src emacs-lisp
(general-def :keymaps 'leader-map
  ":" 'eval-expression
  ;; "h"  '(:keymap help-map :wk "help")
  ;; "p"  '(:keymap projectile-command-map :wk "projectile prefix")
  "p"  '("projectile" . projectile-command-map)
  "n"  '("notes" . my/notes-map)
  "m"  '("bookmark" . my/bookmark-map)
  ;; "o"  '("obsidian" . my/obsidian-map)
  "oo" 'obsidian-jump
  "oc" 'obsidian-capture
  "b"  'consult-buffer
  "ff" 'find-file
  ;; "fF" 'affe-find
  ;; "fzf" 'fzf
  "fzf" 'my/fzf-curdir
  "fzh" 'my/fzf-home
  "fo" 'consult-outline
  "fg" 'consult-ripgrep
  "fi" 'consult-imenu
  "fr" 'consult-recent-file
  "fd" 'consult-dir
  "fb" 'consult-bookmark
  ;; "fv" 'vertico-repeat-select ; v for vertico
  "4f" 'find-file-other-window)
#+end_src

*** Minibuffer
#+begin_src emacs-lisp
(general-def :keymaps 'minibuffer-local-map
  "C-h" 'backward-kill-word)
#+end_src

**** Vertico
#+begin_src emacs-lisp
(with-eval-after-load 'vertico
  (general-def :keymaps 'vertico-map :states '(normal visual)
    "C-j" 'vertico-next
    "C-k" 'vertico-previous
    "C-l" 'vertico-insert
    "<tab>" 'vertico-insert
    "n"   'vertico-next-group
    "N"   'vertico-previous-group
    "C-f" 'vertico-scroll-up
    "C-b" 'vertico-scroll-down
    "C-d" 'consult-dir
    ;; "C-j" 'consult-dir-jump-file
    "C-p" 'consult-yank-from-kill-ring
    "gg" 'vertico-first
    "G"  'vertico-last
    "q"  'abort-recursive-edit)

  (general-def :keymaps 'vertico-map :states 'insert
    "C-y" 'yank
    "C-j" 'vertico-next
    "C-k" 'vertico-previous
    "C-l" 'vertico-insert
    "<tab>" 'vertico-insert
    "C-d" 'consult-dir
    "C-n" 'vertico-next-group
    "C-p" 'vertico-previous-group
    "C-f" 'vertico-scroll-up
    "C-b" 'vertico-scroll-down)

  ;; More convenient directory navigation commands
  (general-def :keymaps 'vertico-map :states 'insert
    "<return>" 'vertico-directory-enter
    "<backspace>" 'vertico-directory-delete-char
    "C-<backspace>" 'vertico-directory-delete-word)

  ;; Russian
  (general-def :keymaps 'vertico-map :states 'insert
    "C-о" 'vertico-next
    "C-л" 'vertico-previous))
#+end_src

**** Marginalia
#+begin_src emacs-lisp
(general-def :keymaps 'minibuffer-local-map :states '(motion insert)
  "M-a" 'marginalia-cycle)
#+end_src

*** Lisp structural editing
#+begin_src emacs-lisp
(general-def :keymaps 'evil-cleverparens-mode-map :states '(normal visual)
  ")"   'my/evil-cp-up-sexp
  "["    nil  ; unbind `evil-cp-previous-opening' in favor of unimpaired
  "]"    nil  ; unbind `evil-cp-next-closing' in favor of unimpaired
  "C-(" 'evil-cp-backward-up-sexp
  "C-)" 'my/evil-cp-up-sexp
  "M-w" 'my/evil-cp-forward-sexp
  "M-b" 'my/evil-cp-backward-sexp
  "L"   'my/evil-cp-forward-sexp
  "H"   'my/evil-cp-backward-sexp
  ",w"  'evil-cp-wrap-next-round
  ",W"  'evil-cp-wrap-previous-round
  ",b"  'evil-cp-wrap-next-square
  ",B"  'evil-cp-wrap-previous-square
  ",f"  'evil-cp-wrap-next-curly
  ",F"  'evil-cp-wrap-previous-curly)
#+end_src

*** Bufler
#+begin_src emacs-lisp
(general-def :keymaps 'bufler-list-mode-map :states 'normal
  "<return>" 'bufler-list-buffer-switch
  "C-s" 'bufler-list-buffer-save
  "gr" '(bufler :wk "refresh")
  "d" 'bufler-list-buffer-kill
  "x" 'bufler-list-buffer-kill
  "W" 'bufler-list-buffer-peek
  "?" 'hydra:bufler/body)
#+end_src

#+begin_src emacs-lisp
(my/which-key-set-command-description
 'bufler-list-buffer-switch "switch to buffer"
 'bufler-list-buffer-save   "save buffer"
 'bufler-list-buffer-kill   "kill buffer")
#+end_src

*** Folds
#+begin_src emacs-lisp
;; (general-def :keymaps 'hs-minor-mode-map :states 'normal
;;   "zM" 'hs-hide-level)

(add-hook 'hs-minor-mode-hook
          (lambda ()
            (general-def :keymaps 'local :states 'normal
              "zM" 'hs-hide-level)))
#+end_src

*** Bookmarks
#+begin_src emacs-lisp
(general-def :keymaps 'my/bookmark-map
  "m" 'consult-bookmark
  "n" 'bookmark-set
  "d" 'bookmark-delete
  "l" 'bookmark-bmenu-list)
#+end_src

#+begin_src emacs-lisp
(my/which-key-set-command-description
 'bookmark-bmenu-list "bookmarks list")
#+end_src

*** Dired
**** COMMENT Dirvish
#+begin_src emacs-lisp
(general-def :keymaps 'dired-mode-map :states 'normal
  [remap dired]                     'dirvish-dwim
  [remap dired-sort-toggle-or-edit] 'dirvish-quicksort
  [remap dired-do-redisplay]        'dirvish-ls-switches-menu
  [remap dired-do-copy]             'dirvish-yank-menu
  "<mouse-1>" 'dirvish-subtree-toggle-or-open ;; Left click for expand/collapse dir or open file
  "<mouse-2>" 'dired-mouse-find-file-other-window ;; middle click for opening file / entering dir in other window
  "<mouse-3>" 'dired-mouse-find-file ;; right click for opening file / entering dir
  "<tab>" 'dirvish-toggle-subtree
  "<backspace>" 'dired-up-directory
  "l"   'dired-find-file
  "h"   'dired-up-directory
  "f"   'find-file
  "gh"  'dired-home-directory
  "C-o" 'dirvish-history-go-backward
  "C-i" 'dirvish-history-go-forward
  "q"   'dirvish-quit
  "?"   'dirvish-dispatch
  "gb"  '(dirvish-ibuffer :which-key "ibuffer")
  "a"   'dirvish-quick-access
  "p"   'dirvish-yank-menu
  "s"   'dirvish-quicksort
  "w"   'dirvish-layout-toggle
  "<"   'dired-prev-marked-file
  ">"   'dired-next-marked-file
  "gh"  'dirvish-history-jump)

(general-def :keymaps 'dired-mode-map :states 'visual
  "d" 'dired-flag-file-deletion
  "u" 'dired-unmark)

(general-def :keymaps 'dired-mode-map :states 'normal
  :prefix "SPC"
  "n" 'dirvish-narrow
  "m" 'dirvish-mark-menu
  "s" 'dirvish-setup-menu
  "e" 'dirvish-emerge-menu
  "l" 'dired-launch-command
  "f" '(nil :which-key t))
#+end_src

#+begin_src emacs-lisp :tangle no
"C-c f" 'dirvish-fd
"f"   'dirvish-file-info-menu
"y"   'dirvish-yank-menu
"N"   'dirvish-narrow
"^"   'dirvish-history-last
"h"   'dirvish-history-jump ; remapped `describe-mode'
"s"   'dirvish-quicksort    ; remapped `dired-sort-toggle-or-edit'
"v"   'dirvish-vc-menu      ; remapped `dired-view-file'
"TAB" 'dirvish-subtree-toggle
"M-f" 'dirvish-history-go-forward
"M-b" 'dirvish-history-go-backward
"M-l" 'dirvish-ls-switches-menu
"M-m" 'dirvish-mark-menu
"M-t" 'dirvish-layout-toggle
"M-s" 'dirvish-setup-menu
"M-e" 'dirvish-emerge-menu
"M-j" 'dirvish-fd-jump
#+end_src

#+begin_src emacs-lisp
(defun dirvish-ibuffer ()
  (interactive)
  (dirvish-quit)
  (ibuffer))
#+end_src

**** dired
#+begin_src emacs-lisp
(general-def :keymaps 'dired-mode-map :states 'normal
  "SPC" '(:keymap leader-map)
  "<backspace>" 'execute-extended-command ;; emacs M-x
  "l" 'dired-find-file
  "h" 'dired-up-directory
  "f" 'find-file
  "r" 'dired-do-rename
  "y" 'dired-ranger-copy
  ;; "Y" 'dired-copy-filename-as-kill
  "p" 'dired-ranger-paste
  "P" 'dired-ranger-move
  "w" 'dired-display-file
  ")" 'dired-omit-mode
  "<" 'dired-prev-marked-file
  ">" 'dired-next-marked-file
  "s" 'dired-narrow-fuzzy
  "S" 'dired-narrow-regexp
  "." 'hydra-dired/body
  "M-<return>" 'my/dired-xdg-open)

(general-def :keymaps 'dired-mode-map :states 'visual
  "d" 'dired-flag-file-deletion
  "u" 'dired-unmark)
#+end_src

***** dired subtree
#+begin_src emacs-lisp
(general-def :keymaps 'dired-mode-map :states 'normal
  "<tab>"     'dired-subtree-toggle
  "<backtab>" 'dired-subtree-cycle
  "zk" 'dired-subtree-up
  "zj" 'dired-subtree-down
  "C-j" 'dired-subtree-next-sibling
  "C-k" 'dired-subtree-previous-sibling)
#+end_src

***** dired hydra
#+begin_src emacs-lisp
(defhydra hydra-dired (:hint nil :color pink)
  "
_Y_ rel symlink    _O_pen marked
_S_ymlink          _n_ narrow
_z_ compress-file  _m_ chmod       _s_ort             _E_ ediff
_Z_ compress       _g_ chgrp       _e_xtension mark   _=_ pdiff
"
  ("+" dired-maybe-create-dirs)
  ("=" diredp-ediff) ;; smart diff
  ("e" dired-mark-extension)
  ("E" dired-ediff-files)
  ("g" dired-do-chgrp)
  ("m" dired-do-chmod)
  ("n" dired-narrow)
  ("O" dired-do-find-marked-files) ;; open in Emacs all marked files
  ;; ("o" dired-display-file)
  ;; ("r" dired-do-rsynch)
  ("S" dired-do-symlink)
  ("s" dired-sort-toggle-or-edit)
  ("Y" dired-do-relsymlink)
  ("z" diredp-compress-this-file)
  ("Z" dired-do-compress)
  ("q" nil)
  ("." nil :color blue)
  ("<escape>" nil :color blue))
#+end_src

*** Project.el & Projectile
#+begin_src emacs-lisp
(general-def :keymaps 'projectile-command-map
  "I" 'projectile-project-info
  "B" 'projectile-ibuffer)
  #+end_src

#+begin_src emacs-lisp
(my/which-key-set-command-description
 'projectile-project-info "project info")
#+end_src

*** LSP
**** COMMENT lsp-mode
#+begin_src emacs-lisp
(with-eval-after-load 'lsp-mode
  (define-prefix-command 'lsp-mode-leader-map)
  (general-def :keymaps 'lsp-mode-leader-map
    "hh" '(lsp-document-highlight
           :predicate (lsp-feature? "textDocument/documentHighlight"))
    "hs" '(lsp-signature-activate
           :predicate (lsp-feature? "textDocument/signatureHelp"))
    ;;; goto
    "ga" '(xref-find-apropos
           :predicate (lsp-feature? "workspace/symbol"))
    "gd" '(lsp-find-declaration
           :predicate (lsp-feature? "textDocument/declaration"))
    "ge" '(lsp-treemacs-errors-list
           :predicate (fboundp 'lsp-treemacs-errors-list))
    "gg" '(lsp-find-definition
           :predicate (lsp-feature? "textDocument/definition"))
    "gh" '(lsp-treemacs-call-hierarchy
           :predicate (and (lsp-feature? "callHierarchy/incomingCalls")
                           (fboundp 'lsp-treemacs-call-hierarchy)))
    "gi" '(lsp-find-implementation
           :predicate (lsp-feature? "textDocument/implementation"))
    "gr" '(lsp-find-references
           :predicate (lsp-feature? "textDocument/references"))
    "gt" '(lsp-find-type-definition
           :predicate (lsp-feature? "textDocument/typeDefinition"))
    ;;; refactoring
    "rr" '(lsp-rename
           :predicate (lsp-feature? "textDocument/rename"))
    "ro" '(lsp-organize-imports
           :predicate (lsp-feature? "textDocument/codeAction"))
    ;;; actions
    "aa" '(lsp-execute-code-action
           :predicate (lsp-feature? "textDocument/codeAction"))
    "al" '(lsp-avy-lens
           :predicate (featurep 'avy))
    ;;; peeks
    "Gg" '(lsp-ui-peek-find-definitions
           :predicate (and (lsp-feature? "textDocument/definition")
                           (fboundp 'lsp-ui-peek-find-definitions)))
    "Gi" '(lsp-ui-peek-find-implementation
           :predicate (and (fboundp 'lsp-ui-peek-find-implementation)
                           (lsp-feature? "textDocument/implementation")))
    "Gr" '(lsp-ui-peek-find-references
           :predicate (and (fboundp 'lsp-ui-peek-find-references)
                           (lsp-feature? "textDocument/references")))
    "Gs" '(lsp-ui-peek-find-workspace-symbol
           :predicate (and (fboundp 'lsp-ui-peek-find-workspace-symbol)
                           (lsp-feature? "workspace/symbol")))
    ;;; formatting
    "=" '(lsp-format-buffer
          :predicate (or (lsp-feature? "textDocument/rangeFormatting")
                         (lsp-feature? "textDocument/formatting")))
    ;;; toggles
    "tL" 'lsp-toggle-trace-io
    "tS" '(lsp-ui-sideline-mode
           :predicate (featurep 'lsp-ui-sideline))
    "tT" '(lsp-treemacs-sync-mode
           :predicate (featurep 'lsp-treemacs))
    "ta" '(lsp-modeline-code-actions-mode
           :predicate (lsp-feature? "textDocument/codeAction"))
    "tb" '(lsp-headerline-breadcrumb-mode
           :predicate (lsp-feature? "textDocument/documentSymbol"))
    "td" '(lsp-ui-doc-mode
           :predicate (featurep 'lsp-ui-doc))
    "tf" '(lsp-toggle-on-type-formatting
           :predicate (lsp-feature? "textDocument/onTypeFormatting"))
    "th" '(lsp-inlay-hints-mode
           :predicate (lsp-feature? "textDocument/inlayHint"))
    "tH" '(lsp-toggle-symbol-highlight
           :predicate (lsp-feature? "textDocument/documentHighlight"))
    "tl" '(lsp-lens-mode
           :predicate (lsp-feature? "textDocument/codeLens"))
    "ts" '(lsp-toggle-signature-auto-activate
           :predicate (lsp-feature? "textDocument/signatureHelp"))
    ;;; workspaces
    "wD" 'lsp-disconnect
    "wd" 'lsp-describe-session
    "wq" 'lsp-workspace-shutdown
    "wr" 'lsp-workspace-restart)

  (general-def :keymaps 'lsp-mode-map :states 'normal
    "SPC" '(:keymap lsp-mode-leader-map)
    "K"   'eldoc-box-help-at-point
    "C-h ." '(lsp-describe-thing-at-point
              :predicate (lsp-feature? "textDocument/hover")))

  (general-def :keymaps 'lsp-mode-map :states 'visual
    "SPC =" '(lsp-format-region
              :predicate (lsp-feature? "textDocument/rangeFormatting"))))
#+end_src

***** which-key descriptions
#+begin_src emacs-lisp
(with-eval-after-load 'lsp-mode
  (my/which-key-set-command-description
   'xref-find-apropos                  "find symbol in workspace"
   'lsp-find-declaration               "find declarations"
   'lsp-find-definition                "find definitions"
   'lsp-find-implementation            "find implementations"
   'lsp-find-references                "find references"
   'lsp-find-type-definition           "find type definition"
   'lsp-organize-imports               "organize imports"
   'lsp-rename                         "rename"
   'lsp-execute-code-action            "code actions"
   'lsp-document-highlight             "highlight symbol"
   'lsp-avy-lens                       "lens"
   'lsp-ui-peek-find-definitions       "peek definitions"
   'lsp-ui-peek-find-implementation    "peek implementations"
   'lsp-ui-peek-find-references        "peek references"
   'lsp-ui-peek-find-workspace-symbol  "peek workspace symbol"
   'lsp-ui-doc-glance                  "glance symbol"
   'lsp-describe-thing-at-point        "describe symbol at point"
   'lsp-signature-activate             "signature help"
   'lsp-format-buffer                  "format buffer"
   'lsp-format-region                  "format region"
   'lsp-modeline-diagnostics-mode      "toggle modeline diagnostics"
   'lsp-toggle-trace-io                "toggle log io"
   'lsp-ui-sideline-mode               "toggle sideline"
   'lsp-modeline-code-actions-mode     "toggle modeline code actions"
   'lsp-headerline-breadcrumb-mode     "toggle breadcrumb"
   'lsp-ui-doc-mode                    "toggle documentation popup"
   'lsp-toggle-on-type-formatting      "toggle on type formatting"
   'lsp-toggle-symbol-highlight        "toggle highlighting"
   'lsp-lens-mode                      "toggle lenses"
   'lsp-toggle-signature-auto-activate "toggle signature"
   'lsp-disconnect                     "disconnect"
   'lsp-describe-session               "describe session"
   'lsp-workspace-shutdown             "shutdown server"
   'lsp-workspace-restart              "restart server"))

(with-eval-after-load 'lsp-treemacs
  (my/which-key-set-command-description
   'lsp-treemacs-errors-list    "show errors"
   'lsp-treemacs-call-hierarchy "call hierarchy"
   'lsp-treemacs-sync-mode      "toggle treemacs integration"))
#+end_src

**** eglot
#+begin_src emacs-lisp
(with-eval-after-load 'eglot
  (define-prefix-command 'eglot-leader-map)
  (general-def :keymaps 'eglot-leader-map
    "rr" 'eglot-rename
    "rq" 'eglot-code-action-quickfix
    "re" 'eglot-code-action-extract
    "ri" 'eglot-code-action-inline
    "rI" 'eglot-code-action-organize-imports
    "rR" 'eglot-code-action-rewrite
    "="  'eglot-format
    "th" 'eglot-inlay-hints-mode
    "dd" 'flymake-show-buffer-diagnostics
    "dj" 'flymake-goto-next-error
    "dk" 'flymake-goto-prev-error
    ;; "d[" 'flymake-goto-next-error
    ;; "d]" 'flymake-goto-prev-error
    "dc" 'consult-flymake
    "dD" 'flymake-show-project-diagnostics
    "a"  'eglot-code-actions)
  (general-def :keymaps 'eglot-mode-map :states '(normal visual)
    "SPC"   '(:keymap eglot-leader-map)
    "K"     'eldoc-box-help-at-point
    "M-k"   'eldoc-doc-buffer
    "C-S-k" 'eldoc-doc-buffer
    "C-t"   'xref-go-back
    "C-S-t" 'xref-go-forward
    "gi" 'eglot-find-implementation
    "gt" 'eglot-find-typeDefinition))
#+end_src

#+begin_src emacs-lisp
(dolist (map '(flymake-diagnostics-buffer-mode-map
               flymake-project-diagnostics-mode-map))
  (general-def :keymaps map :states 'normal
    "o" 'flymake-show-diagnostic))
#+end_src

***** which-key descriptions

#+begin_src emacs-lisp
(with-eval-after-load 'eglot
  (my/which-key-set-command-description
   'eglot-rename               "lsp rename"
   'eglot-code-action-organize-imports "organize imports"
   'eglot-code-action-quickfix "quickfix"
   'eglot-code-action-extract  "refactor extract"
   'eglot-code-action-inline   "refactor inline"
   'eglot-code-action-rewrite  "refactor rewrite"
   'eglot-format               "lsp format"
   'eglot-inlay-hints-mode     "toggle inlay hints"
   'eglot-code-actions         "code actions"
   ))
#+end_src

#+begin_src emacs-lisp
(with-eval-after-load 'flymake
  (my/which-key-set-command-description
   'flymake-show-buffer-diagnostics  "buffer diagnostics"
   'flymake-show-project-diagnostics "project diagnostics"
   'flymake-show-project-diagnostics "project-diagnostics"
   'flymake-show-buffer-diagnostics  "buffer-diagnostics"
   'flymake-goto-next-error          "next error"
   'flymake-goto-prev-error          "prev error"
   ;; 'consult-flymake
   ))
#+end_src

*** Corfu
#+begin_src emacs-lisp
;; (general-def :keymaps 'corfu-map :states 'insert
;;   "<escape>" 'corfu-quit
;;   "<tab>" 'corfu-insert)
#+end_src

Russian letters:
#+begin_src emacs-lisp
(general-def :keymaps 'corfu-map :states 'insert
  "C-о" 'corfu-next
  "C-л" 'corfu-previous
  "C-а" 'corfu-scroll-up
  "C-и" 'corfu-scroll-down)
#+end_src

Swap ~corfu-scroll-down~ and ~corfu-scroll-up~ functions.
#+begin_src emacs-lisp
(when evil-want-C-u-scroll
  (evil-collection-define-key 'insert 'corfu-map (kbd "C-u") 'corfu-scroll-down))

(when evil-want-C-d-scroll
  (evil-collection-define-key 'insert 'corfu-map (kbd "C-d") 'corfu-scroll-up))

(general-def :keymaps 'corfu-map :states 'insert
  "C-f" 'corfu-scroll-up
  "C-b" 'corfu-scroll-down)
#+end_src

*** Magit
#+begin_src emacs-lisp
(setopt
 evil-collection-magit-use-z-for-folds t ; use Z for stash instead
 evil-collection-magit-use-$-for-end-of-line nil ; use $ for `magit-process-buffer'
 ;; evil-collection-magit-want-horizontal-movement t
 )
#+end_src

#+begin_src emacs-lisp
(with-eval-after-load 'magit-section
  (general-def :keymaps 'magit-mode-map :states 'normal
    "C-j" 'magit-section-forward-sibling
    "C-k" 'magit-section-backward-sibling
    "zj"  'magit-section-forward
    "zk"  'magit-section-backward
    "Z"   'magit-stash)
  (general-def :keymaps 'magit-section-mode-map :states 'normal
    "C-j" 'magit-section-forward-sibling
    "C-k" 'magit-section-backward-sibling
    "zj"  'magit-section-forward
    "zk"  'magit-section-backward
    "zu"  'magit-section-up
    "gh"  'evil-first-non-blank
    "gl"  'evil-end-of-line
    "zt"  'evil-scroll-line-to-top
    "zz"  'evil-scroll-line-to-center
    "zb"  'evil-scroll-line-to-bottom
    "za"  'magit-section-toggle
    "zo"  'magit-section-toggle
    "zc"  'magit-section-toggle
    "<tab>"       'magit-section-cycle
    "C-<tab>"     'tab-next
    ;; "C-S-<tab>"   'tab-previous
    "C-<backtab>"   'tab-previous
    "g <tab>"     'tab-new
    "g <backtab>" 'tab-bar-move-window-to-tab)
  (general-def :keymaps 'magit-status-mode-map :states 'normal
    "g t "'tab-next
    "g T" 'tab-previous))
#+end_src

#+begin_src emacs-lisp
(general-def :keymaps 'with-editor-mode-map :states 'normal
  "ZZ" 'with-editor-finish
  "Q"  'with-editor-cancel
  "ZQ" 'with-editor-cancel)
#+end_src

#+begin_src emacs-lisp
(my/which-key-set-command-description
 'evil-collection-magit-yank-whole-line "yank whole line")
#+end_src

*** markdown-mode
#+begin_src emacs-lisp
(with-eval-after-load 'markdown-mode
  (defvar-keymap my/markdown-leader-map :parent 'leader-map)
  (general-def :keymaps 'my/markdown-leader-map
    "<return>" 'markdown-toggle-markup-hiding)

  (general-def :keymaps 'markdown-mode-map :states 'normal
    "SPC" '(:keymap my/markdown-leader-map)
    "z'"  'markdown-edit-code-block
    "zu"  'markdown-outline-up
    "zj"  'markdown-outline-next
    "zk"  'markdown-outline-previous
    "C-k" 'markdown-outline-previous-same-level
    "C-j" 'markdown-outline-next-same-level
    "C-<up>"   'markdown-outline-previous-same-level
    "C-<down>" 'markdown-outline-next-same-level
    ;; "<return>" 'markdown-toggle-markup-hiding
    "M-<up>"   'markdown-move-up
    "M-<down>" 'markdown-move-down)

  (general-def :keymaps 'edit-indirect-mode-map :states 'normal
    "ZZ" 'edit-indirect-commit
    "ZQ" 'edit-indirect-abort))
#+end_src

*** Obsidian
#+begin_src emacs-lisp
(with-eval-after-load 'obsidian
  (defvar-keymap my/obsidian-leader-map :parent 'leader-map)
  (general-def :keymaps 'my/obsidian-leader-map
    "ob" 'obsidian-backlink-jump
    "o/" 'obsidian-search
    "w"  'obsidian-insert-wikilink
    "l"  'obsidian-insert-link)

  (general-def :keymaps 'obsidian-mode-map :states 'normal
    "SPC" '(:keymap my/obsidian-leader-map)
    "gx"  'obsidian-follow-link-at-point))
#+end_src

**** Descriptions
#+begin_src emacs-lisp
(my/which-key-set-command-description
 'obsidian-jump            "open Obsidian note"
 'obsidian-insert-wikilink "insert wikilink"
 'obsidian-insert-link     "insert markdown link")
#+end_src

*** Outline
#+begin_src emacs-lisp
(general-def :keymaps 'outline-mode-map :states 'normal
  ;; "<tab>" 'outline-cycle
  "zm" 'my/outline-hide-sublevels
  "zj" 'outline-next-visible-heading
  "zk" 'outline-previous-visible-heading
  "zL" 'outline-hide-leaves
  "zl" nil ;;'outline-hide-leaves
  )
#+end_src

**** my functions for outline keybindings
#+begin_src emacs-lisp
(defun my/outline-hide-sublevels (levels)
  (interactive "p")
  (outline-hide-sublevels (or levels 1)))
#+end_src

*** Org-mode
**** general
#+begin_src emacs-lisp
(general-def :keymaps 'my/orgmode-leader-map
  "SPC" 'org-ctrl-c-ctrl-c
  "<return>" 'org-ctrl-c-ret
  "ni" 'org-id-get-create
  "np" 'org-set-property
  "nh" 'org-babel-insert-header-arg
  "nf" 'org-footnote-action
  "l"  'org-insert-link
  "d"  'org-deadline
  "e"  'org-export-dispatch
  "s"  'org-schedule
  "t"  'org-time-stamp
  "T"  'org-time-stamp-inactive
  "L"  'org-cliplink
  "a"  'org-attach
  "["  'org-agenda-file-to-front
  "]"  'org-remove-file)

(general-def :keymaps 'org-mode-map :states '(normal visual)
  "SPC" '(:keymap my/orgmode-leader-map)
  "C-<up>"   'org-backward-heading-same-level
  "C-<down>" 'org-forward-heading-same-level
  "K"  'helpful-at-point
  "^"  'evil-org-beginning-of-line
  "$"  'evil-org-end-of-line
  "gh" 'evil-org-beginning-of-line
  "gl" 'evil-org-end-of-line
  ;; "H"  'org-up-element
  ;; "L"  'org-down-element
  "gn" 'org-next-link
  "gN" 'org-previous-link
  "gx" 'org-open-at-point
  "zC" 'outline-hide-entry
  "zn" 'org-narrow-to-subtree
  "z'" 'org-edit-special
  "z," 'org-insert-structure-template
  "z/" 'org-sparse-tree
  "z;" 'org-toggle-comment
  "z|" 'org-table-create-or-convert-from-region
  ;; "M-q" 'unpackaged/flex-fill-paragraph
  )
(general-def :keymaps 'org-mode-map :states '(motion insert)
  "<tab>" 'org-cycle)

(add-hook 'evil-org-mode-hook
          (lambda ()
            (general-def :keymaps 'local :states 'insert
              "C-t" 'evil-shift-right-line
              "C-d" 'evil-shift-left-line)))
  #+end_src

**** Hydra to jump between links
#+begin_src emacs-lisp
(defhydra hydra-org-link ()
  "Link"
  ("n" org-next-link     "next")
  ("N" org-previous-link "previous")
  ("j" org-next-link     "next")
  ("k" org-previous-link "previous"))

(defhydra hydra-backward-org-link ()
  "Backward Link"
  ("N" org-next-link     "next")
  ("n" org-previous-link "previous")
  ("j" org-next-link     "next")
  ("k" org-previous-link "previous"))

(general-def :keymaps 'org-mode-map :states 'normal
  "gn" (lambda ()
         (interactive)
         (org-next-link)
         (hydra-org-link/body))
  "gN" (lambda ()
         (interactive)
         (org-previous-link)
         (hydra-backward-org-link/body)))
#+end_src

**** Org transclusion
#+begin_src emacs-lisp
(with-eval-after-load 'org-transclusion
  (general-def :keymaps 'org-transclusion-map :states 'normal
    ;; "e" 'org-transclusion-live-sync-start
    ;; "g" 'org-transclusion-refresh
    ;; "d" 'org-transclusion-remove
    ;; "C-d" 'org-transclusion-detach
    ;; "P" 'org-transclusion-promote-subtree
    ;; "D" 'org-transclusion-demote-subtree
    ;; "o" 'org-transclusion-open-source
    ;; "O" 'org-transclusion-move-to-source
    "gi" 'org-transclusion-live-sync-start)

  (general-def :keymaps 'org-transclusion-live-sync-map :states 'normal
    ;; "C-c C-c" 'org-transclusion-live-sync-exit
    ;; "C-y" 'org-transclusion-live-sync-paste
    "q" 'org-transclusion-live-sync-exit))
#+end_src

*** Org-Roam
#+begin_src emacs-lisp
(general-def :keymaps 'my/notes-map
  "I" 'my/org-roam-create-untracked-node
  "a" 'org-agenda
  "s" 'org-store-link
  "n" 'org-roam-node-find
  "c" 'org-roam-capture
  "b" 'org-roam-buffer-toggle
  "v" 'org-switchb
  "l" 'org-roam-node-insert
  "t" 'org-roam-tag-add
  "u" 'org-roam-ui-mode
  "d" '(:keymap org-roam-dailies-map)
  "/" 'consult-org-roam-search)

(general-def :keymaps 'org-roam-dailies-map
  "Y" 'org-roam-dailies-capture-yesterday
  "T" 'org-roam-dailies-capture-tomorrow)
#+end_src

#+begin_src emacs-lisp
(my/which-key-set-command-description
 'my/org-roam-create-untracked-node  "untracked org-roam node"
 'org-roam-dailies-capture-yesterday "capture yesterday"
 'org-roam-dailies-capture-tomorrow  "capture tomorrow")
#+end_src

*** Info mode
#+begin_src emacs-lisp
(general-def :keymaps 'Info-mode-map :states 'normal
  "SPC" (define-keymap :parent 'leader-map
          "1" 'Info-top-node
          "t" 'Info-toc
          "h" 'Info-history
          "d" 'Info-directory)

  "C-j" 'Info-next
  "C-k" 'Info-prev

  "zj" 'Info-forward-node
  "zk" 'Info-backward-node

  "J" 'Info-forward-node
  "K" 'Info-backward-node

  "zu" 'Info-up
  "gd" 'Info-directory

  "M" 'Info-menu)
#+end_src

Remove all =g <n>= keybindings from evil-collection, to prevent them from
population of ~which-key~ menu.
#+begin_src emacs-lisp
(dolist (i (number-sequence 1 9))
  (keymap-unset Info-mode-map (format "<normal-state> g %s" i) :remove))
#+end_src

**** which-key descriptions
#+begin_src emacs-lisp
(my/which-key-set-command-description
 'Info-directory "Info dir"
 'Info-history   "history"
 'Info-toc       "TOC"
 'Info-top-node  "top node"
 'Info-up        "Info parent node")
#+end_src

*** COMMENT Pdf-tools
#+begin_src emacs-lisp
(general-def :keymaps 'pdf-view-mode-map :states 'normal
  "J" 'pdf-view-scroll-up-or-next-page
  "K" 'pdf-view-scroll-down-or-previous-page
  "`" 'pdf-view-jump-to-register)
#+end_src

*** Russian
#+begin_src emacs-lisp
(general-def :states 'insert
  "C-д"   'right-char
  "C-ч 8" 'iso-transl-ctl-x-8-map
  "C-ц"   'evil-delete-backward-word)
#+end_src

** The end of =init.el= file
This concludes the =init.el= file.

#+begin_src emacs-lisp
(provide 'init.el)
;;; init.el ends here
#+end_src


* File local variables
# Local Variables:
# c-ts-mode-indent-offset: 2
# evil-shift-width: 2
# End:
