# vim:fileencoding=utf-8:ft=kitty:foldmethod=marker

#: Fonts {{{

#: kitty has very powerful font management. You can configure
#: individual font faces and even specify special fonts for particular
#: characters.

# font_family      FiraCode Nerd Font
# bold_font        FiraCode Nerd Font Medium

# font_family      Roboto Mono
# bold_font        auto
# italic_font      auto
# bold_italic_font auto
# font_size 12.3

font_family      Inconsolata LGC
bold_font        auto
italic_font      auto
bold_italic_font auto
font_size 12.0

# bold_font        DejaVu Sans Mono Bold


#: You can specify different fonts for the bold/italic/bold-italic
#: variants. To get a full list of supported fonts use the `kitty
#: list-fonts` command. By default they are derived automatically, by
#: the OSes font system. When bold_font or bold_italic_font is set to
#: auto on macOS, the priority of bold fonts is semi-bold, bold,
#: heavy. Setting them manually is useful for font families that have
#: many weight variants like Book, Medium, Thick, etc. For example::

#:     font_family      Operator Mono Book
#:     bold_font        Operator Mono Medium
#:     italic_font      Operator Mono Book Italic
#:     bold_italic_font Operator Mono Medium Italic

# font_size 11.7

#: Font size (in pts)

force_ltr no

#: kitty does not support BIDI (bidirectional text), however, for RTL
#: scripts, words are automatically displayed in RTL. That is to say,
#: in an RTL script, the words "HELLO WORLD" display in kitty as
#: "WORLD HELLO", and if you try to select a substring of an RTL-
#: shaped string, you will get the character that would be there had
#: the the string been LTR. For example, assuming the Hebrew word
#: ירושלים, selecting the character that on the screen appears to be ם
#: actually writes into the selection buffer the character י.  kitty's
#: default behavior is useful in conjunction with a filter to reverse
#: the word order, however, if you wish to manipulate RTL glyphs, it
#: can be very challenging to work with, so this option is provided to
#: turn it off. Furthermore, this option can be used with the command
#: line program GNU FriBidi
#: <https://github.com/fribidi/fribidi#executable> to get BIDI
#: support, because it will force kitty to always treat the text as
#: LTR, which FriBidi expects for terminals.

adjust_line_height  0
adjust_column_width 0

#: Change the size of each character cell kitty renders. You can use
#: either numbers, which are interpreted as pixels or percentages
#: (number followed by %), which are interpreted as percentages of the
#: unmodified values. You can use negative pixels or percentages less
#: than 100% to reduce sizes (but this might cause rendering
#: artifacts).

adjust_baseline 0

#: Adjust the vertical alignment of text (the height in the cell at
#: which text is positioned). You can use either numbers, which are
#: interpreted as pixels or a percentages (number followed by %),
#: which are interpreted as the percentage of the line height. A
#: positive value moves the baseline up, and a negative value moves
#: them down. The underline and strikethrough positions are adjusted
#: accordingly.

# https://microsoft.github.io/vscode-codicons/dist/codicon.html
# https://github.com/microsoft/vscode-codicons/blob/main/dist/codicon.ttf
# symbol_map U+ea60-U+ebf8 codicon

# Exclamation mark: "!" {{{

# f12a:  (nf-fa-exclamation)
# symbol_map U+f12a FiraCode Nerd Font

# f12a:  (exclamation)
# symbol_map U+f12a Font Awesome 5 Pro Solid

# f1238: 󱈸  (mdi-exclamation-thick)
# symbol_map U+f1238 Material Design Icons

# e645:   (priority_high)
# symbol_map U+e645 Material Icons

# }}}

# Nerd Font {{{

# symbol_map U+23fb-U+fd46 Symbols Nerd Font
symbol_map U+23fb-U+fd46 FiraCode Nerd Font

# f084:   (nf-fa-key)
# symbol_map U+f084 Symbols Nerd Font
# symbol_map U+f084 FiraCode Nerd Font

# f655 : 
# e615 : 
# f0F6 : 
# symbol_map U+F655,U+E615,U+F0F6 Symbols Nerd Font
# symbol_map U+F655,U+E615,U+F0F6 FiraCode Nerd Font

# f00c:  (nf-fa-check)
# f00c:  (check)
# symbol_map U+f00c FiraCode Nerd Font
# symbol_map U+f00c Font Awesome 5 Pro Solid

# }}}

# Font Awesome {{{

# Mathematics {{{

# f6a6:   (value-absolute)
symbol_map U+f6a6 Font Awesome 5 Pro Solid

# f698:   (square-root-alt)
symbol_map U+f698 Font Awesome 5 Pro Solid

# f697:   (square-root)
symbol_map U+f697 Font Awesome 5 Pro Solid

# f67a:   (omega)
symbol_map U+f67a Font Awesome 5 Pro Solid

# f67e:   (pi)
symbol_map U+f67e Font Awesome 5 Pro Solid

# f68b:   (sigma)
symbol_map U+f68b Font Awesome 5 Pro

# f656:   (empty-set)
symbol_map U+f656 Font Awesome 5 Pro Solid

# f66e:   (lambda)
symbol_map U+f66e Font Awesome 5 Pro Solid

# }}}

# All Font Awesome 5.13 Pro range
# symbol_map U+F000-U+F976 Font Awesome 5 Pro

# f128: 
symbol_map U+f128 Font Awesome 5 Pro Solid

# f021: 
symbol_map U+f021 Font Awesome 5 Pro Solid

# f1f8: 
symbol_map U+f1f8 Font Awesome 5 Pro Solid

# f1b2: 
symbol_map U+f1b2 Font Awesome 5 Pro Solid

# f61f: 
symbol_map U+f61f Font Awesome 5 Pro Solid

# f661:   (function)
symbol_map U+f661 Font Awesome 5 Pro

# f802: 
symbol_map U+f802 Font Awesome 5 Pro Solid

# # f1c0:   (database)
# symbol_map U+f1c0 Font Awesome 5 Pro Solid
#
# # f386:    (code-commit)
# # symbol_map U+f386 Font Awesome 5 Pro
#
# # f121:   (code)
# # symbol_map U+f121 Font Awesome 5 Pro Solid
#
# # f126:   (code-branch)
# # symbol_map U+f126 Font Awesome 5 Pro Solid
#
# # f443:   (chess-pawn)
# # symbol_map U+f443 Font Awesome 5 Pro Solid
#
# # f43d:    (chess-clock)
# # symbol_map U+f43d Font Awesome 5 Pro Solid
#
# # f200:   (chart-pie)
# # symbol_map U+f200 Font Awesome 5 Pro Solid
#
# # f7e9:   (brackets)
# symbol_map U+f7e9 Font Awesome 5 Pro Solid
#
# # f0e7:  (bolt)
# symbol_map U+f0e7 Font Awesome 5 Pro Solid
#
# # f27e:   (black-tie)
# # symbol_map U+f27e Font Awesome 5 Brands

# f5cb:   (vector-square)
symbol_map U+f5cb Font Awesome 5 Pro Solid

# # f888:   (sort-shapes-down)
# symbol_map U+f888 Font Awesome 5 Pro Solid
#
# # f162:   (sort-numeric-down)
# # symbol_map U+f162 Font Awesome 5 Pro Solid
#
# # f15d:   (sort-alpha-down)
# symbol_map U+f15d Font Awesome 5 Pro Solid
#
# # f1de:   (sliders-h)
# symbol_map U+f1de Font Awesome 5 Pro Solid
#
# # f0c7:   (save)
# symbol_map U+f0c7 Font Awesome 5 Pro Solid

# f546:   (ruler-combined)
symbol_map U+f546 Font Awesome 5 Pro Solid

# f545:   (ruler) Font Awesome 5 Pro Solid
symbol_map U+f545 Font Awesome 5 Pro Solid

# f61c:  (ruler-triangle)
symbol_map U+f61c Font Awesome 5 Pro Solid

# # f12e:   (puzzle-piece)
# symbol_map U+f12e Font Awesome 5 Pro Solid

# f5b1:   (prescription)
symbol_map U+f5b1 Font Awesome 5 Pro Solid

# f1e6:   (plug) Font Awesome 5 Pro Solid
symbol_map U+f1e6 Font Awesome 5 Pro Solid

# # f6ff:   (network-wired)
# # symbol_map U+f6ff Font Awesome 5 Pro Solid
#
# # f0ca:   (list-ul)
# # symbol_map U+f0ca Font Awesome 5 Pro Solid

# f5fd:   (layer-group) Font Awesome 5 Pro Solid
symbol_map U+f5fd Font Awesome 5 Pro

# # f542:   (project-diagram)
# symbol_map U+f542 Font Awesome 5 Pro Solid
#
# # f2d7:   (etsy)
# # symbol_map U+f2d7 Font Awesome 5 Brands
#
# # f2ec:   (triangle)
# symbol_map U+f2ec Font Awesome 5 Pro Solid
#
# # f1b3:   (cubes)
# # symbol_map U+f1b3 Font Awesome 5 Pro Solid
#
# # f0eb:   (lightbulb)
# symbol_map U+f0eb Font Awesome 5 Pro Solid
#
# # f0e8:   (sitemap)
# # symbol_map U+f0e8 Font Awesome 5 Pro Solid
#
# # f78a:   (chart-network)
# symbol_map U+f78a Font Awesome 5 Pro Solid
#
# # f08b:   (sign-out)
# symbol_map U+f08b Font Awesome 5 Pro Solid
#
# # f090:   (sign-in)
# symbol_map U+f090 Font Awesome 5 Pro Solid
#
# # f08e:   (external-link)
# symbol_map U+f08e Font Awesome 5 Pro
#
# # f37e:   (browser)
# # symbol_map U+f37e Font Awesome 5 Pro
#
# # f468:   (boxes)
# symbol_map U+f468 Font Awesome 5 Pro

# f042:   (adjust)
# symbol_map U+f042 Font Awesome 5 Pro

# f061:  (arrow)
# symbol_map U+f061 Font Awesome 5 Pro

# f08d:  (thumbtack)

# }}}

# Material Design Icons {{{

# F0241: 󰉁  (mdi-flash)
# symbol_map U+F0241 Material Design Icons

# F016D: 󰅭  (mdi-code-greater-than-or-equal)
# symbol_map U+F016D Material Design Icons

# # : 󰅳  (sting)
# symbol_map U+ Material Design Icons

# f029:   (qrcode)
# symbol_map U+f029 Font Awesome 5 Pro

# F0432: 󰐲  (mdi-qrcode)
# symbol_map U+F0432 Material Design Icons

# f0020: 󰀠
symbol_map U+f0020 Material Design Icons

# f00ad: 󰂭
symbol_map U+f00ad Material Design Icons

# f0150: 󰅐
symbol_map U+f0150 Material Design Icons

# f0450: 󰑐
symbol_map U+f0450 Material Design Icons

# f13ab: 󱎫  (mdi-timer)
# f051b: 󰔛
symbol_map U+f13ab,U+f051b Material Design Icons

# f01c6: 󰇆
# symbol_map U+f01c6 Material Design Icons

# f012c: 󰄬  (mdi-check)
# f0e1e: 󰸞  (mdi-check-bold)
# symbol_map U+f012c,U+f0e1e Material Design Icons

# }}}

# Material Icons {{{

# e14b:   (block)
# symbol_map U+e14b Material Icons

# e574:   (category)
symbol_map U+e574 Material Icons

# e192:   (access time)
# symbol_map U+e192 Material Icons

# e425:   (timer)
symbol_map U+e425 Material Icons

# e876:   (done)
symbol_map U+e876 Material Icons

# e871:   (dashboard)
symbol_map U+e871 Material Icons

# e97a:   (account_tree)
symbol_map U+e97a Material Icons

# 󰞇 󰯈 󰸷 󰻃 󰼁 󰽗 󰿦 󱇯 􏕌 􏝓 󰝥 󰠱 󱡓
symbol_map U+E89F Material Icons

#   (shuffle)
symbol_map U+e043 Material Icons

# F09BB: 󰦻
# 󰜋 󰜌 󰒕 󰏉 󰊕󰡱 󰵲 󰈸 󱠇 󰇥 󰮐 󰚌 󰄯 󰄰

# }}}

# Unicode characters {{{

# Unicode Block "Geometric Shapes"
# U+25cd: ◍
symbol_map U+25A0-U+25FF DejaVu Sans Mono

# Miscellaneous Symbols: U+2600 - U+26FF
# U+2605: ★ (Black Star)
# U+2666: ♦ (Black Diamond Suit)
symbol_map U+2600-U+26FF DejaVu Sans Mono

# Unicode Block "Dingbats"
# U+279c: ➜ (Unicode Heavy Round-Tipped Rightwards Arrow)
# symbol_map U+279c DejaVu Sans Mono
symbol_map U+2700-U+27BF DejaVu Sans Mono

# Unicode Block "Supplemental Mathematical Operators"
# U+2A2F: ⨯ (Vector or Cross Product)
symbol_map U+2A00-U+2AAF DejaVu Sans Mono

# Unicode Block "Enclosed Alphanumerics"
# ⒈ - ⒛
# symbol_map U+2488-U+249B FiraCode Mono

# }}}

#: Map the specified unicode codepoints to a particular font. Useful
#: if you need special rendering for some symbols, such as for
#: Powerline. Avoids the need for patched fonts. Each unicode code
#: point is specified in the form U+<code point in hexadecimal>. You
#: can specify multiple code points, separated by commas and ranges
#: separated by hyphens. symbol_map itself can be specified multiple
#: times. Syntax is::

#:     symbol_map codepoints Font Family Name
#: E.g. symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 PowerlineSymbols

disable_ligatures cursor

#: Choose how you want to handle multi-character ligatures. The
#: default is to always render them.  You can tell kitty to not render
#: them when the cursor is over them by using cursor to make editing
#: easier, or have kitty never render them at all by using always, if
#: you don't like them. The ligature strategy can be set per-window
#: either using the kitty remote control facility or by defining
#: shortcuts for it in kitty.conf, for example::

#:     map alt+1 disable_ligatures_in active always
#:     map alt+2 disable_ligatures_in all never
#:     map alt+3 disable_ligatures_in tab cursor

#: Note that this refers to programming ligatures, typically
#: implemented using the calt OpenType feature. For disabling general
#: ligatures, use the font_features setting.

# font_features

#: E.g. font_features none

#: Choose exactly which OpenType features to enable or disable. This
#: is useful as some fonts might have features worthwhile in a
#: terminal. For example, Fira Code Retina includes a discretionary
#: feature, zero, which in that font changes the appearance of the
#: zero (0), to make it more easily distinguishable from Ø. Fira Code
#: Retina also includes other discretionary features known as
#: Stylistic Sets which have the tags ss01 through ss20.

#: For the exact syntax to use for individual features, see the
#: Harfbuzz documentation:
#: <https://harfbuzz.github.io/harfbuzz-hb-common.html#hb-feature-from-string>

#: Note that this code is indexed by PostScript name, and not the font
#: family. This allows you to define very precise feature settings;
#: e.g. you can disable a feature in the italic font but not in the
#: regular font.

#: On Linux, these are read from the FontConfig database first and
#: then this, setting is applied, so they can be configured in a
#: single, central place.

#: To get the PostScript name for a font, use kitty + list-fonts
#: --psnames:

#: .. code-block:: sh

#:     $ kitty + list-fonts --psnames | grep Fira
#:     Fira Code
#:     Fira Code Bold (FiraCode-Bold)
#:     Fira Code Light (FiraCode-Light)
#:     Fira Code Medium (FiraCode-Medium)
#:     Fira Code Regular (FiraCode-Regular)
#:     Fira Code Retina (FiraCode-Retina)

#: The part in brackets is the PostScript name.

#: Enable alternate zero and oldstyle numerals::

#:     font_features FiraCode-Retina +zero +onum

#: Enable only alternate zero::

#:     font_features FiraCode-Retina +zero

#: Disable the normal ligatures, but keep the calt feature which (in
#: this font) breaks up monotony::

#:     font_features TT2020StyleB-Regular -liga +calt

#: In conjunction with force_ltr, you may want to disable Arabic
#: shaping entirely, and only look at their isolated forms if they
#: show up in a document. You can do this with e.g.::

#:     font_features UnifontMedium +isol -medi -fina -init

box_drawing_scale 0.001, 1, 1.5, 2

#: Change the sizes of the lines used for the box drawing unicode
#: characters These values are in pts. They will be scaled by the
#: monitor DPI to arrive at a pixel value. There must be four values
#: corresponding to thin, normal, thick, and very thick lines.

#: }}}

#: Cursor customization {{{

# cursor none
# cursor #cccccc
# cursor #8cafff

#: Default cursor color. If set to the special value none the cursor
#: will be rendered with a "reverse video" effect. It's color will be
#: the color of the text in the cell it is over and the text will be
#: rendered with the background color of the cell.  Note that if the
#: program running in the terminal sets a cursor color, this takes
#: precedence. Also, the cursor colors are modified if the cell
#: background and foreground colors have very low contrast.

# cursor_text_color background
# cursor_text_color #111111
# cursor_text_color #ffffff

#: Choose the color of text under the cursor. If you want it rendered
#: with the background color of the cell underneath instead, use the
#: special keyword: background. Note that if cursor is set to none
#: then this setting is ignored.

cursor_blink_interval 0

#: The interval (in seconds) at which to blink the cursor. Set to zero
#: to disable blinking. Negative values mean use system default. Note
#: that numbers smaller than repaint_delay will be limited to
#: repaint_delay.

#: }}}

#: Scrollback {{{

scrollback_lines 10000

#: Number of lines of history to keep in memory for scrolling back.
#: Memory is allocated on demand. Negative numbers are (effectively)
#: infinite scrollback. Note that using very large scrollback is not
#: recommended as it can slow down performance of the terminal and
#: also use large amounts of RAM. Instead, consider using
#: scrollback_pager_history_size. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

# scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER
# scrollback_pager nvim -u NONE
scrollback_pager nvim

#: Program with which to view scrollback in a new window. The
#: scrollback buffer is passed as STDIN to this program. If you change
#: it, make sure the program you use can handle ANSI escape sequences
#: for colors and text formatting. INPUT_LINE_NUMBER in the command
#: line above will be replaced by an integer representing which line
#: should be at the top of the screen. Similarly CURSOR_LINE and
#: CURSOR_COLUMN will be replaced by the current cursor position or
#: set to 0 if there is no cursor, for example, when showing the last
#: command output.

scrollback_pager_history_size 4

#: Separate scrollback history size, used only for browsing the
#: scrollback buffer (in MB). This separate buffer is not available
#: for interactive scrolling but will be piped to the pager program
#: when viewing scrollback buffer in a separate window. The current
#: implementation stores the data in UTF-8, so approximatively 10000
#: lines per megabyte at 100 chars per line, for pure ASCII text,
#: unformatted text. A value of zero or less disables this feature.
#: The maximum allowed size is 4GB. Note that on config reload if this
#: is changed it will only affect newly created windows, not existing
#: ones.

strip_trailing_spaces smart

#: Remove spaces at the end of lines when copying to clipboard. A
#: value of smart will do it when using normal selections, but not
#: rectangle selections. always will always do it.

#: }}}

#: Terminal bell {{{

enable_audio_bell no

#: Enable/disable the audio bell. Useful in environments that require
#: silence.

#: }}}

#: Window layout {{{

remember_window_size  yes
# initial_window_width  183c
# initial_window_height 60c

#: If enabled, the window size will be remembered so that new
#: instances of kitty will have the same size as the previous
#: instance. If disabled, the window will initially have size
#: configured by initial_window_width/height, in pixels. You can use a
#: suffix of "c" on the width/height values to have them interpreted
#: as number of cells instead of pixels.

#: 0 disables it; -1 enables it
confirm_os_window_close 0

#: }}}

#: Tab bar {{{

tab_bar_style fade

#: The tab bar style, can be one of:

#: fade
#:     Each tab's edges fade into the background color (see tab_fade)
#: slant
#:     Tabs look like the tabs in a physical file
#: separator
#:     Tabs are separated by a configurable separator (see tab_separator)
#: powerline
#:     Tabs are shown as a continuous line with "fancy" separators
#:     (see tab_powerline_style)
#: custom
#:     A user-supplied Python function called draw_tab is loaded from the file
#:     tab_bar.py in the kitty config directory. For examples of how to
#:     write such a function, see the functions named draw_tab_with_* in
#:     kitty's source code: kitty/tab_bar.py. See also
#:     this discussion https://github.com/kovidgoyal/kitty/discussions/4447
#:     for examples from kitty users.
#: hidden
#:     The tab bar is hidden. If you use this, you might want to create a
#:     mapping for the https://sw.kovidgoyal.net/kitty/actions/#select-tab
#:     action which presents you with a list of tabs and allows for easy
#:     switching to a tab.

tab_bar_align left

#: The horizontal alignment of the tab bar, can be one of: left,
#: center, or right.

tab_bar_min_tabs 2

#: The minimum number of tabs that must exist before the tab bar is
#: shown

tab_switch_strategy previous

#: The algorithm to use when switching to a tab when the current tab
#: is closed. The default of previous will switch to the last used
#: tab. A value of left will switch to the tab to the left of the
#: closed tab. A value of right will switch to the tab to the right of
#: the closed tab. A value of last will switch to the right-most tab.

tab_fade 0

#: Control how each tab fades into the background when using fade for
#: the tab_bar_style. Each number is an alpha (between zero and one)
#: that controls how much the corresponding cell fades into the
#: background, with zero being no fade and one being full fade. You
#: can change the number of cells used by adding/removing entries to
#: this list.

tab_separator " ┇"

#: The separator between tabs in the tab bar when using separator as
#: the tab_bar_style.

tab_powerline_style angled

#: The powerline separator style between tabs in the tab bar when
#: using powerline as the tab_bar_style, can be one of: angled,
#: slanted, or round.

tab_activity_symbol ""

#: Some text or a unicode symbol to show on the tab if a window in the
#: tab that does not have focus has some activity. If you want to use
#: leading or trailing spaces surround the text with quotes. See
#: tab_title_template for how this is rendered.

# #080808
# #303030
# #c6c6c6
# #4e4e4e
# #ffd7af

tab_title_template "{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.default}{title}"
# tab_title_template "{fmt.bg.default}{fmt.fg._4e4e4e}{fmt.bg._4e4e4e}{fmt.fg._ffd7af} {title} {fmt.bg.default}{fmt.fg._4e4e4e}{fmt.fg.default}"
tab_title_template "{fmt.bg.default}{fmt.fg._4e4e4e}{fmt.bg._4e4e4e}{fmt.fg._ffd7af}{index} │ {title}{fmt.bg.default}{fmt.fg._4e4e4e}{fmt.fg.default}"

#: A template to render the tab title. The default just renders the
#: title with optional symbols for bell and activity. If you wish to
#: include the tab-index as well, use something like: {index}:
#: {title}. Useful if you have shortcuts mapped for goto_tab N. If you
#: prefer to see the index as a superscript, use {sup.index}. In
#: addition you can use {layout_name} for the current layout name,
#: {num_windows} for the number of windows in the tab and
#: {num_window_groups} for the number of window groups (not counting
#: overlay windows) in the tab. Note that formatting is done by
#: Python's string formatting machinery, so you can use, for instance,
#: {layout_name[:2].upper()} to show only the first two letters of the
#: layout name, upper-cased. If you want to style the text, you can
#: use styling directives, for example:
#: {fmt.fg.red}red{fmt.fg.tab}normal{fmt.bg._00FF00}green
#: bg{fmt.bg.tab}. Similarly, for bold and italic:
#: {fmt.bold}bold{fmt.nobold}normal{fmt.italic}italic{fmt.noitalic}.
#: Note that for backward compatibility, if {bell_symbol} or
#: {activity_symbol} are not present in the template, they are
#: prepended to it.


# active_tab_title_template "{fmt.bg.default}{fmt.fg._f5a416}{fmt.fg.default}{fmt.bg._f5a416} {title} {fmt.fg._f5a416}{fmt.bg.default}{fmt.fg.default}"
active_tab_title_template "{fmt.bg.default}{fmt.fg._f5b716}{fmt.fg.default}{fmt.bg._f5b716}{index} │ {title}{fmt.fg._f5b716}{fmt.bg.default}{fmt.fg.default}"

#: Template to use for active tabs, if not specified falls back to
#: tab_title_template.

# active_tab_foreground   #f5b716
# active_tab_background   #eee
# active_tab_font_style   bold-italic
active_tab_font_style   bold
# inactive_tab_foreground #444
# inactive_tab_background #4e4e4e
# inactive_tab_background #999
# inactive_tab_font_style normal

#: Tab bar colors and styles

tab_bar_background none

#: Background color for the tab bar. Defaults to using the terminal
#: background color.

tab_bar_margin_color none

#: Color for the tab bar margin area. Defaults to using the terminal
#: background color.

#: }}}

#: Color scheme {{{

include ./color_themes/onedark.conf
# include ./color_themes/gruvbox.conf

#: }}}

#: Advanced {{{

# shell .
shell /bin/bash -lc "tmux attach || tmux"

#: The shell program to execute. The default value of . means to use
#: whatever shell is set as the default shell for the current user.
#: Note that on macOS if you change this, you might need to add
#: --login and --interactive to ensure that the shell starts in
#: interactive mode and reads its startup rc files.

#: }}}

#: OS specific tweaks {{{

linux_display_server auto

#: Choose between Wayland and X11 backends. By default, an appropriate
#: backend based on the system state is chosen automatically. Set it
#: to x11 or wayland to force the choice. Changing this setting by
#: reloading the config is not supported.

#: }}}

#: Keyboard shortcuts {{{

#: Keys are identified simply by their lowercase unicode characters.
#: For example: ``a`` for the A key, ``[`` for the left square bracket
#: key, etc. For functional keys, such as ``Enter or Escape`` the
#: names are present at https://sw.kovidgoyal.net/kitty/keyboard-
#: protocol/#functional-key-definitions. For modifier keys, the names
#: are ctrl (control, ⌃), shift (⇧), alt (opt, option, ⌥), super (cmd,
#: command, ⌘). See also: GLFW mods
#: <https://www.glfw.org/docs/latest/group__mods.html>

#: On Linux you can also use XKB key names to bind keys that are not
#: supported by GLFW. See XKB keys
#: <https://github.com/xkbcommon/libxkbcommon/blob/master/include/xkbcommon/xkbcommon-
#: keysyms.h> for a list of key names. The name to use is the part
#: after the XKB_KEY_ prefix. Note that you can only use an XKB key
#: name for keys that are not known as GLFW keys.

#: Finally, you can use raw system key codes to map keys, again only
#: for keys that are not known as GLFW keys. To see the system key
#: code for a key, start kitty with the kitty --debug-input option.
#: Then kitty will output some debug text for every key event. In that
#: text look for ``native_code`` the value of that becomes the key
#: name in the shortcut. For example:

#: .. code-block:: none

#:     on_key_input: glfw key: 65 native_code: 0x61 action: PRESS mods: 0x0 text: 'a'

#: Here, the key name for the A key is 0x61 and you can use it with::

#:     map ctrl+0x61 something

#: to map ctrl+a to something.

#: You can use the special action no_op to unmap a keyboard shortcut
#: that is assigned in the default configuration::

#:     map kitty_mod+space no_op

#: If you would like kitty to completely ignore a key event, not even
#: sending it to the program running in the terminal, map it to
#: discard_event::

#:     map kitty_mod+f1 discard_event

#: You can combine multiple actions to be triggered by a single
#: shortcut, using the syntax below::

#:     map key combine <separator> action1 <separator> action2 <separator> action3 ...

#: For example::

#:     map kitty_mod+e combine : new_window : next_layout

#: this will create a new window and switch to the next available
#: layout

#: You can use multi-key shortcuts using the syntax shown below::

#:     map key1>key2>key3 action

#: For example::

#:     map ctrl+f>2 set_font_size 20

#: The full list of actions that can be mapped to key presses is
#: available here </actions>.

kitty_mod ctrl+shift

#: The value of kitty_mod is used as the modifier for all default
#: shortcuts, you can change it in your kitty.conf to change the
#: modifiers for all the default shortcuts.

clear_all_shortcuts no

#: You can have kitty remove all shortcut definitions seen up to this
#: point. Useful, for instance, to remove the default shortcuts.

action_alias

#: E.g. action_alias launch_tab launch --type=tab --cwd=current

#: Define aliases to avoid repeating the same options in multiple
#: mappings. Aliases can be defined for any action. Aliases are
#: expanded recursively. For example, the above alias allows you to
#: create mappings to launch a new tab in the current working
#: directory without duplication::

#:     map f1 launch_tab vim
#:     map f2 launch_tab emacs

#: Similarly, to alias kitten invocation::

#:     action_alias hints kitten hints --hints-offset=0

kitten_alias

#: E.g. kitten_alias hints hints --hints-offset=0

#: Like action_alias above but, specifically for kittens. Generally,
#: prefer to use action_alias. This option is a legacy version,
#: present for backwards compatibility. It causes all invocations of
#: the aliased kitten to be substituted. So the example above will
#: cause all invocations of the hints kitten to have the --hints-
#: offset=0 option applied.

#: Clipboard {{{

#: Copy to clipboard
# map kitty_mod+c copy_to_clipboard
map ctrl+c copy_and_clear_or_interrupt

#::  There is also a copy_or_interrupt action that can be optionally
#::  mapped to Ctrl+c. It will copy only if there is a selection and
#::  send an interrupt otherwise. Similarly,
#::  copy_and_clear_or_interrupt will copy and clear the selection or
#::  send an interrupt if there is no selection.

#: Paste from clipboard

map kitty_mod+v paste_from_clipboard

#: Paste from selection

map kitty_mod+s  paste_from_selection
map shift+insert paste_from_selection

#: Pass selection to program

map kitty_mod+o pass_selection_to_program

#::  You can also pass the contents of the current selection to any
#::  program using pass_selection_to_program. By default, the system's
#::  open program is used, but you can specify your own, the selection
#::  will be passed as a command line argument to the program, for
#::  example::

#::      map kitty_mod+o pass_selection_to_program firefox

#::  You can pass the current selection to a terminal program running
#::  in a new kitty window, by using the @selection placeholder::

#::      map kitty_mod+y new_window less @selection

#: }}}

map ctrl+shift+u kitten unicode_input
map ctrl+shift+a kitten unicode_input

# # https://invisible-island.net/xterm/modified-keys.html
# # \e[27;<mod>;<char>~
# map ctrl+;         send_text all  \x1b[27;5;59~
# map ctrl+tab       send_text all  \x1b[27;5;9~
# map ctrl+shift+tab send_text all  \x1b[27;6;9~

# Extended keyboard protocol
# https://unix.stackexchange.com/questions/631241/mapping-otherwise-conflicting-or-unmappable-keys-in-terminal-vim
# http://www.leonerd.org.uk/hacks/fixterms/
# https://sw.kovidgoyal.net/kitty/keyboard-protocol/#progressive-enhancement
# ASCII table: https://bestasciitable.com
map ctrl+;         send_text all  \x1b[59;5u
map ctrl+/         send_text all  \x1b[47;5u

map ctrl+tab       send_text all  \x1b[9;5u
map ctrl+shift+tab send_text all  \x1b[9;6u

#: }}}

