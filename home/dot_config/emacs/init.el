;;; init.el --- Emacs main configuration file -*- lexical-binding: t; no-byte-compile: t -*-
;;;
;;; Commentary:
;;; This file was automatically generated by `org-babel-tangle'.
;;; Do not change this file.  Main config is located in ~/.config/emacs/README.org
;;;
;;; Code:

(require 'package)
(setopt package-install-upgrade-built-in t)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(add-hook 'package-menu-mode-hook #'hl-line-mode)

(setopt use-package-enable-imenu-support t)

(when (version< emacs-version "30")
  (unless (package-installed-p 'vc-use-package)
    (package-vc-install "https://github.com/slotThe/vc-use-package"))
  (require 'vc-use-package))

(use-package diminish :ensure t)
(use-package hydra    :ensure t)
(use-package auto-compile :ensure t)
(use-package no-littering :ensure t :demand t) ;; files paths configuration
(use-package f :ensure t)

(use-package gcmh
  :ensure t
  :init (gcmh-mode))

(use-package dash
  :ensure t
  :hook (after-init . global-dash-fontify-mode)
  :config
  (with-eval-after-load 'info-look
    (dash-register-info-lookup)))

(use-package which-key
  :ensure t
  :demand t ; Force the package to load immediately.
  :diminish which-key-mode
  :hook after-init
  :custom
  (which-key-idle-delay 0.6)
  (which-key-popup-type 'side-window)
  (which-key-sort-order 'which-key-key-order-alpha))

(defun my/which-key-set-command-description (&rest spec)
  "Set description for command that would be shown in the whick-key menu."
  (dolist (s (-partition 2 spec))
    (-let* (((fname description) s)
            (fname (if (symbolp fname)
                       (symbol-name fname)
                     fname)))
      (add-to-list 'which-key-replacement-alist
                   `((nil . ,fname) . (nil . ,description))))))

(use-package general
  :ensure t
  :after which-key
  :config
  (general-auto-unbind-keys))

(defun my/add-to-list (list elements &optional append)
  "Add ELEMENTS to the front of the LIST.

If APPEND is non-nil add ELEMENTS to the end of the LIST.
This function change the value of the LIST symbol.

LIST sould be a symbol.
ELEMENTS could be either a list or a single element."
  (unless (consp elements)
    (setq elements `(,elements)))
  (set list (if append
                (append (symbol-value list) elements)
              (append elements (symbol-value list)))))

(defun my/remove-from-list (list elements)
  "Remove ELEMENTS from the LIST.

LIST should be a symbol.
ELEMENTS could be either a list or a single element."
  (unless (consp elements)
    (setq elements (list elements)))
  (dolist (element elements)
    (set list (remove element (symbol-value list)))))

(defun my/set-face-attribute (face-specs)
  (unless (listp (car face-specs))
    (setq face-specs (list face-specs)))
  (dolist (s face-specs)
    (-let [(face . spec) s]
      (apply #'set-face-attribute face nil spec))))

(when window-system
  (set-frame-size (selected-frame) 1300 1000 :pixelwise))

(when window-system
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)
  (blink-cursor-mode -1))

(use-package better-defaults :ensure t)
(use-package emacs
  :after better-defaults
  :custom
  (user-full-name "Yuriy Artemyev")
  (user-mail-address "anuvyklack@gmail.com")
  (ring-bell-function #'ignore)
  (inhibit-startup-message t)
  (cursor-type 'box)
  (cursor-in-non-selected-windows nil)
  (what-cursor-show-names t)
  (use-short-answers t)
  :config
  )

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))

(setopt help-window-select t)

(setopt help-at-pt-display-when-idle t)

(keymap-unset help-map "C-c" :remove) ; 'describe-copying

(use-package helpful
  :ensure t
  ;; :preface
  ;; (add-to-list 'load-path "~/code/emacs/helpful")
  :hook (helpful-mode . outline-minor-mode)
  :bind (([remap describe-function] . helpful-callable)
         ([remap describe-variable] . helpful-variable)
         ([remap describe-command] . helpful-command)
         ([remap describe-key] . helpful-key)
         :map help-map
         ("F" . helpful-function)))

(tab-bar-mode)
;; (tab-bar-history-mode)

;; :options
;; tab-bar-format-menu-bar
;; tab-bar-format-tabs
;; tab-bar-format-tabs-groups
;; tab-bar-separator
;; tab-bar-format-add-tab
;; tab-bar-format-align-right
;; tab-bar-format-global
(setopt tab-bar-format '(tab-bar-format-history
                         tab-bar-format-tabs-groups
                         tab-bar-separator
                         tab-bar-format-add-tab))

(setopt tab-bar-tab-hints nil ;; Show tab numbers.
        tab-bar-close-button-show nil)

;; (setopt tab-bar-show 1) ;; Hide tab bar if only 1 tabs open.
(setopt tab-bar-show t) ;; Always show tab bar.

;; (setopt tab-bar-new-tab-choice "*dashboard*")

(setopt isearch-lazy-count t
        isearch-lazy-highlight t)

(use-package recentf
  :after no-littering
  :custom
  (recentf-max-menu-items 100)
  (recentf-max-saved-items 100)
  :init (recentf-mode)
  :config
  ;; Exclude all files in the no-littering directories:
  (let ((var (recentf-expand-file-name no-littering-var-directory))
        (etc (recentf-expand-file-name no-littering-etc-directory)))
    (my/add-to-list 'recentf-exclude '(var etc)))
  ;; ;; Save recentf list into file every 10 minutes.
  ;; (run-at-time nil 600 'recentf-save-list)
  )

(use-package savehist
  :after no-littering
  :custom (savehist-additional-variables '(register-alist))
  :init (savehist-mode))

(setopt outline-minor-mode-cycle nil)

;; (setopt outline-minor-mode-use-buttons 'in-margins)
(setopt outline-minor-mode-use-buttons t)

(use-package bufler
  :ensure t
  :custom
  (bufler-columns '("Name" "Size" "Path"))
  :config
  (my/remove-from-list 'bufler-filter-buffer-modes
                       'fundamental-mode)
  (my/add-to-list 'bufler-filter-buffer-modes
                  '(org-roam-mode
                    helpful-mode
                    ;; magit-status-mode magit-refs-mode magit-log-mode
                    mu4e-main-mode))
  (my/add-to-list 'bufler-filter-buffer-name-regexps
                  '("\\*EGLOT")))

(use-package evil-xkbswitch
  :vc (:fetcher github :repo "linktohack/evil-xkbswitch")
  :after evil
  :diminish evil-xkbswitch-mode
  :config
  ;; If you use GNOME:
  (setq evil-xkbswitch-set-layout "g3kb-switch -s"
        evil-xkbswitch-get-layout "g3kb-switch")
  (evil-xkbswitch-mode))

(setq use-default-font-for-symbols nil)

;; (add-to-list 'default-frame-alist '(font . FONT))

(set-face-attribute 'default nil :font "Inconsolata LGC" :height 125)
;; (set-face-attribute 'default nil :font "Roboto Mono" :height 125)
;; (set-face-attribute 'default nil :font "Monego" :height 125)

(use-package all-the-icons
  :ensure t
  :when (display-graphic-p)
  ;; :when window-system
  :config
  (let ((cache (expand-file-name ".all-the-icons-font-installed" user-emacs-directory)))
    (unless (file-exists-p cache)
      (all-the-icons-install-fonts t)
      (with-temp-buffer (write-file cache)))))

(set-fontset-font t '(?\xf0001 . ?\xf1af0) "Symbols Nerd Font Mono" nil 'prepend)

;; (set-fontset-font t ?\xe876 "Material Design Icons" nil 'prepend)
;; (set-fontset-font t ? "Material Design Icons" nil 'prepend)
;; (set-fontset-font t ? "Material Design Icons Desktop" nil 'prepend)

(set-fontset-font t '(?\x1fb00 . ?\x1fbca) "LegacyComputing" nil 'prepend)
(set-fontset-font t '(?🯰 . ?🯹) "LegacyComputing" nil 'prepend)

;; (set-fontset-font t 'latin "Noto Sans")
;; (set-fontset-font t '(?\xea60 . ?\xec11) "codicon" nil 'prepend)

;; (set-fontset-font t '(? . ?) "codicon")

;; (let ((fontset (face-attribute 'default :fontset)))
;;   (set-fontset-font fontset '(?\xea60 . ?\xec11) "codicon" nil 'append))

;; (set-fontset-font (frame-parameter nil 'font)
;;                   '(?\xea60 . ?\xec11)
;;                   (font-spec :family "codicon"
;;                              :weight nil
;;                              :size nil)
;;                   nil
;;                   'prepend)

(setq-default line-spacing 1)

(use-package ef-themes
  :ensure t
  :custom
  (ef-themes-mixed-fonts t)
  (ef-themes-variable-pitch-ui t)
  :config
  (load-theme 'ef-light :no-confirm)
  ;; (load-theme 'ef-day :no-confirm)
  (set-cursor-color "black")
  (set-face-attribute 'help-key-binding
                      nil
                      :foreground "DarkBlue" :background "grey96"
                      :box '(:line-width (-1 . -1) :color "grey80")
                      :inherit 'fixed-pitch)
  
  ;; (my/set-face-attribute
  ;;  '(help-key-binding :foreground "DarkBlue" :background "grey96"
  ;;                     :box (:line-width (-1 . -1) :color "grey80")
  ;;                     :inherit fixed-pitch))
  (with-eval-after-load 'avy
    (my/set-face-attribute
     '((avy-background-face :foreground "#7e6f8e" :background unspecified)
       (avy-lead-face       :foreground "grey5"   :background "#ffe9b0" :weight bold)
       ;; (avy-lead-face-0     :background "#ffced7" :weight normal)
       (avy-lead-face-0     :background "#ffe2e7" :weight normal)
       (avy-lead-face-1     :foreground "black"   :background "#ffd5ff" :weight normal)
       (avy-lead-face-2     :background "#c1ffc4")))
    ;; (my/set-face-attribute
    ;;  '((avy-lead-face   :foreground "red"   :background unspecified :weight bold)
    ;;    (avy-lead-face-0 :foreground "brown" :background unspecified :weight normal)))
    )
  (with-eval-after-load 'org
    (my/set-face-attribute
     '((org-verbatim :foreground "#4250ef" :background "#f5f5f5")
       (org-code     :foreground "#cf25aa" :background "#f5f5f5")))
    (my/set-face-attribute
     '((org-level-1 :foreground "#375cd8" :weight normal :height 1.09)
       (org-level-2 :foreground "#cf25aa" :weight normal :height 1.09)
       (org-level-3 :foreground "#1f77bb" :weight normal :height 1.09)
       (org-level-4 :foreground "#b65050" :weight normal :height 1.09)
       (org-level-5 :foreground "#6052cf" :weight normal :height 1.09)))
    ;; (my/set-face-attribute
    ;;  `((org-level-1 :foreground "#375cd8" :weight normal :height 1.08
    ;;                 :box (:line-width 4 :color ,(face-background 'default)))
    ;;    (org-level-2 :foreground "#cf25aa" :weight normal :height 1.08
    ;;                 :box (:line-width 4 :color ,(face-background 'default)))
    ;;    (org-level-3 :foreground "#1f77bb" :weight normal :height 1.08
    ;;                 :box (:line-width 4 :color ,(face-background 'default)))
    ;;    (org-level-4 :foreground "#b65050" :weight normal :height 1.08
    ;;                 :box (:line-width 4 :color ,(face-background 'default)))
    ;;    (org-level-5 :foreground "#6052cf" :weight normal :height 1.08
    ;;                 :box (:line-width 4 :color ,(face-background 'default)))))
    (setq org-todo-keyword-faces
          '(("SOMEDAY"    . (:foreground "#6e6e6e"))
            ;; ("TODO"       . (:foreground "#cf7200"))
            ;; ("NEXT"       . (:foreground "#de0000"))
            ("INPROGRESS" . (:foreground "#0076c8"))
            ("WAITING"    . (:foreground "#cf7200"))
            ;; ("DONE"       . (:foreground "#598d3f"))
            ("CANCELLED"  . (:foreground "#63735b"))
            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            ("󰒅" . (:foreground "#7b7b7b"))
            ;; ("󰿦" . (:foreground "#7b7b7b"))
            ;; ("󰔌" . (:foreground "#7b7b7b"))
            ;; ("󰄱" . (:foreground ""))
            ;; ("󱗝" . (:foreground ""))
            ;; ("󰡖" . (:foreground ""))
            ;; ("󰤌" . (:foreground ""))
            ;; ("󱅊" . (:foreground ""))
            ("󰔟" . (:foreground "#0076c8"))
            ;; ("󰄵" . (:foreground ""))
            ("󰅘" . (:foreground "#6e6e6e"))
            ("󱈎" . (:foreground "#6e6e6e"))))
    (setq org-priority-faces
          '((?A :foreground "red"     :weight bold)
            (?B :foreground "orange"  :weight bold)
            (?C :foreground "#7CB342" :weight bold)
            (?D :foreground "#2196F3" :weight bold)
            ;; (?D :foreground "#AB47BC" :weight bold)
            ))
    )
  (with-eval-after-load 'eglot
    (my/set-face-attribute
     '((eglot-highlight-symbol-face :background "grey98"
                                    :box (:line-width (-1 . -1) :color "grey75")
                                    :inherit unspecified)))
    )
  )

(setopt fringe-mode 10)

(use-package page-break-lines
  :ensure t
  :hook (emacs-lisp-mode
         nushell-ts-mode)
  ;; :config
  ;; (global-page-break-lines-mode)
  )

(setopt scroll-margin 0
        auto-window-vscroll nil
        scroll-error-top-bottom nil)

(setopt mouse-wheel-tilt-scroll t
        mouse-wheel-progressive-speed nil)

(setopt scroll-conservatively 101)

(defun with-default-scroll-settings (fun)
  (eval `(define-advice ,fun
             (:around (orig-fun &rest args) scroll-conservatively)
           (-let (((scroll-conservatively) (get 'scroll-conservatively 'standard-value)))
             (apply orig-fun args)))))

(mapcar #'with-default-scroll-settings '(dired-do-find-regexp-and-replace
                                         projectile-replace
                                         projectile-replace-regexp))

(setq jit-lock-stealth-time 1.25) ; Calculate fonts when idle for 1.25 seconds.
(setq jit-lock-stealth-nice 0.2)  ; Seconds between font locking.
(setq jit-lock-chunk-size 4096)

(setq jit-lock-defer-time 0)
(with-eval-after-load 'evil
  (add-hook 'evil-insert-state-entry-hook
            (lambda () (setq jit-lock-defer-time 0.25))
            nil t)
  (add-hook 'evil-insert-state-exit-hook
            (lambda () (setq jit-lock-defer-time 0))
            nil t))

(use-package pixel-scroll
  :hook (after-init . pixel-scroll-precision-mode)
  :custom
  ;; (pixel-scroll-precision-use-momentum nil)
  (pixel-scroll-precision-interpolate-page t)
  (pixel-scroll-precision-interpolate-mice nil)
  (pixel-scroll-precision-large-scroll-height 20.0)
  :config
  (setopt pixel-scroll-precision-interpolation-total-time 0.3)
  
  (let ((num-of-lines 4))
    (evil-define-command my/pixel-scroll-interpolate-line-up (count)
      :repeat nil
      :keep-visual t
      (interactive "p")
      (let* ((pixel-scroll-precision-interpolation-total-time 0.08)
             (pixels-per-line (/ (window-text-height nil t)
                                 (window-text-height)))
             (delta (* pixels-per-line
                       num-of-lines
                       count)))
        (pixel-scroll-precision-interpolate delta nil 1)))
  
    (evil-define-command my/pixel-scroll-interpolate-line-down (count)
      :repeat nil
      :keep-visual t
      (interactive "p")
      (let* ((pixel-scroll-precision-interpolation-total-time 0.08)
             (pixels-per-line (/ (window-text-height nil t)
                                 (window-text-height)))
             (delta (- (* pixels-per-line
                          num-of-lines
                          count))))
        (pixel-scroll-precision-interpolate delta nil 1))))
  
  (evil-define-command my/pixel-scroll-interpolate-half-page-up ()
    "Interpolate a scroll upwards by half page."
    :repeat nil
    :keep-visual t
    (interactive)
    (pixel-scroll-precision-interpolate (/ (window-text-height nil t) 2)
                                        nil 1))
  
  (evil-define-command my/pixel-scroll-interpolate-half-page-down ()
    "Interpolate a scroll downwards by half page."
    :repeat nil
    :keep-visual t
    (interactive)
    (pixel-scroll-precision-interpolate (- (/ (window-text-height nil t) 2))
                                        nil 1))
  
  (evil-add-command-properties #'pixel-scroll-interpolate-down :repeat nil :keep-visual t)
  (evil-add-command-properties #'pixel-scroll-interpolate-up   :repeat nil :keep-visual t)
  
  (general-def
    [remap evil-scroll-down]      'my/pixel-scroll-interpolate-half-page-down ; C-d
    [remap evil-scroll-up]        'my/pixel-scroll-interpolate-half-page-up   ; C-u
    [remap evil-scroll-page-down] 'pixel-scroll-interpolate-down              ; C-f
    [remap evil-scroll-page-up]   'pixel-scroll-interpolate-up                ; C-b
    [remap evil-scroll-line-down] 'my/pixel-scroll-interpolate-line-down      ; C-e
    [remap evil-scroll-line-up]   'my/pixel-scroll-interpolate-line-up)       ; C-y
  
  ;; (general-def :keymaps 'help-mode-map :states 'normal
  ;;   "C-f" 'pixel-scroll-interpolate-down
  ;;   "C-b" 'pixel-scroll-interpolate-up)
  )

(setopt truncate-lines t)

(use-package display-line-numbers
  :custom
  ;; (display-line-numbers-width 4)
  (display-line-numbers-grow-only t)
  (display-line-numbers-width-start t)
  :hook (prog-mode . display-line-numbers-mode))

(use-package display-fill-column-indicator
  :hook prog-mode)

(column-number-mode)

(use-package doom-modeline
  :ensure t
  ;; :elpaca (:host github :repo "seagle0128/doom-modeline"
  ;;                ;; :ref "aa0e2dd"
  ;;                :ref "379b45bffe7d67683f17c3e815797a082d8793d3")
  :init
  (setq doom-modeline-support-imenu t)
  :custom
  (doom-modeline-height 27)
  (doom-modeline-buffer-file-name-style 'relative-from-project)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-time-icon t)
  (doom-modeline-highlight-modified-buffer-name nil)
  :config
  (doom-modeline-mode))

(use-package easy-escape
  :ensure t
  :custom
  (easy-escape-character ?⧵) ;; REVERSE SOLIDUS OPERATOR
  ;; (easy-escape-character ?⧹) ;; BIG REVERSE SOLIDUS
  ;; (easy-escape-character ?＼) ;; FULLWIDTH REVERSE SOLIDUS
  :hook (emacs-lisp-mode . easy-escape-minor-mode))

(use-package rainbow-mode
  :ensure t
  :hook (emacs-lisp-mode conf-space-mode fish-mode conf-toml-mode toml-ts-mode))

(use-package leerzeichen
  :ensure t)

(setopt prettify-symbols-unprettify-at-point t)

(use-package evil
  :ensure t
  :preface
  (setq evil-want-keybinding nil)
  :init (evil-mode)
  :custom
  ;; Needed for evil-collection.
  (evil-want-integration t)
  (evil-want-keybinding nil)

  (evil-want-C-u-scroll t)
  (evil-want-C-d-scroll t)
  (evil-want-C-i-jump t)
  (evil-want-C-u-delete t)
  (evil-respect-visual-line-mode t)
  ;; (evil-want-minibuffer t)
  (evil-want-fine-undo t)
  (evil-undo-system 'undo-redo)
  (evil-overriding-maps nil)
  (evil-move-beyond-eol t)
  ;; (evil-ex-complete-emacs-commands 'always)
  (evil-shift-round t)
  (org-return-follows-link t)
  (evil-vsplit-window-right t)
  (evil-split-window-below t)

  :config

  ;;; Make `Y' work as `y$'.
  ;;; Set it here explicitly, because it doesn't work if set in `custom' section.
  (setopt evil-want-Y-yank-to-eol t)

  ;; (setopt evil-search-module 'isearch)
  (setopt evil-search-module 'evil-search)

  ;;; Bind `:ls' command to `bufler' (`ibuffer') instead of `list-buffers'.
  (evil-ex-define-cmd "ls" 'bufler)
  ;; (evil-ex-define-cmd "ls" 'ibuffer-jump)

  ;;; Paste and indent before/after.
  (defun my/paste-and-indent-before ()
    (interactive)
    (with-undo-amalgamate
      (evil-paste-before 1)
      (evil-indent (evil-get-marker ?\[)
                   (evil-get-marker ?\]))))

  (defun my/paste-and-indent-after ()
    (interactive)
    (with-undo-amalgamate
      (evil-paste-after 1)
      (evil-indent (evil-get-marker ?\[)
                   (evil-get-marker ?\])))))

(with-eval-after-load 'evil
 ;; (advice-add :after 'evil-window-vsplit)
 (evil-define-command my/evil-save-modified-buffer-and-kill-it (file &optional bang)
   "Save the current buffer and kill it"
   :repeat nil
   (interactive "<f><!>")
   (when (buffer-modified-p)
     (evil-write nil nil nil file bang))
   (kill-this-buffer)
   ;; (ibuffer)
   (bufler)))

(use-package evil-collection
  :ensure t
  :after evil
  :custom
  ;; SPC is my leader key, so forbid evil-collection to bind to it.
  (evil-collection-key-blacklist '("SPC"))
  (evil-collection-setup-minibuffer t)
  (evil-collection-corfu-key-themes '(default tab-n-go))
  :config
  (evil-collection-init))

(use-package evil-easymotion
  :ensure t
  :after (avy evil)
  :config
  (evil-define-avy-motion avy-goto-word-0-above exclusive)
  (evil-define-avy-motion avy-goto-word-0-below exclusive)
  (evilem-make-motion evilem-motion-forward-WORD-begin  #'evil-forward-WORD-begin)
  (evilem-make-motion evilem-motion-backward-WORD-begin #'evil-backward-WORD-begin)
  (evilem-make-motion evilem-motion-forward-word-end    #'evil-forward-word-end)
  (evilem-make-motion evilem-motion-forward-WORD-end    #'evil-forward-WORD-end)
  (general-def :keymaps 'semicolon-leader-map
    "w"  #'evil-avy-goto-word-0-below
    "W"  #'evilem-motion-forward-WORD-begin
    "b"  #'evil-avy-goto-word-0-above
    "B"  #'evilem-motion-backward-WORD-begin
    "e"  #'evilem-motion-forward-word-end
    "E"  #'evilem-motion-forward-WORD-end
    "ge" #'evilem-motion-backward-word-end
    "gE" #'evilem-motion-backward-WORD-end
    "j"  #'evilem-motion-next-visual-line
    "k"  #'evilem-motion-previous-visual-line))

(use-package evil-snipe
  :ensure t
  :after evil-collection
  :custom
  (evil-snipe-scope 'whole-visible)
  (evil-snipe-override-evil-repeat-keys nil)
  (evil-snipe-smart-case t)
  :config
  (evil-snipe-mode)
  (evil-snipe-override-mode)
  (my/add-to-list
   'evil-snipe-disabled-modes '(telega-root-mode
                                pdf-view-mode
                                ;; helpful-mode
                                magit-mode ;; magit-status-mode
                                nov-mode))
  (general-def :keymaps 'evil-snipe-parent-transient-map
    "n" 'evil-snipe-repeat
    "N" 'evil-snipe-repeat-reverse
    "<tab>"     'evil-snipe-repeat
    "<backtab>" 'evil-snipe-repeat-reverse)

  ;; Integration with evil-easymotion
  (with-eval-after-load 'evil-easymotion
    (general-def :keymaps 'evil-snipe-parent-transient-map
      ";" (evilem-create 'evil-snipe-repeat
                         :bind ((evil-snipe-scope 'buffer)
                                (evil-snipe-enable-highlight nil)
                                (evil-snipe-enable-incremental-highlight nil))
                         :post-hook #'evil-snipe--cleanup))))

(use-package evil-visualstar
  :ensure t
  :after evil
  :config (global-evil-visualstar-mode))

(use-package evil-cleverparens
  :ensure t
  :after evil
  :hook lisp-data-mode
  :custom
  (evil-cleverparens-use-s-and-S nil)
  (evil-cleverparens-drag-ignore-lines t)
  :config

  (evil-define-motion my/evil-cp-forward-sexp (count)
    "Motion for moving forward by a sexp."
    :type exclusive
    (let ((count (or count 1)))
      (when (evil-eolp)
        (forward-char))
      (forward-sexp count)
      (forward-sexp)
      (backward-sexp)))

  (evil-define-motion my/evil-cp-backward-sexp (count)
    "Motion for moving backwward by a sexp."
    :type exclusive
    (let ((count (or count 1)))
      (backward-sexp count)))

  (evil-define-motion my/evil-cp-up-sexp (count)
    "Move the cursor to the nearest paired closing bracket."
    :move-point nil
    :type inclusive
    (let ((count (or count 1)))
      (when (evil-cp--looking-at-any-opening-p)
        (evilmi-jump-items)
        (setq count (- count 1)))
      (when (> count 0)
        (when (evil-cp--looking-at-any-closing-p)
          (forward-char))
        (and (sp-up-sexp count)
             (backward-char))))))

(use-package evil-goggles
  :ensure t
  :after (evil evil-cleverparens)
  ;; :custom
  ;; (evil-goggles-duration 0.100) ; default is 0.200
  ;; (evil-goggles-enable-delete nil)
  ;; (evil-goggles-enable-change nil)
  :config

  ;;; Add `evil-cleverparens' support
  (progn
    (defvar my/evil-cp-goggles-commands
      '((evil-cp-delete      :face evil-goggles-delete-face :switch t :advice evil-goggles--generic-blocking-advice)
        (evil-cp-delete-line :face evil-goggles-delete-face :switch t :advice evil-goggles--delete-line-advice)
        (evil-cp-yank        :face evil-goggles-yank-face   :switch t :advice evil-goggles--generic-async-advice)
        (evil-cp-yank-line   :face evil-goggles-yank-face   :switch t :advice evil-goggles--generic-async-advice)
        (evil-cp-change      :face evil-goggles-change-face :switch t :advice evil-goggles--generic-blocking-advice)
        (evil-cp-change-line :face evil-goggles-change-face :switch t :advice evil-goggles--generic-blocking-advice)))
    (my/add-to-list 'evil-goggles--commands my/evil-cp-goggles-commands :append))

  (evil-goggles-mode)

  ;; Use diff-mode's faces; deleted text will be highlighed with `diff-removed',
  ;; other faces such as `diff-added' will be used for other actions.
  (evil-goggles-use-diff-faces))

(use-package evil-org
  ;; :ensure t
  :load-path "~/code/emacs/evil-org-mode"
  :after evil-collection
  :hook
  (org-mode . evil-org-mode)
  (org-agenda-mode . (lambda ()
                       (require 'evil-org-agenda)
                       (evil-org-agenda-set-keys)))
  :config
  (evil-org-set-key-theme '(operators
                            textobjects
                            insert
                            ;; navigation
                            additional
                            ;; shift
                            todo
                            ;; heading
                            )))

(use-package evil-anzu
  :ensure t
  :after (evil anzu))

(use-package evil-nerd-commenter
  :ensure t
  :after evil-collection
  :config
  (setopt evilnc-comment-text-object "c")
  (keymap-set evil-inner-text-objects-map evilnc-comment-text-object #'evilnc-inner-commenter)
  (keymap-set evil-outer-text-objects-map evilnc-comment-text-object #'evilnc-outer-commenter)
  (general-def :states 'motion
    "gc" 'evilnc-comment-operator))

(use-package better-jumper
  :ensure t
  :after evil-collection
  :custom
  (better-jumper-context 'window)
  (better-jumper-new-window-behavior 'copy)
  (better-jumper-add-jump-behavior 'append)
  :config
  (better-jumper-mode)
  (general-def
    [remap evil-jump-backward] 'better-jumper-jump-backward
    [remap evil-jump-forward]  'better-jumper-jump-forward
    "<tab>" 'indent-for-tab-command))

(use-package evil-surround
  :ensure t
  :after evil
  :init (global-evil-surround-mode)
  :config
  (add-hook 'c++-ts-mode-hook
            (lambda ()
              (my/add-to-list 'evil-surround-pairs-alist
                              '((?< . ("< " . " >"))
                                (?> . ("<" . ">"))))))
  (add-hook 'org-mode-hook
            (lambda ()
              (my/add-to-list 'evil-surround-pairs-alist
                              '((?* . ("*" . "*"))
                                (?/ . ("/" . "/"))
                                (?_ . ("_" . "_"))
                                (?+ . ("+" . "+"))
                                (?= . ("=" . "="))
                                (?~ . ("~" . "~"))))))
  (add-hook 'emacs-lisp-mode-hook
            (lambda ()
              (push '(?` . ("`" . "'")) evil-surround-pairs-alist))))

(use-package evil-matchit
  :ensure t
  :after evil-collection
  :init (global-evil-matchit-mode))

(use-package evil-fringe-mark
  :ensure t
  :hook (after-init . global-evil-fringe-mark-mode)
  ;; :config
  ;; (setq left-fringe-width 16)
  )

(use-package vertico
  :ensure t
  :after better-defaults
  :custom
  (vertico-count 14) ;; How many candidates to show.
  (vertico-scroll-margin 2)
  (vertico-cycle nil)
  (vertico-resize 'grow-only) ;; Grow and shrink the Vertico minibuffer.
  (read-extended-command-predicate #'command-completion-default-include-p)
  (enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode t)
  (read-file-name-completion-ignore-case t)
  (read-buffer-completion-ignore-case t)
  (completion-ignore-case t)
  :config
  (ido-mode -1)
  (vertico-mode)
  (defun my/crm-indicator (args)
    "Add prompt indicator to `completing-read-multiple'.
  We display [CRM<separator>], e.g., [CRM,] if the separator is a comma."
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'"
                                            ""
                                            crm-separator)
                  (car args))
          (cdr args)))
  
  (advice-add #'completing-read-multiple :filter-args #'my/crm-indicator)
  (setq minibuffer-prompt-properties '(read-only t
                                       cursor-intangible t
                                       face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  (use-package vertico-repeat
    :after vertico
    :config
    ;; (keymap-global-set "M-r" #'vertico-repeat)
    (add-hook 'minibuffer-setup-hook #'vertico-repeat-save))
  (use-package vertico-directory
    :after vertico
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
  )

(use-package consult
  :ensure t
  :init
  (setq completion-in-region-function #'consult-completion-in-region)
  :config
  (with-eval-after-load 'evil
   (defun my/kill-on-paste (str &optional arg)
     "Delete the region before inserting poped string."
     (when (eq evil-state 'visual)
       (kill-region (region-beginning) (region-end))))
  
   (advice-add 'consult-yank-from-kill-ring :before #'my/kill-on-paste)))

(use-package consult-dir
  :ensure t
  :bind ("C-x C-d" . consult-dir))

(use-package marginalia
  :ensure t
  :init (marginalia-mode))

(use-package nerd-icons-completion
  :ensure t
  :hook (marginalia-mode . nerd-icons-completion-marginalia-setup)
  :init (nerd-icons-completion-mode))

(use-package corfu
  :ensure t
  :custom
  (completion-cycle-threshold 3)
  (tab-always-indent 'complete)
  (tab-first-completion nil)
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-separator ?\s)          ;; Orderless field separator
  (corfu-auto-prefix 3)
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin
  :config
  (global-corfu-mode)
  (defun corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer if `completion-at-point' is bound."
    (when (where-is-internal #'completion-at-point
                             (list (current-local-map)))
      (setq-local corfu-auto t ;; Enable/disable auto completion
                  corfu-echo-delay t ;; Disable automatic echo and popup
                  corfu-auto-prefix 2
                  corfu-popupinfo-delay nil)
      (corfu-mode)))
  
  (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)
  (defun corfu-move-to-minibuffer ()
    (interactive)
    (when completion-in-region--data
      (let ((completion-extra-properties corfu--extra)
            completion-cycle-threshold
            completion-cycling)
        (apply #'consult-completion-in-region completion-in-region--data))))
  
  (keymap-set corfu-map "M-m" #'corfu-move-to-minibuffer)
  (add-to-list 'corfu-continue-commands #'corfu-move-to-minibuffer)
  (use-package corfu-history
    :config (corfu-history-mode))
  (use-package corfu-popupinfo
    :custom (corfu-popupinfo-delay (cons 0.5 0.5))
    :config (corfu-popupinfo-mode))
  (use-package corfu-info))

(use-package kind-icon
  :ensure t
  :after corfu
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

(use-package dabbrev
  :custom
  (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'"))
  :config
  (general-def
    "M-/"   'dabbrev-completion
    "C-M-/" 'dabbrev-expand))

(use-package cape
  :ensure t
  :config
  (my/add-to-list 'completion-at-point-functions
                  '(;; cape-line
                    ;; cape-symbol
                    ;; cape-dict
                    ;; cape-abbrev
                    ;; cape-rfc1345
                    ;; cape-sgml
                    cape-tex
                    cape-keyword
                    cape-history
                    ;; cape-elisp-block
                    cape-file
                    cape-dabbrev
                    ;; dabbrev-capf ; Emacs 29 built-in
                    ))
  (general-def
    "C-c p p" 'completion-at-point ; capf
    "C-c p t" 'complete-tag        ; etags
    "C-c p d" 'cape-dabbrev        ; or dabbrev-completion
    "C-c p h" 'cape-history
    "C-c p f" 'cape-file
    "C-c p k" 'cape-keyword
    "C-c p s" 'cape-symbol
    "C-c p a" 'cape-abbrev
    "C-c p l" 'cape-line
    "C-c p w" 'cape-dict
    "C-c p \\" 'cape-tex
    "C-c p _" 'cape-tex
    "C-c p ^" 'cape-tex
    "C-c p &" 'cape-sgml
    "C-c p r" 'cape-rfc1345)
  )

(use-package orderless
  :ensure t
  :config
  (setq completion-styles '(orderless basic))
  ;; (setq completion-styles '(substring orderless))
  ;; (setq completion-styles '(flex)) ;; fuzzy search
  (setq orderless-component-separator #'orderless-escapable-split-on-space)
  (setq orderless-matching-styles '(orderless-initialism
                                    orderless-prefixes
                                    orderless-regexp))
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-category-defaults nil)
  (setq completion-category-overrides '((file (styles . (partial-completion)))))
  )

(setopt fill-column 80
        comment-empty-lines t
        require-final-newline 'visit-save
        sentence-end-double-space nil)

(electric-pair-mode)

(add-hook 'org-mode-hook
          (lambda ()
            (setq-local electric-pair-inhibit-predicate
                        (lambda (c)
                          (if (char-equal c ?<)
                              t
                            (electric-pair-default-inhibit c))))))

(delete-selection-mode)

(use-package flyspell
  :custom
  (flyspell-issue-message-flag nil))

(use-package flyspell-correct
  :ensure t
  ;; :hook ((markdown-mode . flyspell-mode)
  ;;        (org-mode . flyspell-mode)
  ;;        (text-mode . flyspell-mode))
  )

(use-package flyspell-correct-popup
  :ensure t
  :after flyspell-correct)

(setopt hs-hide-comments-when-hiding-all nil)

;; Don’t break after the first word of a sentence or before the last
(add-hook 'fill-nobreak-predicate #'fill-single-word-nobreak-p)

;; Don’t break after a one-letter word preceded by a whitespace character
(add-hook 'fill-nobreak-predicate #'fill-single-char-nobreak-p)

(use-package ws-butler
  :ensure t
  :config
  (ws-butler-global-mode))

(when (executable-find "par")
  (defun my/par-fill-region (begin end par-option)
    "Use `par' executable to fill region between BEGIN and END.

- With C-u also justify the text.
- With C-u C-u try to make all lines of almost equal lengths instead
  of justifying.

If PAR-OPTION is \\='(4) `\\[universal-argument]', also justify the text.
If PAR-OPTION is \\='(16) `\\[universal-argument] \\[universal-argument]', try to
make all lines of almost equal lengths instead of justifying.

See `man par' for more information."
    (interactive "r\nP")
    (let* ((width-str (number-to-string fill-column))
           (err-buf "*par Error*")
           (par-cmd
            (concat "par "
                    "w" width-str " " ; set fill width
                    ;; Body characters: . , ? upper-case lower-case
                    (shell-quote-argument "B=.,?_A_a") " "
                    ;; Quote characters: space > | <comment-start char>
                    (shell-quote-argument
                     (concat "Q=_s>|" (when comment-start comment-start))) " "
                    ;; Allow bodiless characters like *, space, .. to inc/dec by
                    ;; up to 10 characters to adjust line width.
                    "r10"
                    "T4" ; Expand tab chars to 4 spaces
                    ;; Prefixes may not contain any trailing body characters, and
                    ;; suffixes may not contain any leading body characters
                    "b"
                    "h2"
                    "e1" ; Expel/remove superfluous lines
                    (when (equal '(16) par-option)
                      "f") ; Try to make all lines of nearly the same length
                    "g" ; Make a better guess at inserting line breaks
                    (when (equal '(4) par-option)
                      "j") ; Justify the lines by inserting spaces between words
                    "q" ; Insert blank lines before/after quoted text
                    "R" ; Throw an error if a word length exceeds the fill width
                    "E" ; Send error to stderr instead of stdout
                    ))
           (before-text (buffer-substring-no-properties begin end))
           par-ret
           ;; Do the formatting in a temp buffer so that the text in the original
           ;; buffer doesn't get corrupted in case `par' fails due to some error.
           (after-text (with-temp-buffer
                         (insert before-text)
                         (setq par-ret (shell-command-on-region
                                        (point-min) (point-max)
                                        par-cmd nil :replace
                                        err-buf :display-error-buffer))
                         (buffer-substring-no-properties (point-min) (point-max)))))
      ;; If 1 is returned, error occurred in the cmd execution; 0 - no error
      (if (= 1 par-ret)
          (progn
            ;; Switch to the error buffer
            (switch-to-buffer-other-window err-buf)
            (special-mode)) ; Set this mode so that you can quit it quickly using C-u q
        ;; If no error occurred, do below in the original buffer
        (delete-region begin end)
        (insert after-text))
      (message "Executed `%s' on the region" par-cmd))))

(setq-default electric-indent-inhibit t)

(use-package dtrt-indent
  :ensure t
  :hook
  ((c-mode c++-mode c-ts-mode c++-ts-mode) . dtrt-indent-mode)
  ;; :config
  ;; (dtrt-indent-global-mode)
  )

(use-package ansi-color
  :custom (ansi-color-for-compilation-mode t)
  :hook (compilation-filter . ansi-color-compilation-filter))

(setq project-vc-extra-root-markers
      '(".projectile" ".project"))

(use-package projectile
  :ensure t
  :custom
  (projectile-auto-discover t)
  (projectile-project-search-path '("~"))
  :init (projectile-mode))

(use-package consult-projectile
  :ensure t
  :after projectile
  :bind (([remap projectile-switch-to-buffer] . consult-projectile-switch-to-buffer)
         ([remap projectile-find-dir] . consult-projectile-find-dir)
         ([remap projectile-find-file] . consult-projectile-find-file)
         ([remap projectile-recentf] . consult-projectile-recentf)
         ;; ([remap projectile-switch-project] . consult-projectile-switch-project)
         ([remap projectile-switch-project] . consult-projectile)))

;; The multiview includes initially buffers, files and known projects.  To include
;; recent files and directires add `consult-projectile--source-projectile-dir' and/or
;; `consult-projectile--source-projectile-recentf' to `consult-projectile-sources'.

(use-package eglot
  :hook
  ((;; c-mode c++-mode
    c-ts-mode c++-ts-mode
    cmake-mode cmake-ts-mode) . eglot-ensure)
  :custom
  (eglot-autoshutdown t)
  (eglot-extend-to-xref t)
  (eglot-events-buffer-size 0) ; Don't use event's buffer.
  (eglot-report-progress t)
  (eglot-send-changes-idle-time 1.2)
  (eglot-ignored-server-capabilities '(:documentOnTypeFormattingProvider))
  :config
  (defun my/eglot-managed-buffer-setup ()
    (if (eglot-managed-p)
        (progn
          (setq-local eldoc-idle-delay 0.5
                      eldoc-echo-area-use-multiline-p t
                      flymake-no-changes-timeout 0.5)
          (use-local-map eglot-mode-map))
      ;; Eglot stops managing buffer
      (mapc #'kill-local-variable '(eldoc-idle-delay
                                    eldoc-echo-area-use-multiline-p
                                    flymake-no-changes-timeout))))
  
  (add-hook 'eglot-managed-mode-hook #'my/eglot-managed-buffer-setup)
  ;; (add-to-list 'eglot-stay-out-of 'eldoc)
  (defun my/eglot-capf ()
    (setq-local completion-at-point-functions '(#'cape-capf-super
                                                #'eglot-completion-at-point
                                                ;; #'tempel-expand
                                                #'cape-file)))
  
  (add-hook 'eglot-managed-mode-hook #'my/eglot-capf)
  (define-advice eldoc-doc-buffer (:after (_) prettify-eldoc-buffer)
    (with-current-buffer eldoc--doc-buffer
      (setq-local fill-column 90)
      (visual-line-mode)
      (virtual-auto-fill-mode)
      ;; (eldoc-box--prettify-markdown-separator)
      (eldoc-box--replace-en-space)
      ;; (eldoc-box--remove-linked-images)
      ;; (eldoc-box--remove-noise-chars)
      ;; (eldoc-box--fontify-html)
      ;; (eldoc-box--condense-large-newline-gaps)
      ))
  (add-to-list 'eglot-server-programs
               '((c++-mode c++-ts-mode)
                 . (;; "emacs-lsp-booster" ;; in case I start to use emacs-lsp-booster
                    "clangd"
                    "--compile-commands-dir=debug"
                    "--background-index"
                    "--suggest-missing-includes"
                    "--pch-storage=memory"
  
                    ;; bounded  :: Similar completion items (e.g. function overloads) are
                    ;;             combined.  Type information shown where possible.
                    ;; detailed :: One completion item for each semantically distinct
                    ;;             completion, with full type information.
                    "--completion-style=bundled")))
  (dolist (mode '(cmake-mode cmake-ts-mode))
    (add-to-list 'eglot-server-programs
                 `(,mode . ("neocmakelsp" "--stdio"))))
  )

(use-package eldoc-box
  :ensure t
  :autoload (eldoc-box--replace-en-space
             eldoc-box--prettify-markdown-separator
             eldoc-box--remove-linked-images
             eldoc-box--remove-noise-chars
             eldoc-box--fontify-html
             eldoc-box--condense-large-newline-gaps)
  :after eglot
  :config
  (my/add-to-list 'eldoc-box-self-insert-command-list
                  '(evil-force-normal-state)))

(setopt
 flymake-start-on-save-buffer t)

(dolist (hook '(flymake-diagnostics-buffer-mode-hook
                flymake-project-diagnostics-mode-hook))
  (add-hook hook #'hl-line-mode))

(use-package consult-eglot
  :ensure t
  :after eglot)

(use-package breadcrumb
  :ensure t
  :hook
  ((c-mode c++-mode c-ts-mode c++-ts-mode) . breadcrumb-local-mode))

(setopt xref-auto-jump-to-first-definition 'show)

(use-package avy
  :ensure t
  :custom
  (avy-background t)
  (avy-keys (number-sequence ?a ?z)) ;; Any lower-case letter a-z.
  ;; (avy-words)
  (avy-style 'at-full)
  (avy-all-windows nil))

(use-package anzu
  :ensure t
  :init (global-anzu-mode)
  :config
  (general-def
    [remap query-replace]                'anzu-query-replace
    [remap query-replace-regexp]         'anzu-query-replace-regexp
    [remap isearch-query-replace]        'anzu-isearch-query-replace
    [remap isearch-query-replace-regexp] 'anzu-isearch-query-replace-regexp))

(use-package expand-region
  :ensure t
  :after evil-collection
  :custom
  (expand-region-contract-fast-key "C-v")
  :config
  (general-def :states 'visual
    "v" 'er/expand-region))

;; (defun my/collapse-region ()
;;   (interactive)
;;   (er/expand-region -1))
;; (general-def :states 'visual
;;   "v" 'er/expand-region
;;   "C-v" 'my/collapse-region)

(use-package zoxide
  :ensure t
  :bind (:map leader-map
         ("fz" . zoxide-find-file)))

(use-package origami
  :ensure t
  :after evil
  ;; :custom
  ;; (origami-show-fold-header t) ;; highlight fold headers
  ;; :init (global-origami-mode)
  :config
  ;; (setq origami-fold-style 'triple-braces)
  (general-def :keymaps 'origami-mode-map :states 'normal
    "z j" 'origami-forward-fold
    "z k" 'origami-previous-fold))

(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package rg
  :ensure t)

(use-package fzf
  :ensure t
  :custom
  ;; (fzf/args "-x --color bw --print-query --margin=1,0 --no-hscroll")
  ;; (fzf/executable "fzf")
  (fzf/git-grep-args "-i --line-number %s")
  ;; command used for `fzf-grep-*` functions
  ;; example usage for ripgrep:
  (fzf/grep-command "rg --files --no-ignore --hidden --follow -g \"!{.git,node_modules}\" 2> /dev/null'")
  ;; If nil, the fzf buffer will appear at the top of the window
  (fzf/position-bottom t)
  (fzf/window-height 20)
  :config
  (defun my/fzf-curdir ()
    (interactive)
    (fzf-find-file-in-dir  default-directory))
  (defun my/fzf-home ()
    (interactive)
    (fzf-find-file-in-dir (getenv "HOME")))
  (my/which-key-set-command-description
   'my/fzf-curdir "fzf"
   'my/fzf-home   "fzf-home")
  )

(use-package vundo
  :ensure t
  ;; :vc (:fetcher github :repo "casouri/vundo")
  :custom
  (vundo-glyph-alist vundo-unicode-symbols)
  ;; (vundo-roll-back-on-quit nil)
  (vundo-compact-display nil)
  :config
  (general-def :states 'normal
    "U" 'vundo))

(use-package separedit :ensure t
  :custom
  ;; Default major-mode for edit buffer can also be other mode e.g. ‘org-mode’.
  (separedit-default-mode 'markdown-mode)
  (separedit-preserve-string-indentation t)
  (separedit-continue-fill-column t)
  (separedit-write-file-when-execute-save t)
  (separedit-remove-trailing-spaces-in-comment t)
  :config
  ;; ;; Key binding for modes you want edit or simply bind ‘global-map’ for all.
  (general-def :keymaps 'global-map :states 'normal
    "z'" 'separedit)
  ;; (general-def :keymaps 'prog-mode-map :states 'normal
  ;;   "z'" 'separedit)
  ;; (general-def :keymaps 'minibuffer-local-map :states 'normal
  ;;   "z'" 'separedit)
  ;; (general-def :keymaps 'help-mode-map :states 'normal
  ;;   "z'" 'separedit)
  ;; (general-def :keymaps 'helpful-mode-map :states 'normal
  ;;   "z'" 'separedit)
  ;; (with-eval-after-load 'obsidian
  ;;   (general-def :keymaps 'obsidian-mode-map :states 'normal
  ;;     "z'" 'separedit))

  ;; (general-def :keymaps 'separedit-mode-map :states 'normal
  ;;   "ZZ" 'separedit-commit
  ;;   "ZQ" 'separedit-abort)
  (general-def :keymaps 'separedit-mode-map :states 'normal
    [remap edit-indirect-commit] 'separedit-commit))

(use-package restart-emacs
  :ensure t
  :commands (restart-emacs  restart-emacs-start-new-emacs))

(use-package org
  :custom
  ;; (org-fold-catch-invisible-edits 'smart)
  (org-fold-catch-invisible-edits 'show-and-error)
  (org-startup-indented t)
  (org-cycle-global-at-bob t)
  (org-special-ctrl-a/e t)
  (org-tags-column -80)
  (org-imenu-depth 8)
  (org-startup-with-inline-images t)
  (org-image-actual-width '(400))
  ;; (org-src-window-setup 'split-window-right)
  (org-src-window-setup 'current-window) ; edit in current window
  (org-edit-src-content-indentation 0)
  (org-src-preserve-indentation nil)
  (org-src-tab-acts-natively nil)
  ;; (org-return-follows-link t)
  ;; (org-tab-follows-link t)
  (org-use-speed-commands nil)
  ;; (org-log-state-notes-into-drawer t)
  (org-link-descriptive t)
  (org-ctrl-k-protect-subtree t)
  (org-id-locations-file-relative t)
  ;; (org-indirect-buffer-display 'current-window)
  (org-list-allow-alphabetical t)
  (org-log-into-drawer t)
  ;; (org-startup-folded 'content)
  (org-startup-folded 'show2levels)
  (org-use-property-inheritance t)
  (org-src-fontify-natively t)
  (org-fontify-whole-heading-line t)
  (org-fontify-done-headline t)
  (org-fontify-quote-and-verse-blocks t)
  (org-log-done 'time) ; Track time when tasks were finished.
  (org-deadline-warning-days 14)
  (org-log-redeadline 'note)
  (org-log-reschedule nil)
  (org-pretty-entities t)
  ;; (org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+")))
  ;; (org-list-indent-offset 1)
  ;; (org-cycle-include-plain-lists 'integrate)
  (org-attach-store-link-p t)
  (org-attach-dir-relative t)
  (org-attach-id-dir "data/")
  ;; (org-attach-use-inheritance nil)
  (org-attach-auto-tag "ATTACH")
  (org-todo-keywords
   '((sequence ;; "󰔌"  ; SOMEDAY
               "󰒅"  ; SOMEDAY
               "󰄱"  ; TODO
               "󰡖"  ; NEXT
               ;; "󰤌"  ; IN PROCESS
               "󱅊"  ; IN PROGRESS
               "󱗝"  ; IN PROGRESS
               "󰔟"  ; WAITING
               "|"
               "󰄵"  ; DONE
               "󱈎"  ; ARCHIVED
               "󰅘") ; CANCELLED
     (sequence "SOMEDAY" "TODO" "NEXT" "IN-PROGRESS" "WAITING" "|"
               "DONE" "ARCHIVED" "CANCELLED")))
  (org-priority-highest ?A)
  (org-priority-lowest  ?D)
  (org-priority-default ?C)
  (org-hierarchical-todo-statistics nil)
  ;; (org-use-tag-inheritance nil)
  (org-tags-exclude-from-inheritance '("project" "main" "index"))
  (org-tags-match-list-sublevels nil)
  (org-footnote-define-inline nil)
  (org-footnote-auto-adjust t)
  (org-confirm-babel-evaluate nil)
  (org-babel-load-languages '((sql . t)
                              (shell . t)
                              (emacs-lisp . t)
                              (python . t)
                              (plantuml . t)))
  (org-plantuml-exec-mode 'plantuml)
  (org-plantuml-jar-path (expand-file-name "~/.nix-profile/lib/plantuml.jar"))
  :config
  (setq org-file-apps '(("\\.pdf\\'" . "xdg-open %s")
                        ;; ("\\.pdf\\'" . "evince %s")
                        ("\\.djvu\\'" . "xdg-open %s")
                        ("\\.\\(?:jpe?g\\|png\\)\\'" . "xdg-open %s")
                        (auto-mode . emacs)
                        (directory . emacs)
                        ("\\.mm\\'" . default)
                        ("\\.x?html?\\'" . default)))
  (set-fontset-font t ?⤵ "DejaVu Serif" nil 'prepend)
  ;; (org-ellipsis " ⤵")
  (setopt org-ellipsis " ")
  ;; (org-ellipsis " 󰇜")
  ;; (org-ellipsis " ")
  (add-hook 'org-babel-after-execute-hook
            (lambda ()
              (when org-inline-image-overlays
                (org-redisplay-inline-images))))
  (with-eval-after-load 'evil
    (define-advice forward-evil-paragraph
        (:around (orig-fun &rest args) use-default-paragraph-definiton-in-org)
      (if (derived-mode-p 'org-mode)
          (let ((paragraph-start    (default-value 'paragraph-start))
                (paragraph-separate (default-value 'paragraph-separate)))
            (apply orig-fun args))
        (apply orig-fun args))))
  ;; ("TODO" . "")
  ;; ("WAIT" . "")
  ;; ("NOPE" . "")
  ;; ("DONE" . "")
  ;; ("[#A]" . "")
  ;; ("[#B]" . "")
  ;; ("[#C]" . "")
  ;; ("[ ]" . "")
  ;; ("[X]" . "")
  ;; ("[-]" . "")
  ;; (":PROPERTIES:" . "")
  ;; (":END:" . "―")
  ;; ("#+STARTUP:" . "")
  ;; ("#+TITLE: " . "")
  ;; ("#+RESULTS:" . "")
  ;; ("#+NAME:" . "")
  ;; ("#+ROAM_TAGS:" . "")
  ;; ("#+FILETAGS:" . "")
  ;; ("#+HTML_HEAD:" . "")
  ;; ("#+SUBTITLE:" . "")
  ;; ("#+AUTHOR:" . "")
  ;; (":Effort:" . "")
  ;; ("SCHEDULED:" . "")
  ;; ("DEADLINE:" . "")
  
  (defun my/org-icons ()
    "Beautify org mode keywords."
    (setq prettify-symbols-alist
          (mapcan (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
                  '(("#+begin_src" . "")
                    ("#+end_src" . "―")
                    ("#+begin_example" . "")
                    ("#+end_example" . "")
                    ("#+begin_quote" . "")
                    ("#+end_quote" . "")
                    ;; ("#+begin_quote" . "")
                    ;; ("#+end_quote" . "")
                    ;; ("#+header:" . ?)
                    ;; ("#+name:" . ?﮸)
                    ;; ("#+results:" . ?)
                    ;; ("#+call:" . ?)
                    ;; (":properties:" . ?)
                    ;; (":logbook:" . ?)
                    )))
    (prettify-symbols-mode)))

(use-package org-superstar
  :ensure t
  :after org
  :custom
  (org-superstar-remove-leading-stars nil)
  (org-superstar-headline-bullets-list '("●"))
  ;; (org-superstar-leading-bullet)
  (org-superstar-item-bullet-alist '((?+ . ?▸)
                                     (?- . ?•)
                                     (?* . ?◆)
                                     ))
  :hook (org-mode . org-superstar-mode))

(use-package org-pretty-tags
  :ensure t
  :after org
  :hook org-mode
  :custom
  (org-pretty-tags-surrogate-strings '(("ATTACH" . "󰁦"))))

(use-package org-roam
  :ensure t
  :after org
  :custom
  (org-roam-directory (file-truename "~/notes"))
  ;; (org-roam-completion-everywhere t)
  ;; (org-id-link-to-org-use-id 'create-if-interactive)
  (org-id-link-to-org-use-id 'use-existing)
  (org-roam-db-gc-threshold most-positive-fixnum)
  (org-roam-node-display-template (concat "${title:*} "
                                          (propertize "${tags:17}" 'face 'org-tag)))
  (org-roam-graph-executable "dot")
  :config
  (org-roam-db-autosync-mode)
  (add-to-list 'org-default-properties "ROAM_EXCLUDE")
  ;; (add-to-list 'display-buffer-alist
  ;;              '("\\*org-roam\\*"
  ;;                (display-buffer-in-direction)
  ;;                (direction . right)
  ;;                (window-width . 0.33)
  ;;                (window-height . fit-window-to-buffer)))
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))
  (defun my/org-roam-create-untracked-node ()
    "Create Org-Roam node with `ROAM_EXCLUDE' property."
    (interactive)
    (org-id-get-create)
    (org-set-property "ROAM_EXCLUDE" "t"))
  )

(use-package org-roam-dailies
  :after org-roam
  :custom
  (org-roam-dailies-directory "journal/")
  ;; (org-roam-dailies-capture-templates
  ;;  '(("d" "default" entry "* %<%I:%M %p>: %?"
  ;;     :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
  )

(use-package consult-org-roam
  :ensure t
  :after org-roam
  :custom
  (consult-org-roam-grep-func #'consult-ripgrep)
  (consult-org-roam-buffer-narrow-key ?r)
  ;; (consult-org-roam-buffer-after-buffers t)
  :config
  (consult-org-roam-mode))

(use-package org-roam-ui
  :ensure t
  :after org-roam
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-follow-mode t)
  (org-roam-ui-open-on-start nil))

(use-package org-contrib
  :ensure t
  :config
  (use-package org-eldoc
    ;; :config (org-eldoc-load)
    ))

(setopt
 ;; org-agenda-window-setup 'reorganize-frame
 org-agenda-window-setup 'other-tab
 org-agenda-restore-windows-after-quit t)

(setopt org-agenda-skip-timestamp-if-done t
        org-agenda-skip-scheduled-if-done nil
        org-agenda-skip-deadline-if-done nil
        org-agenda-include-deadlines t
        org-agenda-include-diary nil
        org-agenda-block-separator 61
        org-agenda-compact-blocks nil
        org-agenda-start-with-log-mode nil)

(setopt org-agenda-prefix-format '((agenda . " %i %-14:c%?-12t% s")
                                   (todo   . " %i %-14:c")
                                   (tags   . " %i %-14:c")
                                   (search . " %i %-14:c")))

(use-package org-super-agenda
  :ensure t
  :after org-agenda
  :defer 2
  :config
  (let ((inhibit-message t))
    (org-super-agenda-mode))
  ;; Fix problem with evil keybindings in org-super-agenda-mode.
  ;; https://github.com/alphapapa/org-super-agenda/issues/50#issuecomment-817432643
  (setopt org-super-agenda-header-map nil))

(setq my/org-super-agenda-groups
      '((:name "Important"
               :priority "A"
               :tag ("money" "bills")
               :property "urgent")
        (:name "Overdue"
               :deadline past
               :order 2)
        (:name "Due Today"
               :deadline today
               :order 3)
        (:name "Current Taks"
               :todo "NEXT"
               :order 4)
        (:name "Work"
               :category "work"
               :order 5)
        (:name "Projects"
               :tag "project"
               :order 6)
        (:name "House"
               :category "house"
               :tag "house"
               :order 6)
        (:name "Subaru"
               :category "car"
               :tag ("car" "subaru")
               :order 6)
        (:name "Personal"
               :habit t
               :tag "personal"
               :order 6)
        ;; (:name "Github"
        ;;        :category "issue"
        ;;        :tag "issue"
        ;;        :order 12)
        ))

(setq org-agenda-custom-commands
      '(("n" "Agenda and all TODOs"
         (;; (agenda "" ((org-agenda-span 7)
          ;;             (org-super-agenda-groups
          ;;              '((:name "Today"
          ;;                       :time-grid t
          ;;                       :date today
          ;;                       :todo "TODAY"
          ;;                       :scheduled today
          ;;                       :order 1)
          ;;                (:discard (:anything t))))))
          (agenda "" ((org-super-agenda-groups nil)))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups my/org-super-agenda-groups)))))
        ("g" "Custom list of all TODO entries"
         ((alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups my/org-super-agenda-groups)))))))

(use-package org-tempo
  :after org
  :config
  (my/add-to-list 'org-structure-template-alist
                  '(("se" . "src emacs-lisp")
                    ("sh" . "src sh")
                    ("sc" . "src cpp")
                    ("sC" . "src common lisp")
                    ("sp" . "src python")
                    ("sl" . "src lua")
                    ("sf" . "src fennel")
                    ;; ("sr" . "src rust")
                    ("sm" . "src markdown"))))

(use-package org-inlinetask
  :after org
  :custom
  (org-cycle-max-level 14)
  (org-inlinetask-min-level 15))

(use-package org-ql
  :ensure t)

(use-package org-appear
  :ensure t
  :after org
  :custom (org-hide-emphasis-markers t)
  :hook org-mode)

(use-package org-cliplink
  :ensure t)

(use-package org-transclusion
  :ensure t
  :after org
  :config
  (set-face-attribute 'org-transclusion-fringe nil :foreground "green" :background "green")
  ;; (set-face-attribute 'org-transclusion-source-fringe nil :foreground "green" :background "green")
  )

(use-package org-auto-tangle
  :ensure t
  :hook org-mode
  ;; :custom (org-auto-tangle-babel-safelist '("~/.config/emacs/README.org"))
  )

(use-package ox-pandoc :ensure t)

(use-package obsidian
  :ensure t
  :demand t
  :custom
  ;; Create missing files in inbox, when clicking on a wiki link?
  ;; t: in inbox, nil: next to the file with the link
  (obsidian-wiki-link-create-file-in-inbox nil)
  ;; The directory for daily notes (file name is YYYY-MM-DD.md)
  (obsidian-daily-notes-directory "Daily Notes")
  ;; Directory of note templates, unset (nil) by default
  ;(obsidian-templates-directory "Templates")
  ;; Daily Note template name - requires a template directory.
  ;; Default: Daily Note Template.md
  ;(obsidian-daily-note-template "Daily Note Template.md")
  :config
  (obsidian-specify-path "~/obsidian")
  (global-obsidian-mode t))

(use-package edit-indirect :ensure t)

(use-package dired
  :custom
  (dired-listing-switches "-lAhF -v --group-directories-first")
  ;; (dired-listing-switches "-l --human-readable --group-directories-first")
  (dired-kill-when-opening-new-dired-buffer t)
  (delete-by-moving-to-trash t)
  (dired-recursive-deletes 'always)
  (dired-recursive-copies 'always)
  (dired-no-confirm t)
  (dired-dwim-target t)
  (dired-omit-files "\\`[.]?#\\|\\`[.][.]?\\'\\|\\`[.].+")
  :hook
  (dired-mode . dired-omit-mode)
  (dired-mode . dired-hide-details-mode)
  (dired-mode . hl-line-mode))

(use-package dired-ranger  :ensure t)
(use-package dired-subtree :ensure t)
(use-package dired-narrow  :ensure t)
(use-package dired-open    :ensure t)
(use-package dired-toggle-sudo :ensure t)

(use-package dired-collapse
  :ensure t
  ;; :hook (dired-mode . dired-collapse-mode)
  )

(use-package dired-rainbow
  :ensure t
  :config
  (dired-rainbow-define html "#4e9a06" ("htm" "html" "xhtml"))

  ;; Video files:
  (defconst my/video-files-extensions
    '("mp3" "mp4" "MP3" "MP4" "avi" "mpg" "flv" "ogg" "mkv")
    "Media files.")
  (dired-rainbow-define media "#ce5c00" my/video-files-extensions)

  ;; Highlight executable files, but not directories:
  (dired-rainbow-define-chmod executable-unix "#4e9a06" "-.*x.*"))

(use-package diredfl
  :ensure t
  ;; :config
  ;; (set-face-attribute 'diredfl-dir-name nil :bold t)
  :hook dired-mode
  ;; :hook dirvish-directory-view-mode
  )

(use-package magit
  :ensure t
  :custom
  ; hide ^M characters at the end of a line in diffs
  (magit-diff-hide-trailing-cr-characters t)
  :config
  (define-advice magit-display-buffer-traditional
      (:around (orig-fun buffer) open-status-buffer-in-current-window)
    "Show `magit-status' buffer in current window."
    (if (with-current-buffer buffer
          (equal major-mode 'magit-status-mode))
        (display-buffer buffer '(display-buffer-same-window))
      ;; else
      (funcall orig-fun buffer))))

(use-package git-modes :ensure t)

(use-package forge :ensure t :after magit)

(use-package difftastic
  :ensure t
  ;; :after magit-diff
  :demand t
  :bind (:map magit-blame-read-only-mode-map
              ("D" . difftastic-magit-show)
              ("S" . difftastic-magit-show))
  :config
  (with-eval-after-load 'magit-diff
    (transient-append-suffix 'magit-diff '(-1 -1)
      [("D" "Difftastic diff (dwim)" difftastic-magit-diff)
       ("S" "Difftastic show" difftastic-magit-show)])))

;; (add-to-list 'Info-directory-list (expand-file-name ".nix-profile/share/info"))

(-map (lambda (dir)
        (let ((dir (expand-file-name dir)))
          (when (f-directory? dir)
            (add-to-list 'Info-additional-directory-list dir))))
      '("~/.local/share/info"
        "~/.nix-profile/share/info"))

(use-package info-rename-buffer
  :ensure t
  :after info
  :config (info-rename-buffer-mode))

(use-package inform
  :after info
  :ensure t)

(use-package info-colors
  :ensure t
  :hook (Info-selection . info-colors-fontify-node))

(use-package pdf-tools
  :ensure t
  :config
  ;; Makes Emacs load and use PDF Tools as soon as a PDF file is opened, but not sooner.
  (pdf-loader-install))

(use-package org-pdftools
  :ensure t
  :hook ((org-mode . org-pdftools-setup-link)
         (pdf-view-mode . org-pdftools-setup-link)))

(use-package nov
  :ensure t
  :mode ("\\.epub\\'" . nov-mode)
  :custom (nov-text-width 80)
  :hook ((nov-mode . visual-line-mode)
         ;; (nov-mode . visual-fill-column-mode)
         ))

(use-package fb2-reader
  :ensure t
  :mode ("\\.fb2\\(\\.zip\\)?\\'" . fb2-reader-mode)
  :commands fb2-reader-continue
  :custom
  ;; This mode renders book with fixed width, adjust to your preferences.
  (fb2-reader-page-width 80)
  (fb2-reader-image-max-width 400)
  (fb2-reader-image-max-height 400))

(use-package djvu :ensure t)

(use-package tex
  :ensure auctex
  :init
  (setopt TeX-auto-save t
          TeX-parse-self t)
  (setq-default TeX-master nil))

(use-package xenops
  :ensure t
  :after no-littering
  :init
  (setq xenops-cache-directory (expand-file-name "xenops" no-littering-var-directory))
  :config
  ;; (setq xenops-math-image-scale-factor 1.4)
  (setq xenops-math-image-current-scale-factor 0.6)
  :hook
  latex-mode
  LaTeX-mode
  ;; org-mode
  ;; (xenops-mode . (lambda ()
  ;;                  (advice-remove 'org-fill-paragraph
  ;;                                 #'xenops-math-fill-paragraph-after-advice)))
  )

(-setq (my/mu4e-path) (directory-files "~/.nix-profile/share/emacs/site-lisp/elpa"
                                       :full "mu4e-.*"))

(add-to-list 'Info-directory-list my/mu4e-path)

(use-package mu4e
  :load-path my/mu4e-path
  :commands (mu4e mu4e-search)
  :custom
  (mu4e-mu-binary (expand-file-name "~/.nix-profile/bin/mu"))
  (mail-user-agent 'mu4e-user-agent)
  (mu4e-bookmarks
   `((:name "Inbox"
            ;; :query ,(string-join '("maildir:\"/anuvyklack@gmail/[Gmail]/Вся почта\""
            ;;                        "AND NOT maildir:/anuvyklack@gmail/Архив") " ")
            :query ,(concat "maildir:\"/anuvyklack@gmail/[Gmail]/Вся почта\" "
                            "AND NOT maildir:/anuvyklack@gmail/Архив "
                            "AND NOT flag:list ")
            :key ?i
            :favorite t)
     (:name "Mail lists"
            :query ,(concat "flag:list "
                            "AND maildir:\"/anuvyklack@gmail/[Gmail]/Вся почта\" ")
            ;; :query ,(concat "flag:list "
            ;;                 "AND NOT maildir:/anuvyklack@gmail/[Gmail]/Корзина "
            ;;                 "AND NOT maildir:/anuvyklack@gmail/[Gmail]/Спам")
            :key ?l)
     ;; (:name "Unread messages" :query "flag:unread AND NOT flag:trashed" :key ?u)
     (:name "Today's messages"
            :query ,(concat "date:today..now "
                            "AND NOT maildir:/anuvyklack@gmail/[Gmail]/Корзина "
                            "AND NOT maildir:/anuvyklack@gmail/[Gmail]/Спам")
            :key ?t)
     (:name "Last 7 days"
            :query ,(concat "date:7d..now "
                            "AND NOT maildir:/anuvyklack@gmail/[Gmail]/Корзина "
                            "AND NOT maildir:/anuvyklack@gmail/[Gmail]/Спам ")
            :hide-unread t :key ?w)
     (:name "Archive" :query "maildir:/anuvyklack@gmail/Архив" :key ?a)
     ;; (:name "Messages with images"
     ;;        :query ,(concat "mime:image/*"
     ;;                        "AND NOT maildir:/anuvyklack@gmail/[Gmail]/Корзина "
     ;;                        "AND NOT maildir:/anuvyklack@gmail/[Gmail]/Спам ")
     ;;        :key ?p)
     ))
  (mu4e-refile-folder "/anuvyklack@gmail/Архив")
  ;; (mu4e-refile-folder "/anuvyklack@gmail/[Gmail]/Вся почта")
  (mu4e-sent-folder   "/anuvyklack@gmail/[Gmail]/Отправленные")
  (mu4e-drafts-folder "/anuvyklack@gmail/[Gmail]/Черновики")
  (mu4e-trash-folder  "/anuvyklack@gmail/[Gmail]/Корзина")
  (mu4e-maildir-shortcuts
   '((:maildir "/anuvyklack@gmail/[Gmail]/Отправленные" :key ?s)
     (:maildir "/anuvyklack@gmail/Архив" :key ?a)
     ;; (:maildir "/anuvyklack@gmail/Inbox" :key ?i)
     (:maildir "/anuvyklack@gmail/[Gmail]/Вся почта" :key ?A)
     (:maildir "/anuvyklack@gmail/[Gmail]/Корзина"   :key ?t)))
  (mu4e-headers-fields
   '((:human-date . 12)
     (:flags . 6)
     ;; (:mailing-list . 10)
     (:from . 25)
     (:subject)
     ;; (:thread-subject)
     ))
  ;; (mu4e-headers-date-format "%Y/%m/%d")
  (mu4e-sent-messages-behavior 'delete)
  (mu4e-change-filenames-when-moving t)
  (mu4e-update-interval (* 10 60))
  (mu4e-get-mail-command "mbsync -a")
  (mu4e-completing-read-function 'completing-read)
  (mu4e-search-skip-duplicates t)
  (mu4e-search-include-related t)
  :config
  ;; (add-to-list 'mu4e-bookmarks
  ;;     ;; ':favorite t' i.e, use this one for the modeline
  ;;    '(:query "maildir:/anuvyklack@gmail/Inbox" :name "Inbox" :key ?i :favorite t))
  (setf (plist-get (alist-get 'trash mu4e-marks) :action)
        (lambda (docid msg target)
          (mu4e--server-move docid (mu4e--mark-check-target target) "-N"))) ; Instead of "+T-N"
  (setq mu4e-use-fancy-chars nil)
  (setq mu4e-headers-draft-mark     '("D" . "")
        mu4e-headers-flagged-mark   '("F" . "")
        mu4e-headers-new-mark       '("N" . "")
        mu4e-headers-passed-mark    '("P" . "")
        mu4e-headers-replied-mark   '("R" . "")
        mu4e-headers-seen-mark      '("S" . "")
        mu4e-headers-trashed-mark   '("T" . "")
        mu4e-headers-attach-mark    '("a" . "📎")
        mu4e-headers-encrypted-mark '("x" . "")
        mu4e-headers-signed-mark    '("s" . "")
        mu4e-headers-unread-mark    '("u" . "")
        mu4e-headers-list-mark      '("l" . "")
        mu4e-headers-personal-mark  '("p" . "")
        mu4e-headers-calendar-mark  '("c" . ""))
  ;; (setq mu4e-headers-thread-child-prefix           '("├>" . "├─➤ ")
  ;;       mu4e-headers-thread-last-child-prefix    '("└>" . "└─➤ ")
  ;;       mu4e-headers-thread-orphan-prefix        '("┬>" . "┬─➤ ")
  ;;       mu4e-headers-thread-single-orphan-prefix   '("─>" . "──➤ ")
  ;;       ;; The following two should have the same width.
  ;;       mu4e-headers-thread-connection-prefix    '("│" . "│ ")
  ;;       mu4e-headers-thread-blank-prefix           '(" " . " "))
  (setq mu4e-headers-thread-orphan-prefix        '("◊ " . "◊ ")
        ;; mu4e-headers-thread-single-orphan-prefix '("◊ " . "◊ ")
        mu4e-headers-thread-single-orphan-prefix '("> " . "◊ ")
        mu4e-headers-thread-duplicate-prefix     '("≡ " . "≡ ")
        mu4e-headers-thread-root-prefix          '("□ " . "□ ")
        mu4e-headers-thread-first-child-prefix   '("○ " . "○ ")
        mu4e-headers-thread-child-prefix         '("├╴" . "├╴")
        mu4e-headers-thread-last-child-prefix    '("└╴" . "└╴")
        ;; mu4e-headers-thread-first-child-prefix   '("○ " . "○ ")
        ;; mu4e-headers-thread-child-prefix         '("├>" . "├>")
        ;; mu4e-headers-thread-last-child-prefix    '("└>" . "└>")
        ;; The following two should have the same width.
        mu4e-headers-thread-connection-prefix    '("│ " . "│ ")
        mu4e-headers-thread-blank-prefix         '("  " . "  "))
  )

(use-package smtpmail
  :custom
  (message-send-mail-function 'smtpmail-send-it)
  (starttls-use-gnutls t)
  (smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil)))
  (smtpmail-auth-credentials '(("smtp.gmail.com" 587 "anuvyklack@gmail.com" nil)))
  (smtpmail-default-smtp-server "smtp.gmail.com")
  (smtpmail-smtp-server "smtp.gmail.com")
  (smtpmail-smtp-service 587)

  ;; Don't keep message buffers around.
  (message-kill-buffer-on-exit t))

(setenv "MANPATH" (shell-command-to-string "manpath"))

(setq treesit-language-source-alist
      '((cpp "https://github.com/anuvyklack/tree-sitter-cpp")
        ;; (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
        (c   "https://github.com/tree-sitter/tree-sitter-c")))

(-each treesit-language-source-alist
  (-lambda ((lang url))
    (unless (treesit-language-available-p lang)
      (treesit-install-language-grammar lang))))

(setopt treesit-font-lock-level 4)
;; (setopt treesit-extra-load-path )

(use-package treesit-auto
  :ensure t
  :custom
  (treesit-auto-install 'prompt)
  :config
  (add-to-list 'treesit-auto-langs 'nu)
  (add-to-list 'treesit-auto-recipe-list
               (make-treesit-auto-recipe
                :lang 'nu
                :ts-mode 'nushell-ts-mode
                :url "https://github.com/nushell/tree-sitter-nu"
                :revision "main"
                :source-dir "src"
                :ext "\\.nu\\'"))
  (add-to-list 'treesit-auto-langs 'nix)
  (add-to-list 'treesit-auto-recipe-list
               (make-treesit-auto-recipe
                :lang 'nix
                :ts-mode 'nix-ts-mode
                :remap 'nix-mode
                :url "https://github.com/nix-community/tree-sitter-nix"
                :revision "master"
                :source-dir "src"
                :ext "\\.nix\\'"))
  ;; (setopt treesit-auto-langs
  ;;         (seq-map #'treesit-auto-recipe-lang treesit-auto-recipe-list))
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))

(add-hook 'prog-mode-hook
          (lambda ()
            (setq-local show-trailing-whitespace t)))

(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (setq-local tab-width lisp-body-indent
                        evil-shift-width  lisp-body-indent)
            ;; (message "evil-shift-width: %s" evil-shift-width)
            (hs-minor-mode)
            (general-def :keymaps 'local :states 'normal
              "K" 'helpful-at-point ;; 'describe-symbol
              "p" 'my/paste-and-indent-after
              "P" 'my/paste-and-indent-before)))

(add-hook 'lisp-data-mode-hook
          (lambda ()
            (general-def :keymaps 'local :states 'normal
              "K" 'helpful-at-point)))

(setq sh-basic-offset 2
      sh-indentation 2)

;; (add-hook 'sh-mode-hook
;;           (lambda ()
;;             (setq sh-basic-offset 2
;;                   sh-indentation 2)))

(add-hook 'dired-mode-hook
          (lambda ()
            (evil-matchit-mode -1)))

(use-package c-ts-mode
  :custom
  (c-ts-mode-indent-offset 4)
  ;; (c-doc-comment-style '((c-mode . gtkdoc)
  ;;                        (c++-mode . doxygen)
  ;;                        (c++-ts-mode . doxygen)))
  :hook
  ((c-ts-mode c++-ts-mode) . (lambda ()
                               ;; (setq electric-indent-inhibit t)
                               (hs-minor-mode)))
  :config
  (defun my/c-ts-indent-style()
    `(;; align function arguments to the start of the first one, offset if standalone
      ((match nil "argument_list" nil 1 1) parent-bol c-ts-mode-indent-offset)
      ((parent-is "argument_list") (nth-sibling 1) 0)
      ;; same for parameters
      ((match nil "parameter_list" nil 1 1) parent-bol c-ts-mode-indent-offset)
      ((parent-is "parameter_list") (nth-sibling 1) 0)
      ;; indent inside case blocks
      ((parent-is "case_statement") standalone-parent c-ts-mode-indent-offset)
      ;; do not indent preprocessor statements
      ((node-is "preproc") column-0 0)
      ;; do not add indentation level for namespace
      ((n-p-gp nil nil "namespace_definition") grand-parent 0)
      ;; append to bsd style
      ,@(alist-get 'bsd (c-ts-mode--indent-styles 'cpp))))
  
  (setopt c-ts-mode-indent-style #'my/c-ts-indent-style)
  (c-ts-mode-toggle-comment-style -1))

(use-package cmake-mode :ensure t)

(add-hook 'org-mode-hook
          (lambda ()
            (setq fill-column 80) ;; set textwidth to 80
            ;; (display-line-numbers-mode -1)
            (auto-revert-mode) ;; обновлять буфер, если файл изменился
            (auto-fill-mode) ;; hard wrap long lines
            (my/org-icons)
            ;; (setq-local tab-width 2)
            (setq-local evil-shift-width 2)
            (general-def :keymaps 'local :states 'normal
              "SPC f i" 'consult-org-heading)))

(use-package fennel-mode
  :ensure t
  :mode "\\.fnl\\'")

(use-package fish-mode :ensure t)

(use-package lemon-mode
  :ensure t
  :mode ("\\.y\\'" . lemon-c++-mode))

(use-package lua-mode
  :ensure t
  :config
  (add-hook 'lua-mode-hook
            (lambda ()
              (setq-local tab-width 3
                          evil-shift-width 3))))

(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode) ;; Github Flavored Markdown
  :hook (gfm-mode . visual-line-mode)
        (markdown-mode . (lambda ()
                           ;; (markdown-toggle-url-hiding 1)
                           (auto-revert-mode) ;; обновлять буфер, если файл изменился
                           (setq-local tab-width 2
                                       evil-shift-width 2)))
  :custom
  ;; Command to convert plain text to HTML
  (markdown-command '("pandoc" "--from=markdown" "--to=html5"))
  ;; Command to call standalone Markdown previewer
  (markdown-open-command nil)
  ;; Command to open image link via `markdown-follow-*' commands
  (markdown-open-image-command nil)
  (markdown-asymmetric-header nil)
  (markdown-marginalize-headers t)
  (markdown-list-indent-width 2)
  (markdown-enable-wiki-links t)
  (markdown-wiki-link-alias-first nil)
  ;; (markdown-wiki-link-fontify-missing t)
  ;; (markdown-wiki-link-search-type 'project)
  (markdown-enable-math t)
  (markdown-link-space-sub-char " ")
  (markdown-reference-location 'subtree)
  ;; (markdown-hide-markup t)
  (markdown-hide-urls t)
  ;; (markdown-hr-display-char)
  (markdown-list-item-bullets)
  (markdown-fontify-code-blocks-natively t)
  ;; (markdown-code-lang-modes)
  (markdown-gfm-uppercase-checkbox t)
  (markdown-enable-highlighting-syntax t))

(use-package evil-markdown
  :vc (:fetcher github :repo "Somelauw/evil-markdown")
  :after (evil markdown-mode))

(use-package nix-ts-mode
  :ensure t
  :mode "\\.nix\\'"
  :config
  (add-hook 'nix-ts-mode-hook
            (lambda()
              (setq-local evil-shift-width  nix-ts-mode-indent-offset))))

(use-package plantuml-mode
  :ensure t
  :custom
  (plantuml-jar-path (expand-file-name "~/.nix-profile/lib/plantuml.jar"))
  (plantuml-default-exec-mode 'executable))

(add-hook 'python-mode-hook
          (lambda ()
            ;; (setq-local evil-shift-width  python-indent-offset)
            ))

(use-package yaml-ts-mode
  :mode
  ("\\.yml\\'" . yaml-ts-mode)
  ("\\.yaml\\'" . yaml-ts-mode)
  ("clang.format\\'" . yaml-ts-mode))

(use-package xkb-mode :ensure t)

(defun my/narrow-to-active-region ()
  (interactive)
  (narrow-to-region (region-beginning)
                    (region-end))
  (evil-exit-visual-state))

(defun my/dired-xdg-open ()
  "In a dired buffer, open file or folder on the current line with `xdg-open'
shell command."
  (interactive)
  (let ((file (dired-get-filename nil t)))
    (call-process "xdg-open" nil 0 nil file)))

(defun my/toggle-line-spacing ()
  "Toggle line spacing between no extra space to extra 0.2 line height."
  (interactive)
  (if line-spacing
      (setq line-spacing nil)
    (setq line-spacing (default-value 'line-spacing)))
  (redraw-frame (selected-frame)))

(defun my/copy-file-current-line-position-to-clipboard ()
  "Copy current line in file to clipboard as '</path/to/file>:<line-number>'"
  (interactive)
  (let* ((path (if (equal current-prefix-arg '(4))
                   (string-replace (getenv "HOME") "~" (buffer-file-name))
                 (buffer-file-name)))
         (path-with-line-number (concat path ":" (number-to-string (line-number-at-pos)))))
    (kill-new path-with-line-number)
    (message path-with-line-number)))

(defun my/copy-file-org-link-to-clipboard ()
  "Copy current line in file to clipboard as 'file:</path/to/file>::<line-number>'"
  (interactive)
  (let ((path-with-line-number
         (concat "file:" (buffer-file-name) "::" (number-to-string (line-number-at-pos)))))
    (kill-new path-with-line-number)
    (message (concat path-with-line-number " copied to clipboard"))))

(define-prefix-command 'leader-map)
(define-prefix-command 'semicolon-leader-map)
(define-prefix-command 'my/bookmark-map)
(define-prefix-command 'my/orgmode-leader-map)
(define-prefix-command 'my/obsidian-map)
(define-prefix-command 'my/notes-map)

(my/which-key-set-command-description
 'my/narrow-to-active-region "narrow to region"
 'narrow-to-region           "narrow to region")

(my/which-key-set-command-description
 'evil-scroll-line-to-top    "scroll line to top"
 'evil-scroll-line-to-center "scroll line to center"
 'evil-scroll-line-to-bottom "scroll line to bottom"
 'evil-scroll-bottom-line-to-top "scroll line to top"
 'evil-scroll-top-line-to-bottom "scroll line to bottom"
 'evil-scroll-line-to-top-first-non-blank    "scroll line to top"
 'evil-scroll-line-to-bottom-first-non-blank "scroll line to bottom"
 'evil-scroll-line-to-center-first-non-blank "scroll line to center"
 'evil-first-non-blank       "start of line"
 'evil-end-of-line           "end of line"
 'evil-org-beginning-of-line "start of line"
 'evil-org-end-of-line       "end of line"
 'evil-open-fold             "open fold"
 'evil-close-fold            "close fold"
 'evil-open-fold-rec         "open fold recursively")

(my/which-key-set-command-description
 'evil-collection-unimpaired-insert-newline-above "insert newline above"
 'evil-collection-unimpaired-insert-newline-below "insert newline below"
 'evil-next-mark-line         "next mark line"
 'evil-previous-mark-line     "prev mark line"
 'evil-next-mark              "next mark"
 'evil-previous-mark          "previous mark"
 'evil-next-buffer            "next buffer"
 'evil-prev-buffer            "previous buffer"
 'evil-forward-section-begin  "forward section"
 'evil-backward-section-begin "backward section")

(my/which-key-set-command-description
 'outline-up-heading             "up heading"
 'outline-show-subtree           "show subtree"
 'outline-hide-entry             "hide entry"
 'outline-hide-other             "hide all other"
 'outline-hide-body              "hide all bodies")

(my/which-key-set-command-description
 'org-ctrl-c-ctrl-c              "C-c C-c"
 'org-toggle-comment             "comment subtree"
 'org-sparse-tree                "sparce tree"
 'org-insert-structure-template  "structure template"
 'org-narrow-to-subtree          "narrow to subtree"
 'org-table-create-or-convert-from-region "table"
 'org-id-get-create              "create ID"
 'org-set-property               "set subtree property"
 'org-babel-insert-header-arg    "set src block header"
 'org-footnote-action            "footnote"
 'org-insert-link                "insert link"
 'org-deadline                   "deadline"
 'org-schedule                   "schedule"
 'org-time-stamp                 "time stamp"
 'org-time-stamp-inactive        "inactive time stamp"
 'org-cliplink                   "URL form clipboard"
 'org-attach                     "attachment"
 'org-agenda-file-to-front       "add file to agenda"
 'org-remove-file                "remove file from agenda"
 'org-next-link                  "next link"
 'org-previous-link              "previous link"
 'org-next-visible-heading       "next heading"
 'org-previous-visible-heading   "prev heading"
 'org-kill-note-or-show-branches "show subtree headings")

(general-def :keymaps 'universal-argument-map
  "M-u" 'universal-argument-more)

(general-def :states 'motion
  "M-u" 'universal-argument
  "SPC" '(:keymap leader-map)
  ";"   '(:keymap semicolon-leader-map)
  "<backspace>"     'execute-extended-command ; emacs M-x
  "C-<backspace>"   'vertico-repeat
  "C-S-<backspace>" 'vertico-repeat-select
  "gh"  'evil-first-non-blank
  "gl"  'evil-end-of-line
  ;; "gb"  'ibuffer-jump
  "gb"  'bufler
  "C-s" 'evil-write
  "C-p" 'consult-yank-from-kill-ring
  "-"   'dired-jump
  "/"   'consult-line
  "?"   'evil-search-forward
  "zn"  'narrow-to-region
  "zw"  'widen
  "z="  'flyspell-correct-wrapper
  "g <tab>"     'tab-new
  "g <backtab>" 'tab-bar-move-window-to-tab
  "C-<tab>"     'tab-next
  "C-<backtab>" 'tab-previous)

(general-def :states 'normal
  "ga" 'describe-char)

(general-def :states '(normal visual)
  "C-p" 'consult-yank-from-kill-ring)

(general-def :states 'visual
  "zn" 'my/narrow-to-active-region)

(general-def :states '(replace insert)
  "C-<backspace>" 'evil-delete-backward-word)

(general-def :states 'insert
  "C-l" 'right-char
  "C-S-t" 'indent-relative
  "M-t" 'indent-relative)

(general-def :keymaps 'help-map
  "s" 'info-lookup-symbol
  "M" 'describe-keymap)

(general-def :keymaps 'leader-map
  ":" 'eval-expression
  ;; "h"  '(:keymap help-map :wk "help")
  ;; "p"  '(:keymap projectile-command-map :wk "projectile prefix")
  "p"  '("projectile" . projectile-command-map)
  "n"  '("notes" . my/notes-map)
  "m"  '("bookmark" . my/bookmark-map)
  ;; "o"  '("obsidian" . my/obsidian-map)
  "oo" 'obsidian-jump
  "oc" 'obsidian-capture
  "b"  'consult-buffer
  "ff" 'find-file
  ;; "fF" 'affe-find
  ;; "fzf" 'fzf
  "fzf" 'my/fzf-curdir
  "fzh" 'my/fzf-home
  "fo" 'consult-outline
  "fg" 'consult-ripgrep
  "fi" 'consult-imenu
  "fr" 'consult-recent-file
  "fd" 'consult-dir
  "fb" 'consult-bookmark
  ;; "fv" 'vertico-repeat-select ; v for vertico
  "4f" 'find-file-other-window)

(general-def :keymaps 'minibuffer-local-map
  "C-h" 'backward-kill-word)

(with-eval-after-load 'vertico
  (general-def :keymaps 'vertico-map :states '(normal visual)
    "C-j" 'vertico-next
    "C-k" 'vertico-previous
    "C-l" 'vertico-insert
    "<tab>" 'vertico-insert
    "n"   'vertico-next-group
    "N"   'vertico-previous-group
    "C-f" 'vertico-scroll-up
    "C-b" 'vertico-scroll-down
    "C-d" 'consult-dir
    ;; "C-j" 'consult-dir-jump-file
    "C-p" 'consult-yank-from-kill-ring
    "gg" 'vertico-first
    "G"  'vertico-last
    "q"  'abort-recursive-edit)

  (general-def :keymaps 'vertico-map :states 'insert
    "C-y" 'yank
    "C-j" 'vertico-next
    "C-k" 'vertico-previous
    "C-l" 'vertico-insert
    "<tab>" 'vertico-insert
    "C-d" 'consult-dir
    "C-n" 'vertico-next-group
    "C-p" 'vertico-previous-group
    "C-f" 'vertico-scroll-up
    "C-b" 'vertico-scroll-down)

  ;; More convenient directory navigation commands
  (general-def :keymaps 'vertico-map :states 'insert
    "<return>" 'vertico-directory-enter
    "<backspace>" 'vertico-directory-delete-char
    "C-<backspace>" 'vertico-directory-delete-word)

  ;; Russian
  (general-def :keymaps 'vertico-map :states 'insert
    "C-о" 'vertico-next
    "C-л" 'vertico-previous))

(general-def :keymaps 'minibuffer-local-map :states '(motion insert)
  "M-a" 'marginalia-cycle)

(general-def :keymaps 'evil-cleverparens-mode-map :states '(normal visual)
  ")"   'my/evil-cp-up-sexp
  "["    nil  ; unbind `evil-cp-previous-opening' in favor of unimpaired
  "]"    nil  ; unbind `evil-cp-next-closing' in favor of unimpaired
  "C-(" 'evil-cp-backward-up-sexp
  "C-)" 'my/evil-cp-up-sexp
  "M-w" 'my/evil-cp-forward-sexp
  "M-b" 'my/evil-cp-backward-sexp
  "L"   'my/evil-cp-forward-sexp
  "H"   'my/evil-cp-backward-sexp
  ",w"  'evil-cp-wrap-next-round
  ",W"  'evil-cp-wrap-previous-round
  ",b"  'evil-cp-wrap-next-square
  ",B"  'evil-cp-wrap-previous-square
  ",f"  'evil-cp-wrap-next-curly
  ",F"  'evil-cp-wrap-previous-curly)

(general-def :keymaps 'bufler-list-mode-map :states 'normal
  "<return>" 'bufler-list-buffer-switch
  "C-s" 'bufler-list-buffer-save
  "gr" '(bufler :wk "refresh")
  "d" 'bufler-list-buffer-kill
  "x" 'bufler-list-buffer-kill
  "W" 'bufler-list-buffer-peek
  "?" 'hydra:bufler/body)

(my/which-key-set-command-description
 'bufler-list-buffer-switch "switch to buffer"
 'bufler-list-buffer-save   "save buffer"
 'bufler-list-buffer-kill   "kill buffer")

;; (general-def :keymaps 'hs-minor-mode-map :states 'normal
;;   "zM" 'hs-hide-level)

(add-hook 'hs-minor-mode-hook
          (lambda ()
            (general-def :keymaps 'local :states 'normal
              "zM" 'hs-hide-level)))

(general-def :keymaps 'my/bookmark-map
  "m" 'consult-bookmark
  "n" 'bookmark-set
  "d" 'bookmark-delete
  "l" 'bookmark-bmenu-list)

(my/which-key-set-command-description
 'bookmark-bmenu-list "bookmarks list")

(general-def :keymaps 'dired-mode-map :states 'normal
  "SPC" '(:keymap leader-map)
  "<backspace>" 'execute-extended-command ;; emacs M-x
  "l" 'dired-find-file
  "h" 'dired-up-directory
  "f" 'find-file
  "r" 'dired-do-rename
  "y" 'dired-ranger-copy
  ;; "Y" 'dired-copy-filename-as-kill
  "p" 'dired-ranger-paste
  "P" 'dired-ranger-move
  "w" 'dired-display-file
  ")" 'dired-omit-mode
  "<" 'dired-prev-marked-file
  ">" 'dired-next-marked-file
  "s" 'dired-narrow-fuzzy
  "S" 'dired-narrow-regexp
  "." 'hydra-dired/body
  "M-<return>" 'my/dired-xdg-open)

(general-def :keymaps 'dired-mode-map :states 'visual
  "d" 'dired-flag-file-deletion
  "u" 'dired-unmark)

(general-def :keymaps 'dired-mode-map :states 'normal
  "<tab>"     'dired-subtree-toggle
  "<backtab>" 'dired-subtree-cycle
  "zk" 'dired-subtree-up
  "zj" 'dired-subtree-down
  "C-j" 'dired-subtree-next-sibling
  "C-k" 'dired-subtree-previous-sibling)

(defhydra hydra-dired (:hint nil :color pink)
  "
_Y_ rel symlink    _O_pen marked
_S_ymlink          _n_ narrow
_z_ compress-file  _m_ chmod       _s_ort             _E_ ediff
_Z_ compress       _g_ chgrp       _e_xtension mark   _=_ pdiff
"
  ("+" dired-maybe-create-dirs)
  ("=" diredp-ediff) ;; smart diff
  ("e" dired-mark-extension)
  ("E" dired-ediff-files)
  ("g" dired-do-chgrp)
  ("m" dired-do-chmod)
  ("n" dired-narrow)
  ("O" dired-do-find-marked-files) ;; open in Emacs all marked files
  ;; ("o" dired-display-file)
  ;; ("r" dired-do-rsynch)
  ("S" dired-do-symlink)
  ("s" dired-sort-toggle-or-edit)
  ("Y" dired-do-relsymlink)
  ("z" diredp-compress-this-file)
  ("Z" dired-do-compress)
  ("q" nil)
  ("." nil :color blue)
  ("<escape>" nil :color blue))

(general-def :keymaps 'projectile-command-map
  "I" 'projectile-project-info
  "B" 'projectile-ibuffer)

(my/which-key-set-command-description
 'projectile-project-info "project info")

(with-eval-after-load 'eglot
  (define-prefix-command 'eglot-leader-map)
  (general-def :keymaps 'eglot-leader-map
    "rr" 'eglot-rename
    "rq" 'eglot-code-action-quickfix
    "re" 'eglot-code-action-extract
    "ri" 'eglot-code-action-inline
    "rI" 'eglot-code-action-organize-imports
    "rR" 'eglot-code-action-rewrite
    "="  'eglot-format
    "th" 'eglot-inlay-hints-mode
    "dd" 'flymake-show-buffer-diagnostics
    "dj" 'flymake-goto-next-error
    "dk" 'flymake-goto-prev-error
    ;; "d[" 'flymake-goto-next-error
    ;; "d]" 'flymake-goto-prev-error
    "dc" 'consult-flymake
    "dD" 'flymake-show-project-diagnostics
    "a"  'eglot-code-actions)
  (general-def :keymaps 'eglot-mode-map :states '(normal visual)
    "SPC"   '(:keymap eglot-leader-map)
    "K"     'eldoc-box-help-at-point
    "M-k"   'eldoc-doc-buffer
    "C-S-k" 'eldoc-doc-buffer
    "C-t"   'xref-go-back
    "C-S-t" 'xref-go-forward
    "gi" 'eglot-find-implementation
    "gt" 'eglot-find-typeDefinition))

(dolist (map '(flymake-diagnostics-buffer-mode-map
               flymake-project-diagnostics-mode-map))
  (general-def :keymaps map :states 'normal
    "o" 'flymake-show-diagnostic))

(with-eval-after-load 'eglot
  (my/which-key-set-command-description
   'eglot-rename               "lsp rename"
   'eglot-code-action-organize-imports "organize imports"
   'eglot-code-action-quickfix "quickfix"
   'eglot-code-action-extract  "refactor extract"
   'eglot-code-action-inline   "refactor inline"
   'eglot-code-action-rewrite  "refactor rewrite"
   'eglot-format               "lsp format"
   'eglot-inlay-hints-mode     "toggle inlay hints"
   'eglot-code-actions         "code actions"
   ))

(with-eval-after-load 'flymake
  (my/which-key-set-command-description
   'flymake-show-buffer-diagnostics  "buffer diagnostics"
   'flymake-show-project-diagnostics "project diagnostics"
   'flymake-show-project-diagnostics "project-diagnostics"
   'flymake-show-buffer-diagnostics  "buffer-diagnostics"
   'flymake-goto-next-error          "next error"
   'flymake-goto-prev-error          "prev error"
   ;; 'consult-flymake
   ))

;; (general-def :keymaps 'corfu-map :states 'insert
;;   "<escape>" 'corfu-quit
;;   "<tab>" 'corfu-insert)

(general-def :keymaps 'corfu-map :states 'insert
  "C-о" 'corfu-next
  "C-л" 'corfu-previous
  "C-а" 'corfu-scroll-up
  "C-и" 'corfu-scroll-down)

(when evil-want-C-u-scroll
  (evil-collection-define-key 'insert 'corfu-map (kbd "C-u") 'corfu-scroll-down))

(when evil-want-C-d-scroll
  (evil-collection-define-key 'insert 'corfu-map (kbd "C-d") 'corfu-scroll-up))

(general-def :keymaps 'corfu-map :states 'insert
  "C-f" 'corfu-scroll-up
  "C-b" 'corfu-scroll-down)

(setopt
 evil-collection-magit-use-z-for-folds t ; use Z for stash instead
 evil-collection-magit-use-$-for-end-of-line nil ; use $ for `magit-process-buffer'
 ;; evil-collection-magit-want-horizontal-movement t
 )

(with-eval-after-load 'magit-section
  (general-def :keymaps 'magit-mode-map :states 'normal
    "C-j" 'magit-section-forward-sibling
    "C-k" 'magit-section-backward-sibling
    "zj"  'magit-section-forward
    "zk"  'magit-section-backward
    "Z"   'magit-stash)
  (general-def :keymaps 'magit-section-mode-map :states 'normal
    "C-j" 'magit-section-forward-sibling
    "C-k" 'magit-section-backward-sibling
    "zj"  'magit-section-forward
    "zk"  'magit-section-backward
    "zu"  'magit-section-up
    "gh"  'evil-first-non-blank
    "gl"  'evil-end-of-line
    "zt"  'evil-scroll-line-to-top
    "zz"  'evil-scroll-line-to-center
    "zb"  'evil-scroll-line-to-bottom
    "za"  'magit-section-toggle
    "zo"  'magit-section-toggle
    "zc"  'magit-section-toggle
    "<tab>"       'magit-section-cycle
    "C-<tab>"     'tab-next
    ;; "C-S-<tab>"   'tab-previous
    "C-<backtab>"   'tab-previous
    "g <tab>"     'tab-new
    "g <backtab>" 'tab-bar-move-window-to-tab)
  (general-def :keymaps 'magit-status-mode-map :states 'normal
    "g t "'tab-next
    "g T" 'tab-previous))

(general-def :keymaps 'with-editor-mode-map :states 'normal
  "ZZ" 'with-editor-finish
  "Q"  'with-editor-cancel
  "ZQ" 'with-editor-cancel)

(my/which-key-set-command-description
 'evil-collection-magit-yank-whole-line "yank whole line")

(with-eval-after-load 'markdown-mode
  (defvar-keymap my/markdown-leader-map :parent 'leader-map)
  (general-def :keymaps 'my/markdown-leader-map
    "<return>" 'markdown-toggle-markup-hiding)

  (general-def :keymaps 'markdown-mode-map :states 'normal
    "SPC" '(:keymap my/markdown-leader-map)
    "z'"  'markdown-edit-code-block
    "zu"  'markdown-outline-up
    "zj"  'markdown-outline-next
    "zk"  'markdown-outline-previous
    "C-k" 'markdown-outline-previous-same-level
    "C-j" 'markdown-outline-next-same-level
    "C-<up>"   'markdown-outline-previous-same-level
    "C-<down>" 'markdown-outline-next-same-level
    ;; "<return>" 'markdown-toggle-markup-hiding
    "M-<up>"   'markdown-move-up
    "M-<down>" 'markdown-move-down)

  (general-def :keymaps 'edit-indirect-mode-map :states 'normal
    "ZZ" 'edit-indirect-commit
    "ZQ" 'edit-indirect-abort))

(with-eval-after-load 'obsidian
  (defvar-keymap my/obsidian-leader-map :parent 'leader-map)
  (general-def :keymaps 'my/obsidian-leader-map
    "ob" 'obsidian-backlink-jump
    "o/" 'obsidian-search
    "w"  'obsidian-insert-wikilink
    "l"  'obsidian-insert-link)

  (general-def :keymaps 'obsidian-mode-map :states 'normal
    "SPC" '(:keymap my/obsidian-leader-map)
    "gx"  'obsidian-follow-link-at-point))

(my/which-key-set-command-description
 'obsidian-jump            "open Obsidian note"
 'obsidian-insert-wikilink "insert wikilink"
 'obsidian-insert-link     "insert markdown link")

(general-def :keymaps 'outline-mode-map :states 'normal
  ;; "<tab>" 'outline-cycle
  "zm" 'my/outline-hide-sublevels
  "zj" 'outline-next-visible-heading
  "zk" 'outline-previous-visible-heading
  "zL" 'outline-hide-leaves
  "zl" nil ;;'outline-hide-leaves
  )

(defun my/outline-hide-sublevels (levels)
  (interactive "p")
  (outline-hide-sublevels (or levels 1)))

(general-def :keymaps 'my/orgmode-leader-map
  "SPC" 'org-ctrl-c-ctrl-c
  "<return>" 'org-ctrl-c-ret
  "ni" 'org-id-get-create
  "np" 'org-set-property
  "nh" 'org-babel-insert-header-arg
  "nf" 'org-footnote-action
  "l"  'org-insert-link
  "d"  'org-deadline
  "e"  'org-export-dispatch
  "s"  'org-schedule
  "t"  'org-time-stamp
  "T"  'org-time-stamp-inactive
  "L"  'org-cliplink
  "a"  'org-attach
  "["  'org-agenda-file-to-front
  "]"  'org-remove-file)

(general-def :keymaps 'org-mode-map :states '(normal visual)
  "SPC" '(:keymap my/orgmode-leader-map)
  "C-<up>"   'org-backward-heading-same-level
  "C-<down>" 'org-forward-heading-same-level
  "K"  'helpful-at-point
  "^"  'evil-org-beginning-of-line
  "$"  'evil-org-end-of-line
  "gh" 'evil-org-beginning-of-line
  "gl" 'evil-org-end-of-line
  ;; "H"  'org-up-element
  ;; "L"  'org-down-element
  "gn" 'org-next-link
  "gN" 'org-previous-link
  "gx" 'org-open-at-point
  "zC" 'outline-hide-entry
  "zn" 'org-narrow-to-subtree
  "z'" 'org-edit-special
  "z," 'org-insert-structure-template
  "z/" 'org-sparse-tree
  "z;" 'org-toggle-comment
  "z|" 'org-table-create-or-convert-from-region
  ;; "M-q" 'unpackaged/flex-fill-paragraph
  )
(general-def :keymaps 'org-mode-map :states '(motion insert)
  "<tab>" 'org-cycle)

(add-hook 'evil-org-mode-hook
          (lambda ()
            (general-def :keymaps 'local :states 'insert
              "C-t" 'evil-shift-right-line
              "C-d" 'evil-shift-left-line)))

(defhydra hydra-org-link ()
  "Link"
  ("n" org-next-link     "next")
  ("N" org-previous-link "previous")
  ("j" org-next-link     "next")
  ("k" org-previous-link "previous"))

(defhydra hydra-backward-org-link ()
  "Backward Link"
  ("N" org-next-link     "next")
  ("n" org-previous-link "previous")
  ("j" org-next-link     "next")
  ("k" org-previous-link "previous"))

(general-def :keymaps 'org-mode-map :states 'normal
  "gn" (lambda ()
         (interactive)
         (org-next-link)
         (hydra-org-link/body))
  "gN" (lambda ()
         (interactive)
         (org-previous-link)
         (hydra-backward-org-link/body)))

(with-eval-after-load 'org-transclusion
  (general-def :keymaps 'org-transclusion-map :states 'normal
    ;; "e" 'org-transclusion-live-sync-start
    ;; "g" 'org-transclusion-refresh
    ;; "d" 'org-transclusion-remove
    ;; "C-d" 'org-transclusion-detach
    ;; "P" 'org-transclusion-promote-subtree
    ;; "D" 'org-transclusion-demote-subtree
    ;; "o" 'org-transclusion-open-source
    ;; "O" 'org-transclusion-move-to-source
    "gi" 'org-transclusion-live-sync-start)

  (general-def :keymaps 'org-transclusion-live-sync-map :states 'normal
    ;; "C-c C-c" 'org-transclusion-live-sync-exit
    ;; "C-y" 'org-transclusion-live-sync-paste
    "q" 'org-transclusion-live-sync-exit))

(general-def :keymaps 'my/notes-map
  "I" 'my/org-roam-create-untracked-node
  "a" 'org-agenda
  "s" 'org-store-link
  "n" 'org-roam-node-find
  "c" 'org-roam-capture
  "b" 'org-roam-buffer-toggle
  "v" 'org-switchb
  "l" 'org-roam-node-insert
  "t" 'org-roam-tag-add
  "u" 'org-roam-ui-mode
  "d" '(:keymap org-roam-dailies-map)
  "/" 'consult-org-roam-search)

(general-def :keymaps 'org-roam-dailies-map
  "Y" 'org-roam-dailies-capture-yesterday
  "T" 'org-roam-dailies-capture-tomorrow)

(my/which-key-set-command-description
 'my/org-roam-create-untracked-node  "untracked org-roam node"
 'org-roam-dailies-capture-yesterday "capture yesterday"
 'org-roam-dailies-capture-tomorrow  "capture tomorrow")

(general-def :keymaps 'Info-mode-map :states 'normal
  "SPC" (define-keymap :parent 'leader-map
          "1" 'Info-top-node
          "t" 'Info-toc
          "h" 'Info-history
          "d" 'Info-directory)

  "C-j" 'Info-next
  "C-k" 'Info-prev

  "zj" 'Info-forward-node
  "zk" 'Info-backward-node

  "J" 'Info-forward-node
  "K" 'Info-backward-node

  "zu" 'Info-up
  "gd" 'Info-directory

  "M" 'Info-menu)

(dolist (i (number-sequence 1 9))
  (keymap-unset Info-mode-map (format "<normal-state> g %s" i) :remove))

(my/which-key-set-command-description
 'Info-directory "Info dir"
 'Info-history   "history"
 'Info-toc       "TOC"
 'Info-top-node  "top node"
 'Info-up        "Info parent node")

(general-def :states 'insert
  "C-д"   'right-char
  "C-ч 8" 'iso-transl-ctl-x-8-map
  "C-ц"   'evil-delete-backward-word)

(provide 'init.el)
;;; init.el ends here
