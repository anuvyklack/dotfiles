#!/usr/bin/env zsh
#                     ██
#                    ░██
#      ██████  ██████░██████  ██████  █████
#     ░░░░██  ██░░░░ ░██░░░██░░██░░█ ██░░░██
#        ██  ░░█████ ░██  ░██ ░██ ░ ░██  ░░
#       ██    ░░░░░██░██  ░██ ░██   ░██   ██
#  ██  ██████ ██████ ░██  ░██░███   ░░█████
# ░░  ░░░░░░ ░░░░░░  ░░   ░░ ░░░     ░░░░░

# This file was automatically generated by Emacs Org-Mode `org-babel-tangle'.
# Do not change this file. The main file is `README.org`.

local my_zsh_functions=${ZDOTDIR}/functions
fpath+=($my_zsh_functions)
if [[ -d "$my_zsh_functions" ]]; then
  autoload -Uz $(command ls $my_zsh_functions)
fi

if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]
then
  # Suppress the warining about console output during zsh initialization.
  typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

declare -A ZNAP  # Create an associative array.
ZNAP[PLUGINS]="$HOME/.local/share/zsh/plugins"
ZNAP[SELF]="$ZNAP[PLUGINS]/zsh-snap"
ZNAP[BIN]="$ZNAP[SELF]/znap.zsh"

if [[ ! -s $ZNAP[BIN] ]]; then
  git clone 'https://github.com/marlonrichert/zsh-snap.git' $ZNAP[SELF]
fi
source $ZNAP[BIN]

# zstyle ':znap:*' auto-compile no

zstyle ':znap:*' auto-compile-ignore "${my_zsh_functions}/*"

THEME=powerlevel10k
# THEME=geometry

case $THEME in
  powerlevel10k)
    [[ -f ~/.config/zsh/themes/p10k.zsh ]] &&
      source ~/.config/zsh/themes/p10k.zsh

    znap source romkatv/powerlevel10k
    ;;
  geometry)
    # https://github.com/geometry-zsh/geometry
    GEOMETRY_COLOR_DIR=152

    # GEOMETRY_PROMPT=(geometry_status geometry_path) # redefine left prompt
    # GEOMETRY_RPROMPT+=(geometry_exec_time pwd)      # append exec_time and pwd right prompt

    znap prompt geometry-zsh/geometry
    ;;
esac
unset THEME

# # PROMPT_TITLE='$USER@$HOST $PWD'  # default
#
# # Полный путь до текущей директории. Подстроку эквивалентную `$HOME`
# # заменяем на тильду. Ковычки дожны быть одинарными. С двойными заголовок
# # не обновляется при смене директории.
# # PROMPT_TITLE='${PWD/#${HOME}/~}'

# PROMPT_TITLE=''

_show_title() {
  # print -Pn "\033]0;${PROMPT_TITLE:-"$USER@$HOST"}\007"
  print -Pn "\033]0;${PROMPT_TITLE}\007"
}

autoload -Uz add-zsh-hook
add-zsh-hook precmd _show_title
_show_title

declare -A ZSH

ZSH[cache]="$HOME/.cache/zsh"
# ZSH[completions]="$ZSH[cache]/completions"
ZSH[completions]="$XDG_DATA_HOME/zsh/site-functions"
ZSH[scripts]="$ZSH[cache]/scripts"

[ -d $ZSH[completions] ] || mkdir -p $ZSH[completions]
[ -d $ZSH[scripts] ] || mkdir -p $ZSH[scripts]

# REPORTTIME=20

setopt extended_glob

setopt auto_cd            # Go to folder path without using cd.
setopt auto_pushd         # Push the old directory onto the stack on `cd`.
setopt pushd_ignore_dups  # Do not store duplicates in the stack.
setopt pushd_silent       # Do not print the directory stack after 'pushd' or 'popd'.

setopt pushd_minus

unsetopt cdable_vars

unsetopt clobber

setopt interactive_comments

setopt nomatch
# unsetopt nomatch         # Don't you yell at me when you can't find a match.
#                          # that's your problem, not mine.

unsetopt beep

setopt combining_chars

setopt rc_quotes

setopt hash_list_all

setopt long_list_jobs     # List jobs in the long format by default.
setopt auto_resume        # Attempt to resume existing job before creating a new process.
setopt notify             # Report status of background jobs immediately.
unsetopt bg_nice          # Don't run all background jobs at a lower priority.
unsetopt hup              # Don't kill jobs on shell exit.
unsetopt check_jobs       # Don't report on jobs when shell exit.

setopt correct_all
CORRECT_IGNORE_FILE='.*'

READNULLCMD='less'

SPROMPT="Ошибка! ввести %r вместо %R? ([Y]es/[N]o/[E]dit/[A]bort) "

# source $ZDOTDIR/settings/history.zsh

HISTFILE=$XDG_CACHE_HOME/zsh/zsh_history  # History filepath
HISTSIZE=11000  # Larger than $SAVEHIST for HIST_EXPIRE_DUPS_FIRST to work.
SAVEHIST=10000

setopt bang_hist

# setopt extended_history

setopt inc_append_history

# setopt share_history          # Synchronize history across shells
setopt hist_reduce_blanks     # Remove superfluous blanks before recording entry.
setopt hist_verify            # Don't execute immediately upon history expansion.

setopt hist_no_store

setopt hist_reduce_blanks

setopt prompt_subst           # Allow expansion in prompts
setopt hist_find_no_dups      # Do not display a line previously found.
setopt hist_ignore_dups       # Don't record an entry that was just recorded again.
setopt hist_ignore_space      # Don't record an entry starting with a space.
setopt hist_expire_dups_first # Delete duplicates first when HISTFILE size exceeds HISTSIZE.
# setopt hist_ignore_all_dups   # Delete old recorded entry if new entry is a duplicate.
# setopt hist_save_no_dups      # Don't write duplicate entries in the history file.

zshaddhistory() {
  whence ${${(z)1}[1]} >/dev/null || return 2
}

export HISTORY_IGNORE="(cd|ranger|r|exit|:q|kill|vifm*)"

setopt menu_complete

# setopt auto_menu

# setopt auto_complete

# setopt list_rows_first

setopt complete_aliases

setopt list_types

unsetopt flow_control

# unsetopt case_glob

setopt always_to_end    # Move cursor to the end of a completed word.
setopt list_packed      # The completion menu takes less space.
setopt auto_list        # Automatically list choices on ambiguous completion.
setopt auto_param_slash # If completed parameter is a directory, add a trailing slash.

setopt complete_in_word

setopt glob_complete

unsetopt path_dirs

unsetopt glob_dots

zstyle ':completion:*' verbose true

zstyle ':completion:*' completer _extensions _complete _approximate

zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path $HOME/.cache/zsh/.zcompcache

zstyle ':completion:*' complete true

zstyle ':completion:*' insert-tab false

zstyle ':completion:*' complete-options true

zstyle ':completion:*' file-sort alphabetically

# zstyle ':completion:*' special-dirs ..

zstyle ':completion:*:cd:*' ignore-parents parent pwd

zstyle ':completion:*:complete:-command-::commands' ignored-patterns '(aptitude-*|*\~)'

zstyle ':completion:*:*:*:*:default' list-colors ${(s.:.)LS_COLORS}

zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'

zstyle ':completion:*:history-words' remove-all-dups yes
zstyle ':completion:*:history-words' stop yes
zstyle ':completion:*:history-words' list false
zstyle ':completion:*:history-words' menu yes

zstyle ':completion::*:(-command-|export):*' fake-parameters ${${${_comps[(I)-value-*]#*,}%%,*}:#-*-}

zstyle ':completion:*' squeeze-slashes true

zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'

zstyle ':completion:*:kill:*' force-list always

zstyle ':completion:*:git-checkout:*' sort false

zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'

zstyle ':completion:*:processes' command 'ps -au$USER'

zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

zstyle ':completion:*:*:*:users' ignored-patterns \
        adm amanda apache at avahi avahi-autoipd beaglidx bin cacti \
        canna clamav daemon dbus distcache dnsmasq dovecot fax ftp \
        games gdm gkrellmd gopher hacluster haldaemon halt hsqldb ident \
        junkbust kdm ldap lp mail mailman mailnull man messagebus \
        mldonkey mysql nagios named netdump news nfsnobody nobody nscd \
        ntp nut nx obsrun openvpn operator pcap polkitd postfix \
        postgres privoxy pulse pvm quagga radvd rpc rpcuser rpm rtkit \
        scard shutdown squid sshd statd svn sync tftp usbmux uucp vcsa \
        wwwrun xfs '_*'

zstyle '*' single-ignored show

zstyle ':completion:*:(rm|kill|diff):*' ignore-line other
zstyle ':completion:*:rm:*' file-patterns '*:all-files'

zstyle ':completion:*:manuals'       separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true

zstyle ':completion:*:*:mpg123:*' file-patterns '*.(mp3|MP3):mp3\ files *(-/):directories'
zstyle ':completion:*:*:mpg321:*' file-patterns '*.(mp3|MP3):mp3\ files *(-/):directories'
zstyle ':completion:*:*:ogg123:*' file-patterns '*.(ogg|OGG|flac):ogg\ files *(-/):directories'
zstyle ':completion:*:*:mocp:*' file-patterns '*.(wav|WAV|mp3|MP3|ogg|OGG|flac):ogg\ files *(-/):directories'

zstyle ':completion:*:expand:*' tag-order all-expansions
zstyle ':completion:*:history-words' list false

zstyle ':completion:*:*:zcompile:*' ignored-patterns '(*~|*.zwc)'
zstyle ':completion:correct:' prompt 'correct to: %e'

zstyle ':completion::(^approximate*):*:functions' ignored-patterns '_*'

zstyle ':completion:*:processes-names' command 'ps c -u ${USER} -o command | uniq'

zstyle ':completion:*:sudo:*' command-path /usr/local/sbin \
                                           /usr/local/bin  \
                                           /usr/sbin       \
                                           /usr/bin        \
                                           /sbin           \
                                           /bin            \
                                           /usr/X11R6/bin

zstyle ':completion:*' group-name ''

zstyle ':completion:*:*:-command-:*:*' group-order aliases builtins functions commands

zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'

zstyle ':completion:*:*:*:*:corrections'  format 'F{green}!- %d (errors: %e) -!%f'
zstyle ':completion:*:*:*:*:descriptions' format '%F{blue}%B-- %D %d --%b%f'
zstyle ':completion:*:*:*:*:messages'     format ' %F{yellow} -- %d --%f'
zstyle ':completion:*:*:*:*:warnings'     format ' %F{magenta}-- no matches found --%f'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'

zstyle ':completion:*' menu select=1
# zstyle ':completion:*' menu select=1 _complete _ignored _approximate

zmodload zsh/complist  # Should be called before compinit.

bindkey -M menuselect 'h' vi-backward-char         # left
bindkey -M menuselect 'k' vi-up-line-or-history    # up
bindkey -M menuselect 'l' vi-forward-char          # right
bindkey -M menuselect 'j' vi-down-line-or-history  # down

bindkey -M menuselect '^f' vi-forward-word   # moves one screenful down
bindkey -M menuselect '^b' vi-backward-word  # moves one screenful up

bindkey -M menuselect 'gg' beginning-of-history  # moves to the first line
bindkey -M menuselect 'G'  end-of-history        # moves to the last line

bindkey -M menuselect '^[' send-break  # escape

bindkey -M menuselect '^[[Z' reverse-menu-complete

_force_rehash() {
  (( CURRENT == 1 )) && rehash
  return 1  # Because we didn't really complete anything
}

if [[ -n "$NO_CORRECTIONS" ]]; then
  setopt nocorrect # Do not try to correct the spelling if possible.
  zstyle ':completion:*' completer _oldlist _expand _force_rehash _complete _files
else
  setopt correct   # Correct the spelling of commands.

  # Fuzzy matching of completions for when you mistype them:
  zstyle -e ':completion:*' completer '
    if [[ $_last_try != "$HISTNO$BUFFER$CURSOR" ]]; then
      _last_try="$HISTNO$BUFFER$CURSOR"
      reply=(_complete _match _ignored _prefix _files)
    else
      if [[ $words[1] == (rm|mv) ]]; then
        reply=(_complete _files)
      else
        reply=(_oldlist _expand _force_rehash _complete _ignored _correct _approximate _files)
      fi
    fi'
fi

zstyle ':completion:*' original true
# zstyle ':completion:*:match:*' original only

zstyle -e ':completion:*:approximate:*' \
  max-errors 'reply=($((($#PREFIX+$#SUFFIX)/3>7?7:($#PREFIX+$#SUFFIX)/3))numeric)'

# source $ZDOTDIR/settings/completion.zsh

fpath+=(
  $ZSH[completions]
)

znap install zsh-users/zsh-completions

# github_completion exa 'https://github.com/ogham/exa/blob/master/completions/zsh/_exa'
# github_completion rg 'https://github.com/BurntSushi/ripgrep/blob/master/complete/_rg'
# github_completion vifm 'https://github.com/vifm/vifm/blob/master/data/shell-completion/zsh/_vifm'

znap fpath _gh 'gh completion -s zsh'

znap install esc/conda-zsh-completion

# zstyle ":conda_zsh_completion:*" use-groups true

# # Display unnamed environments and prefixes of environments.
# zstyle ":conda_zsh_completion:*" show-unnamed true

# # display environments autocompletion sorted in creation order
# zstyle ":conda_zsh_completion:*" sort-envs-by-time true

znap fpath _pip "pip completion --zsh"

if (( $+commands[pipx] )) && (( $+commands[register-python-argcomplete] )); then
  znap eval pipx-completion "register-python-argcomplete pipx"
fi

compdef _gnu_generic update-alternatives

function _zoxide_zsh_tab_completion {
    (( $+compstate )) && compstate[insert]=menu
    local keyword="${words:2}"
    local completions=(${(@f)"$(zoxide query -l "$keyword")"})

    if [[ ${#completions[@]} == 0 ]]; then
        _files -/
    else
        compadd -U -V z "${(@)completions}"
    fi
}

if (( $+functions[compdef] )); then
    compdef _zoxide_zsh_tab_completion z 2>/dev/null
fi

typeset -a baliases
baliases=()

balias() {
    alias $@
    args="$@"
    args=${args%%\=*}
    baliases+=(${args##* })
}

typeset -a ialiases
ialiases=()

ialias() {
  alias $@
  args="$@"
  args=${args%%\=*}
  ialiases+=(${args##* })
}

expand-alias-space() {
  [[ $LBUFFER =~ "\<(${(j:|:)baliases})\$" ]]; insertBlank=$?
  if [[ ! $LBUFFER =~ "\<(${(j:|:)ialiases})\$" ]]; then
    zle _expand_alias
  fi
  zle self-insert
  if [[ "$insertBlank" = "0" ]]; then
    zle backward-delete-char
  fi
}
zle -N expand-alias-space

bindkey " " expand-alias-space
bindkey -M isearch " " magic-space

# unalias run-help
autoload run-help

# HELPDIR=/usr/share/zsh/"${ZSH_VERSION}"/help
HELPDIR=/usr/share/zsh/help  # in Pop_OS

run_vifm()
{
  zle .reset-prompt
  BUFFER=" vifmcd"
  zle accept-line
}
zle -N run_vifm

run_ranger() {
  zle .reset-prompt
  # BUFFER=" source ranger && clear -x"
  BUFFER=" source ranger"
  zle accept-line
}
zle -N run_ranger

znap source Aloxaf/fzf-tab

zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup

zstyle ':completion:*:descriptions' format '-- %d --'

# zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
# zstyle ':fzf-tab:complete:cd:*' popup-pad 80 0

# A prefix to indicate the color.
zstyle ':fzf-tab:*' prefix ''
# zstyle ':fzf-tab:*' prefix '·'

local lc=$'\e[' rc=m    # Standard ANSI terminal escape values.
local rgb="${lc}38;2;"  # RGB color support
local reset="${lc}0;${rc}"
FZF_TAB_GROUP_COLORS=(
  "${rgb}171;178;191${rc}"  # #abb2bf
  "${rgb}157;226;199${rc}"  # #9de2c7
  "${rgb}226;157;226${rc}"  # #e29de2
  "${rgb}205;212;96${rc}"   # #CDD460
  "${rgb}115;184;241${rc}"  # #73b8f1
  "${rgb}241;167;173${rc}"  # #f1a7ad
  "${rgb}229;192;123${rc}"  # #e5c07b
  "${rgb}209;179;255${rc}"  # #d1b3ff
  "${rgb}164;210;121${rc}"  # #a4d279
  "${rgb}162;176;246${rc}"  # #a2b0f6
)
zstyle ':fzf-tab:*' group-colors $FZF_TAB_GROUP_COLORS

completion-switch() {
  if $FZF_TAB_ENABLED; then
    disable-fzf-tab
    zstyle ':completion:*:*:*:*:descriptions' format '%F{blue}%B-- %D%d --%b%f'
    FZF_TAB_ENABLED=false
  else
    enable-fzf-tab
    zstyle ':completion:*:*:*:*:descriptions' format '-- %d --'
    FZF_TAB_ENABLED=true
  fi
}
zle -N completion-switch

FZF_TAB_ENABLED=false
completion-switch

znap source zsh-users/zsh-autosuggestions

export ZSH_AUTOSUGGEST_STRATEGY=(match_prev_cmd history completion)
export ZSH_AUTOSUGGEST_USE_ASYNC=1  # suggestions will be fetched asynchronously

pasteinit() {
  OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
  zle -N self-insert url-quote-magic
}

pastefinish() {
  zle -N self-insert $OLD_SELF_INSERT
}

zstyle :bracketed-paste-magic paste-init pasteinit
zstyle :bracketed-paste-magic paste-finish pastefinish

ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(bracketed-paste)

# ZVM_INIT_MODE=sourcing

# if [[ ! -d $ZNAP[PLUGINS]/jeffreytse/zsh-vi-mode ]]; then
#   git clone "https://github.com/jeffreytse/zsh-vi-mode.git" $ZNAP[PLUGINS]/jeffreytse/zsh-vi-mode
#   git -C $ZNAP[PLUGINS]/zsh-vi-mode checkout c1480b4
# fi

znap source jeffreytse/zsh-vi-mode

ZVM_VI_SURROUND_BINDKEY=classic
ZVM_READKEY_ENGINE=$ZVM_READKEY_ENGINE_DEFAULT

ZVM_NORMAL_MODE_CURSOR=$ZVM_CURSOR_BLOCK
ZVM_INSERT_MODE_CURSOR=$ZVM_CURSOR_UNDERLINE

# zvm_after_init_commands+=(
#   #
#   "zvm_bindkey viins '^R' mcfly-history-widget"
# )

zvm_after_init_commands+=(
  zvm_after_keybindings
)

# znap source junegunn/fzf shell/key-bindings.zsh
gitfile $ZSH[scripts]/fzf-key-bindings.zsh 'https://github.com/junegunn/fzf/blob/master/shell/key-bindings.zsh'
source $ZSH[scripts]/fzf-key-bindings.zsh

# gitfile $HOME/.local/bin/fzf-tmux 'https://github.com/junegunn/fzf/blob/master/bin/fzf-tmux'

# gitfile $ZSH[scripts]/fzf-completion.zsh 'https://github.com/junegunn/fzf/blob/master/shell/completion.zsh'
# source $ZSH[scripts]/fzf-completion.zsh

gitfile $HOME/.local/share/man/man1/fzf.1 'https://github.com/junegunn/fzf/blob/master/man/man1/fzf.1'

# gitfile $ZSH[scripts]/fzf-marks.zsh 'https://github.com/urbainvaes/fzf-marks/blob/master/fzf-marks.plugin.zsh'
# source $ZSH[scripts]/fzf-marks.zsh
#
# export FZF_MARKS_FILE="${HOME}/.cache/zsh/fzf-marks"
#
# export FZF_MARKS_JUMP='^f'  # Ctrl-f
# bindkey ${FZF_MARKS_JUMP:-'^g'} fzm

# zinit ice wait"2" lucid id-as"auto" as"null"
# zinit snippet https://github.com/junegunn/fzf/blob/master/plugin/fzf.vim

# export FZF_TMUX_OPTS="-p"

export FZF_DEFAULT_OPTS='--height 70% --layout=reverse --border'
# export FZF_DEFAULT_OPTS='--height 75% --layout=reverse --border --preview="head -30 {}"'
# export FZF_DEFAULT_OPTS="--reverse --preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview'"

# export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow -g "!{.git,node_modules}/*" 2> /dev/null'
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow -g "!{.git,node_modules}" 2> /dev/null'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

if (( $+commands[bfs] )); then
  # # don't show hidden folders
  # export FZF_ALT_C_COMMAND="bfs -type d -nohidden -L -print 2> /dev/null"

  # show hidden folders
  export FZF_ALT_C_COMMAND="bfs -type d -L -print 2> /dev/null"
else
  print $(color Yellow 'Warning:') $(color White 'fzf') use $(color White 'bfs') utility but it is $(color Red 'not installed\!')
  print $(color White "https://github.com/tavianator/bfs")
fi

fzf-file-widget() {

  # If $PWD is not root ('/') add '/' char to make path valid.
  if [ ${PWD} = '/' ]
  then
    local fzf_full_path="/$(__fsel)"
  else
    local fzf_full_path="${PWD}/$(__fsel)"
  fi

  # Exchange the substring at the beginning of the $fzf_full_path
  # variable equal to ${HOME} with '~' symbol.
  fzf_full_path="${fzf_full_path/#${HOME}/~}"

  LBUFFER="${LBUFFER}${fzf_full_path}"

  local ret=$?
  zle reset-prompt
  return $ret
}

if (( $+commands[atuin] )); then
  . "$HOME/.atuin/bin/env"
  eval "$(atuin init zsh)"
fi

if (( $+commands[zoxide] )); then
  _ZO_ECHO=1
  znap eval zoxide 'zoxide init zsh'
fi

# znap install cirala/vifmimg
znap install anuvyklack/vifmimg

export VIFM_PANE_STRATEGY=left
znap install anuvyklack/vifmpane

local -A CONDA
CONDA[home]="/opt/miniconda3"
CONDA[version]=$($CONDA[home]/bin/conda --version)

znap eval conda "${CONDA[home]}/bin/conda shell.zsh hook  # $CONDA[version]"

ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)
znap source zsh-users/zsh-syntax-highlighting

znap source zsh-users/zsh-history-substring-search

zvm_after_keybindings() {
  # <C-r> - fussy search in history.
  zvm_bindkey viins '^r' fzf-history-widget
  # zvm_bindkey viins '^r' mcfly-history-widget

  # Switch group in fzf-tab with `,` and `.` ('<' and '>' keys).
  zstyle ':fzf-tab:*' switch-group ',' '.'

  zvm_bindkey viins "^k" history-substring-search-up
  zvm_bindkey viins "^j" history-substring-search-down
}

bindkey \` autosuggest-accept

# bindkey '^[[Z' toggle-fzf-tab
bindkey '^[[Z' completion-switch

# bindkey "^K" history-substring-search-up
# bindkey "^J" history-substring-search-down

bindkey '\eh' run-help

bindkey -s '\e1' "!:0-0 \t"
bindkey -s '\e2' "!:1-1 \t"
bindkey -s '\e3' "!:2-2 \t"
bindkey -s '\e4' "!:3-3 \t"
bindkey -s '\e5' "!:4-4 \t"

# bindkey '^o' run_ranger
bindkey '^o' run_vifm

alias history_clear_dups="awk '!visited[$0]++' $ZSH[cache]/zsh_history | sponge $ZSH[cache]/zsh_history"

ialias history_stat="history 0 | awk '{print \$2}' | sort | uniq -c | sort -n -r | head"

ialias -g L='| less'

ialias cls='clear'      # clear the screen
ialias help='run-help'  # Bash 'help' function analog.
ialias ping='ping -c 1' # Пингуем один раз вместо бесконечности.
ialias tree='tree -I .git -I .github'

ialias df='df -h'
ialias du='du -h'

if (( $+commands[exa] )); then
  # -F / --classify
  # --no-user
  # --no-time
  # --icons
  # --color=always
  alias ls='exa -F --group-directories-first'
  alias ll='exa -lF --group-directories-first --git'
else
  alias ls='ls --color=auto --group-directories-first'
fi

if (( $+commands[nvim] )); then
  ialias vim="nvim"
  ialias vimdiff="nvim -d"
  ialias neovide="neovide --multiGrid --geometry=340x120"
fi

if [[ $(grep -Es '^ID_LIKE=.*(?:ubuntu|debian)' /etc/os-release) ]]; then
  ialias fd=fdfind
fi

alias gs='git status'
alias gss='git status -s'
alias gc='git checkout'
alias gd='git diff'
alias gg='git graph'
alias -g random='-m curl -s http://whatthecommit.com/index.txt'

alias ..=' cd ..'
alias ...=' cd ../..'
alias ....=' cd ../../..'
alias .....=' cd ../../../..'

ialias mkdir='nocorrect mkdir -vp'

ialias mv='nocorrect mv -v'
ialias cp='nocorrect cp -vR'  # рекурсивное копирование
ialias rm='nocorrect rm -v'

ialias grep='grep --color=auto'
ialias wget='wget -c'  # автоматическое продолжение при разрыве соединения

ialias :q='exit'
ialias :Q='exit'

# ialias vifm="vifmcd"

unset my_zsh_functions

# vim: tw=75 ts=2 sw=2 fdm=marker
