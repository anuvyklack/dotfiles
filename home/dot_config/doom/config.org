#+startup: show2levels
#+auto_tangle: t

* config.el
:PROPERTIES:
:header-args: :tangle "./config.el"
:END:

- ~setq!~ is a drop-in replacement for ~setq~ and *should* be used instead of ~setopt~.
  Unlike ~setq~, this triggers custom setters on variables. Unlike ~setopt~, this
  won't needlessly pull in dependencies.
- ~load!~ for loading external *.el files relative to this one
- ~use-package!~ for configuring packages
- ~after!~ for running code after a package has loaded
- ~add-load-path!~ for adding directories to the ~load-path~, relative to
  this file. Emacs searches the ~load-path~ when you load packages with
  ~require~ or ~use-package~.
- ~map!~ for binding new keys

To get information about any of these functions/macros, move the cursor over the
highlighted symbol at press =K= (or =C-c c k=). This will open documentation for it,
including demos of how they are used.

You can also try =gd= (or =C-c c d=) to jump to their definition and see how
they are implemented.

** Preamble
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; no-byte-compile: t -*-
;;;
;;; Commentary:
;;; This file was automatically generated by `org-babel-tangle'.
;;; Do not change this file.  Main config is located in ~/.config/emacs/README.org
;;;
;;; Code:
#+end_src

** My custom functions
#+begin_src emacs-lisp
;; https://stackoverflow.com/questions/24356401/how-to-append-multiple-elements-to-a-list-in-emacs-lisp
(defun my/add-to-list (lst elements &optional append)
  "Add ELEMENTS to the front of the LIST.

If APPEND is non-nil add ELEMENTS to the end of the LIST.
This function change the value of the LIST symbol.

LST sould be a symbol.
ELEMENTS could be either a list or a single element."
  (unless (consp elements)
    (setq elements (list elements)))
  (set lst (if append
               (append (symbol-value lst) elements)
             (append elements (symbol-value lst)))))
#+end_src

#+begin_src emacs-lisp
(defun my/remove-from-list (list elements)
  "Remove ELEMENTS from the LIST.

LIST should be a symbol.
ELEMENTS could be either a list or a single element."
  (unless (consp elements)
    (setq elements (list elements)))
  (dolist (element elements)
    (set list (remove element (symbol-value list)))))
#+end_src

#+begin_src emacs-lisp
(defun my/set-face-attribute (face-specs)
  (unless (listp (car face-specs))
    (setq face-specs (list face-specs)))
  (dolist (s face-specs)
    (-let [(face . spec) s]
      (apply #'set-face-attribute face nil spec))))
#+end_src

#+begin_src emacs-lisp
(defun my-concat (strings separator)
  "Concatenate STRINGS using SEPARATOR"
  (mapconcat #'identity strings separator))
#+end_src

** Libraries
*** dash
#+begin_src emacs-lisp
(require 'dash)
(add-hook 'after-init-hook 'global-dash-fontify-mode)
(with-eval-after-load 'info-look
  (dash-register-info-lookup))
#+end_src

** Basic settings

User credentials. Some functionality uses this to identify you, e.g. GPG
configuration, email clients, file templates and snippets.
#+begin_src emacs-lisp
(setq user-full-name "Yuriy Artemyev"
      user-mail-address "anuvyklack@gmail.com")
#+end_src

=ga= keys in normal-state (native =M-=== key-chord) will show human readable output.
#+begin_src emacs-lisp
(setq! what-cursor-show-names t)
#+end_src

~y-or-n-p~
#+begin_src emacs-lisp
(setq! use-short-answers t)
#+end_src

Automatically revert the buffer when its visited file changes on disk. Auto
Revert will not revert a buffer if it has unsaved changes, or if its file on
disk is deleted or renamed.
#+begin_src emacs-lisp
(global-auto-revert-mode)
#+end_src

#+begin_src emacs-lisp
(setq! comment-empty-lines t)
#+end_src

Disable exit prompt
#+begin_src emacs-lisp
(setq confirm-kill-emacs nil)
#+end_src

*** help system
#+begin_src emacs-lisp
(after! helpful
  (global-set-key [remap describe-symbol] #'helpful-symbol))

(map! :after embark
      :map embark-symbol-map
      "h" #'helpful-symbol)
#+end_src

*** warnings
#+begin_src emacs-lisp
;; (add-to-list 'warning-suppress-types '(obsolet))
#+end_src

From [[https://emacs.stackexchange.com/questions/5636/when-installing-a-package-with-package-el-how-to-never-show-the-compile-log-buf][here]]. Tested working to avoid site-lisp byte-compile warning buffer being
displayed at start.
#+begin_src emacs-lisp
(setq byte-compile-warnings nil)
#+end_src

** Appearance
*** Fonts

#+begin_src emacs-lisp
;; (setq use-default-font-for-symbols nil)
#+end_src

**** Doom fonts
Doom exposes five (optional) variables for controlling fonts in Doom:

- ~doom-font~ :: the primary font to use
- ~doom-variable-pitch-font~ :: a non-monospace font (where applicable)
- ~doom-big-font~ :: used for ~doom-big-font-mode~; use this for presentations or streaming.
- ~doom-symbol-font~ :: for symbols
- ~doom-serif-font~ :: for the ~fixed-pitch-serif~ face

See =C-h v doom-font= for documentation and more examples of what they
accept. For example:

Default:
: (setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
:       doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))

#+begin_src emacs-lisp
;; (setq doom-font (font-spec :family "Inconsolata LGC" :size 12.5))
(setq doom-font (font-spec :family "PragmataPro Mono Liga" :size 13.9))
#+end_src

If you or Emacs can't find your font, use =M-x describe-font= to look them
up, =M-x eval-region= to execute elisp code, and =M-x doom/reload-font= to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

**** Icons
Emacs doesn't recognize [[id:20241212T184323][Vscode Codicons]] and [[id:20241212T184111][Material Design Icons]] fonts.
So for icons need to install [[id:20241212T183912][Symbols Nerd Font Mono]] and [[id:20241212T184032][Material Icons]] fonts.

***** COMMENT all-the-icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :when (display-graphic-p)
  ;; :when window-system
  :config
  (let ((cache (file-name-concat user-emacs-directory ".all-the-icons-font-installed")))
    (unless (file-exists-p cache)
      (all-the-icons-install-fonts t)
      (with-temp-buffer (write-file cache)))))
#+end_src

***** Nerd Font
#+begin_src emacs-lisp
(set-fontset-font t '(?\xf0001 . ?\xf1af0) "Symbols Nerd Font Mono" nil 'prepend)
#+end_src

#+begin_src emacs-lisp
;; (set-fontset-font t ?\xe876 "Material Design Icons" nil 'prepend)
;; (set-fontset-font t ? "Material Design Icons" nil 'prepend)
;; (set-fontset-font t ? "Material Design Icons Desktop" nil 'prepend)
#+end_src

***** Unicode Symbols for Legacy Computing
#+begin_src emacs-lisp
(set-fontset-font t '(?\x1fb00 . ?\x1fbca) "LegacyComputing" nil 'prepend)
(set-fontset-font t '(?🯰 . ?🯹) "LegacyComputing" nil 'prepend)
#+end_src

***** Codicons
#+begin_src emacs-lisp
;; (set-fontset-font t 'latin "Noto Sans")
;; (set-fontset-font t '(?\xea60 . ?\xec11) "codicon" nil 'prepend)

;; (set-fontset-font t '(? . ?) "codicon")

;; (let ((fontset (face-attribute 'default :fontset)))
;;   (set-fontset-font fontset '(?\xea60 . ?\xec11) "codicon" nil 'append))

;; (set-fontset-font (frame-parameter nil 'font)
;;                   '(?\xea60 . ?\xec11)
;;                   (font-spec :family "codicon"
;;                              :weight nil
;;                              :size nil)
;;                   nil
;;                   'prepend)
#+end_src

***** COMMENT FontAwesome
#+begin_src emacs-lisp
(let ((fontset (face-attribute 'default :fontset)))
  (set-fontset-font fontset '(?\xf000 . ?\xf2ff) "FontAwesome" nil 'append))
#+end_src

*** Line Height
#+begin_src emacs-lisp
(setq-default line-spacing 1)
#+end_src

*** Long lines
Do not wrap long lines by default.
#+begin_src emacs-lisp
(setq-default truncate-lines t)
#+end_src

**** Visually wrap long lines

- ~+word-wrap-mode~ ([[kbd:][SPC tw]]) ::
  Visually wrap long lines without affecting original file. Opposit to
  ~auto-fill-mode~ which *hard* wrap lines (insert new line chars). Internaly
  it is based on next modes:

  - ~visual-line-mode~ :: Built-in.

  - [[https://codeberg.org/joostkremers/visual-fill-column][visual-fill-column]] ::
    Visually wrap lines at the fill-column instead of the window margin.

  - [[https://github.com/emacsmirror/adaptive-wrap][adaptive-wrap]] ::
    Visually prepend wrapped lines to preserve visual column structures.

Settings for ~+word-wrap-mode~:
- ~auto~ :: hard wrapping, i.e. ~auto-fill-mode~, won't be affected;
- ~soft~ :: hard wrapping will be turn off forcibly when ~+word-wrap-mode~ is on.
#+begin_src emacs-lisp
(setq! +word-wrap-fill-style 'soft)
#+end_src

Fix vertical window splitting while ~visual-line-mode~ is on. [[https://codeberg.org/joostkremers/visual-fill-column#splitting-a-window][In depth explanation]].
#+begin_src emacs-lisp
(setq! visual-fill-column-enable-sensible-window-split t)
#+end_src

#+begin_src emacs-lisp
;; (pushnew! +word-wrap-text-modes 'fundamental-mode)
#+end_src

*** Color theme

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set ~doom-theme~ or manually load a theme with the
~load-theme~ function.

**** COMMENT doom-theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-earl-grey)
#+end_src

**** ef-themes
- [[https://protesilaos.com/emacs/ef-themes][Official site]]

#+begin_src emacs-lisp
(require 'ef-themes)
(setq ef-themes-mixed-fonts t
      ef-themes-variable-pitch-ui t)
#+end_src

If you like two specific themes and want to switch between them, you
can specify them in ~ef-themes-to-toggle~ and then invoke the command
~ef-themes-toggle~.  All the themes are included in the variable
~ef-themes-collection~.
#+begin_src emacs-lisp
;; (setq ef-themes-to-toggle '(ef-summer ef-winter))
#+end_src

#+begin_src emacs-lisp
(custom-theme-set-faces! 'ef-light
  '(help-key-binding :foreground "DarkBlue" :background "grey96"
    :box (:line-width (-1 . -1) :color "grey80")
    :inherit fixed-pitch)
  '(line-number :background "#f5f5f5" :inherit fixed-pitch)
  '(line-number-current-line :background "#dddddd" :weight bold :inherit line-number)
  '(fringe :background "#f3f3f3"))
#+end_src

#+begin_src emacs-lisp
(setq ef-themes-common-palette-overrides
      '((cursor black)))
#+end_src

***** Org-mode
****** Code blocks
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (custom-theme-set-faces! 'ef-light
    '(org-verbatim :foreground "#4250ef" :background "#f5f5f5")
    '(org-code     :foreground "#cf25aa" :background "#f5f5f5")))
#+end_src

****** COMMENT Lists
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (custom-theme-set-faces! 'ef-light
    '(org-list-dt :foreground "black" :inherit bold)))
#+end_src

****** Headings
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (custom-theme-set-faces! 'ef-light
    '(org-level-1 :foreground "#375cd8" :weight normal :height 1.09)
    '(org-level-2 :foreground "#cf25aa" :weight normal :height 1.09)
    '(org-level-3 :foreground "#1f77bb" :weight normal :height 1.09)
    '(org-level-4 :foreground "#b65050" :weight normal :height 1.09)
    '(org-level-5 :foreground "#6052cf" :weight normal :height 1.09)))

;; (with-eval-after-load 'org
;;   (let ((font
;;          '(:family "ITC Avant Garde Gothic W1G" :weight medium)
;;          ;; '(:family "Basic Commercial LT" :weight normal)
;;          ))
;;     (custom-theme-set-faces! 'ef-light
;;      `(org-level-1 :foreground "#375cd8" :height 1.09 ,@font)
;;      `(org-level-2 :foreground "#cf25aa" :height 1.09 ,@font)
;;      `(org-level-3 :foreground "#1f77bb" :height 1.09 ,@font)
;;      `(org-level-4 :foreground "#b65050" :height 1.09 ,@font)
;;      `(org-level-5 :foreground "#6052cf" :height 1.09 ,@font))))
#+end_src

Add a box with the same color as a background around every org heading. It does
take effect of adding padding around headings, but it is a hack and not reliable.
#+begin_src emacs-lisp
;; (with-eval-after-load 'org
;;   (my/set-face-attribute
;;    `((org-level-1 :foreground "#375cd8" :weight normal :height 1.08
;;                   :box (:line-width 4 :color ,(face-background 'default)))
;;      (org-level-2 :foreground "#cf25aa" :weight normal :height 1.08
;;                   :box (:line-width 4 :color ,(face-background 'default)))
;;      (org-level-3 :foreground "#1f77bb" :weight normal :height 1.08
;;                   :box (:line-width 4 :color ,(face-background 'default)))
;;      (org-level-4 :foreground "#b65050" :weight normal :height 1.08
;;                   :box (:line-width 4 :color ,(face-background 'default)))
;;      (org-level-5 :foreground "#6052cf" :weight normal :height 1.08
;;                   :box (:line-width 4 :color ,(face-background 'default))))))
#+end_src

****** "TODO" keywords
#+begin_src emacs-lisp
(after! org
  (setq org-todo-keyword-faces
        '(("SOMEDAY"    . (:foreground "#6e6e6e"))
          ;; ("TODO"       . (:foreground "#cf7200"))
          ;; ("NEXT"       . (:foreground "#de0000"))
          ("INPROGRESS" . (:foreground "#0076c8"))
          ("WAITING"    . (:foreground "#cf7200"))
          ;; ("DONE"       . (:foreground "#598d3f"))
          ("CANCELLED"  . (:foreground "#63735b"))
          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
          ("󰒅" . (:foreground "#7b7b7b"))
          ;; ("󰿦" . (:foreground "#7b7b7b"))
          ;; ("󰔌" . (:foreground "#7b7b7b"))
          ;; ("󰄱" . (:foreground ""))
          ;; ("󱗝" . (:foreground ""))
          ;; ("󰡖" . (:foreground ""))
          ;; ("󰤌" . (:foreground ""))
          ;; ("󱅊" . (:foreground ""))
          ("󰔟" . (:foreground "#0076c8"))
          ;; ("󰄵" . (:foreground ""))
          ("󰅘" . (:foreground "#6e6e6e"))
          ("󱈎" . (:foreground "#6e6e6e"))
          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
          ("󰃃" . (:foreground "#7b7b7b"))
          ;; ("" . )
          ;; ("󱍻" . )
          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
          ("TOREAD" . (:foreground "#7b7b7b"))
          ;; ("READING")
          ;; ("READ")
          )))
#+end_src

****** Priorities
#+begin_src emacs-lisp
(setq org-priority-faces
      '((?A :foreground "red"     :weight bold)
        (?B :foreground "orange"  :weight bold)
        (?C :foreground "#7CB342" :weight bold)
        (?D :foreground "#2196F3" :weight bold)
        ;; (?D :foreground "#AB47BC" :weight bold)
        ))
#+end_src

***** avy faces
#+begin_src emacs-lisp :noweb-ref ef-avy-faces
(with-eval-after-load 'avy
  (custom-theme-set-faces! 'ef-light
    '(avy-background-face :foreground "#7e6f8e" :background unspecified)
    '(avy-lead-face       :foreground "grey5"   :background "#ffe9b0" :weight bold)
    ;; '(avy-lead-face-0     :background "#ffced7" :weight normal)
    '(avy-lead-face-0     :background "#ffe2e7" :weight normal)
    '(avy-lead-face-1     :foreground "black"   :background "#ffd5ff" :weight normal)
    '(avy-lead-face-2     :background "#c1ffc4")))
#+end_src

#+begin_src emacs-lisp :noweb-ref ef-avy-faces
;; (with-eval-after-load 'avy
;;   (custom-theme-set-faces! 'ef-light
;;    '(avy-lead-face   :foreground "red"   :background unspecified :weight bold)
;;    '(avy-lead-face-0 :foreground "brown" :background unspecified :weight normal)))
#+end_src

***** eglot faces
#+begin_src emacs-lisp
(with-eval-after-load 'eglot
  (custom-theme-set-faces! 'ef-light
    '(eglot-highlight-symbol-face :background "grey98"
                                  :box (:line-width (-1 . -1) :color "grey75")
                                  :inherit unspecified)))
#+end_src

***** dired
#+begin_src emacs-lisp
;; (with-eval-after-load 'dired
;;   (ef-themes-with-colors
;;     (my/set-face-attribute
;;      `((dired-symlink :foreground ,link-alt :inherit nil)))))

(with-eval-after-load 'dired
  (ef-themes-with-colors
    (custom-theme-set-faces! 'ef-light
      `(dired-symlink :foreground ,link-alt :inherit nil))))
#+end_src

****** dired-filter
#+begin_src emacs-lisp
(with-eval-after-load 'dired-filter
  (ef-themes-with-colors
    (my/set-face-attribute
     `((dired-filter-group-header :background ,bg-blue-subtle :weight bold
                                  :extend t
                                  :inherit nil)))))
#+end_src

****** COMMENT dired-rainbow
Unfortunatly this faces overrides *marked* and *flaged* files faces,
what I don't like.

#+begin_src emacs-lisp
(use-package! dired-rainbow
  :config
  (ef-themes-with-colors
    ;; (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    ;; (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    ;; (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    ;; (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    ;; (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    ;; (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
    ;; (dired-rainbow-define log "#c17d11" ("log"))
    ;; (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    ;; (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    ;; (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
    ;; (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    ;; (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    ;; (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    ;; (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    ;; (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    ;; (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))

    (eval `(dired-rainbow-define document (:foreground "#d70044")
                                 ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx")))
    (eval `(dired-rainbow-define image (:foreground ,cyan)
                                 ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg")))
    (eval `(dired-rainbow-define compressed (:foreground "#dd0091" :weight bold)
                                 ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar")))

    ;; highlight executable files, but not directories
    (eval `(dired-rainbow-define-chmod executable-unix (:foreground ,green) "-.*x.*"))))
#+end_src

***** lsp-mode faces
#+begin_src emacs-lisp
(custom-theme-set-faces! 'ef-light
 '(lsp-face-highlight-textual :background "grey98"
                              :box (:line-width (-1 . -1) :color "grey75")
                              :inherit unspecified)
 '(lsp-face-highlight-read    :background "#f6ffff"
                              :box (:line-width (-1 . -1) :color "SkyBlue")
                              :inherit unspecified)
 '(lsp-face-highlight-write   :background "snow"
                              :box (:line-width (-1 . -1) :color "PaleVioletRed1")
                              :inherit unspecified)
 '(lsp-inlay-hint-face        :height 0.8 :inherit shadow)
 '(lsp-signature-posframe     :foreground "black" :background "white")
 '(lsp-ui-sideline-global     :foreground "DeepSkyBlue3"))
#+end_src

****** lsp-ui-doc
~lsp-ui-glance~ frame appearence

#+begin_src emacs-lisp
(after! lsp-ui
  (setq! lsp-ui-doc-max-height 17
         ;; lsp-ui-doc-delay 0.2
         lsp-ui-doc-border "black"))

(custom-theme-set-faces! 'ef-light
  '(lsp-ui-doc-background :background "white"))
#+end_src

***** flycheck
#+begin_src emacs-lisp
(custom-theme-set-faces! 'ef-light
  '(flycheck-error-list-highlight :background "grey96"))
#+end_src

****** flycheck-posframe
#+begin_src emacs-lisp
(custom-set-faces!
 '(flycheck-posframe-face :background "grey96"
                          ;; :box (:line-width (-1 . -1) :color "grey75")
                          :inherit unspecified)
 '(flycheck-posframe-error-face :background "misty rose"
                                ;; :box (:line-width (-1 . -1) :color "grey75")
                                :inherit unspecified))
#+end_src
***** Load theme
Make customisations that affect Emacs faces BEFORE loading a theme
(any change needs a theme re-load to take effect).
#+begin_src emacs-lisp
;; (load-theme 'ef-light :no-confirm)
(setq doom-theme 'ef-light)
#+end_src

**** COMMENT leuven

I can wholeheartedly recommend the built-in =leuven= theme for org-mode work.
I normally don't go in for light themes, but this one has so many nice little
touches to spruce up org-mode elements I find myself switching to it from my
usual dark doom or modus themes when working on org-mode projects.

#+begin_src emacs-lisp
;; (load-theme 'leuven :no-confirm)
(setq doom-theme 'leuven)
#+end_src

**** COMMENT modus-themes
#+begin_src emacs-lisp
(require 'modus-themes)
(load-theme 'modus-operandi :no-confirm)
#+end_src

*** Display line numbers

This determines the style of line numbers in effect. If set to ~nil~, line
numbers are disabled. For relative line numbers, set this to ~relative~.
#+begin_src emacs-lisp
(setq! display-line-numbers-type t
       ;; display-line-numbers-width 4
       display-line-numbers-grow-only t
       display-line-numbers-width-start t)

;; (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

*** Display fill-column indicator
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src

*** Highlight current line

Disable ~hl-line-mode~ [[https://github.com/doomemacs/doomemacs/issues/4206][(issue #4206]])
#+begin_src emacs-lisp
(remove-hook 'doom-first-buffer-hook #'global-hl-line-mode)
#+end_src

*** Scrolling
#+begin_src emacs-lisp
(setq! scroll-margin 0
       auto-window-vscroll nil
       scroll-error-top-bottom nil)
#+end_src

#+begin_src emacs-lisp
(setq! mouse-wheel-tilt-scroll t
       mouse-wheel-progressive-speed nil)
#+end_src

**** Do not jump half the page when point goes out of the screen.

#+begin_src emacs-lisp
(setq! scroll-conservatively 101)
#+end_src

Restore original value for some functions.
#+begin_src emacs-lisp
(defun with-default-scroll-settings (fun)
  (eval `(define-advice ,fun
             (:around (orig-fun &rest args)
                      scroll-conservatively)
           (-let (((scroll-conservatively) (get 'scroll-conservatively 'standard-value)))
             (apply orig-fun args)))))

(mapcar #'with-default-scroll-settings '(dired-do-find-regexp-and-replace
                                         projectile-replace
                                         projectile-replace-regexp))
#+end_src

**** Smooth scrolling

[[https://lists.gnu.org/archive/html/help-gnu-emacs/2022-02/msg00352.html][Why is jit-lock-stealth-time nil by default?]]
#+begin_src emacs-lisp
(setq jit-lock-stealth-time 1.25 ; Calculate fonts when idle for 1.25 seconds
      jit-lock-stealth-nice 0.2  ; Seconds between font locking
      jit-lock-chunk-size 4096)
#+end_src

#+begin_src emacs-lisp
(setq jit-lock-defer-time 0)
(with-eval-after-load 'evil
  (add-hook 'evil-insert-state-entry-hook
            (lambda () (setq jit-lock-defer-time 0.25))
            nil t)
  (add-hook 'evil-insert-state-exit-hook
            (lambda () (setq jit-lock-defer-time 0))
            nil t))
#+end_src

***** COMMENT KaratasFurkan
#+begin_src emacs-lisp
(use-package good-scroll
  :straight (:host github :repo "io12/good-scroll.el")
  :commands good-scroll-mode
  :custom
  (good-scroll-duration 0.2)
  (good-scroll-point-jump 4)
  ;; :bind
  ;; ("C-v" . fk/smooth-scroll-up)
  ;; ("M-v" . fk/smooth-scroll-down)
  ;; ("C-l" . fk/smooth-recenter-top-bottom)
  ;; :hook
  ;; (dashboard-after-initialize . good-scroll-mode)
  :config
  (defun fk/smooth-scroll-down (&optional pixels)
    "Smooth alternative of M-v `scroll-down-command'."
    (interactive)
    (let ((good-scroll-step (or pixels 300)))
      (good-scroll-down)))

  (defun fk/smooth-scroll-up (&optional pixels)
    "Smooth alternative of C-v `scroll-up-command'."
    (interactive)
    (let ((good-scroll-step (or pixels 300)))
      (good-scroll-up)))

  (defun fk/smooth-recenter-top-bottom ()
    "docstring"
    (interactive)
    (let* ((current-row (cdr (nth 6 (posn-at-point))))
           (target-row (save-window-excursion
                         (recenter-top-bottom)
                         (cdr (nth 6 (posn-at-point)))))
           (distance-in-pixels (* (- target-row current-row) (line-pixel-height)))
           (good-scroll-step distance-in-pixels))
      (when (not (zerop distance-in-pixels))
        (good-scroll--update -1)))))
#+end_src

***** COMMENT good-scroll
#+begin_src emacs-lisp :noweb yes
(use-package good-scroll
  :after evil
  :custom (good-scroll-duration 0.3)
  :config
  (good-scroll-mode)
  ;; Return variables back
  (setq mwheel-scroll-up-function   #'scroll-up
        mwheel-scroll-down-function #'scroll-down)
  <<good-scroll-config>>
  )
#+end_src
****** config
:PROPERTIES:
:header-args: :noweb-ref good-scroll-config
:END:
#+begin_src emacs-lisp
(defun good-scroll--convert-line-to-step (line)
  (cl-typecase line
    (integer              (* line (line-pixel-height)))
    ((or null (member -)) (- (good-scroll--window-usable-height)
                             (* next-screen-context-lines
                                (line-pixel-height))))
    (t                    (line-pixel-height))))
#+end_src

******* COMMENT Rebind scrolling keybindings explicitly
#+begin_src emacs-lisp
(defun good-scroll-up-half-screen ()
  (interactive)
  (good-scroll-move (/ (good-scroll--window-usable-height) 2)))

(defun good-scroll-down-half-screen ()
  (interactive)
  (good-scroll-move (- (/ (good-scroll--window-usable-height) 2))))

(general-def :states 'motion
  "C-d" 'good-scroll-up-half-screen
  "C-u" 'good-scroll-down-half-screen
  "C-f" 'good-scroll-up-full-screen
  "C-b" 'good-scroll-down-full-screen)

;; Page-Up / Page-Down keys
(general-def
  "<next>"  'good-scroll-up-full-screen
  "<prior>" 'good-scroll-down-full-screen)
#+end_src

******** COMMENT Evil =C-y= / =C-e= keybindings:

#+begin_src emacs-lisp
(evil-define-command evil-scroll-line-up (count)
  "Scroll the window COUNT lines upwards."
  :repeat nil
  :keep-visual t
  (interactive "p")
  (let ((scroll-preserve-screen-position nil)
        (steps (- (good-scroll--convert-line-to-step count))))
    (good-scroll-move steps)))

(evil-define-command evil-scroll-line-down (count)
  "Scroll the window COUNT lines downwards."
  :repeat nil
  :keep-visual t
  (interactive "p")
  (let ((scroll-preserve-screen-position nil)
        (steps (good-scroll--convert-line-to-step count)))
    (good-scroll-move steps)))
#+end_src

******* Rebind scrolling keybindings implicitly

Rebind scrolling keybindings implicitly by replacing
~scroll-up~ / ~scroll-down~ functions.

#+begin_src emacs-lisp
(defun good-scroll--scroll-up (&optional arg)
  (good-scroll-move (good-scroll--convert-line-to-step arg)))

(defun good-scroll--scroll-down (&optional arg)
  (good-scroll-move (- (good-scroll--convert-line-to-step arg))))

(advice-add 'scroll-up   :override 'good-scroll--scroll-up)
(advice-add 'scroll-down :override 'good-scroll--scroll-down)
#+end_src

******* Make evil =C-y= / =C-e= scroll =n= lines at time
#+begin_src emacs-lisp
(let ((n 3)) ;; number of lines for short move
  (define-advice evil-scroll-line-down (:around (callback count) triple)
    (funcall callback (* count n)))

  (define-advice evil-scroll-line-up (:around (callback count) triple)
    (funcall callback (* count n))))
#+end_src

***** pixel-scroll
#+begin_src emacs-lisp :noweb yes
(use-package! pixel-scroll
  :hook (after-init . pixel-scroll-precision-mode)
  :custom
  ;; (pixel-scroll-precision-use-momentum nil)
  (pixel-scroll-precision-interpolate-page t)
  (pixel-scroll-precision-interpolate-mice t)
  (pixel-scroll-precision-large-scroll-height 20.0)
  (pixel-scroll-precision-interpolation-total-time 0.3)
  :config
  <<pixel-scroll-config>>
  )
#+end_src

****** Evil keybindings for smooth scrolling
:PROPERTIES:
:header-args: :noweb-ref pixel-scroll-config
:END:
#+begin_src emacs-lisp
(let ((num-of-lines 4))
  (evil-define-command my/pixel-scroll-interpolate-line-up (count)
    :repeat nil
    :keep-visual t
    (interactive "p")
    (let* ((pixel-scroll-precision-interpolation-total-time 0.08)
           (pixels-per-line (/ (window-text-height nil t)
                               (window-text-height)))
           (delta (* pixels-per-line
                     num-of-lines
                     count)))
      (pixel-scroll-precision-interpolate delta nil 1)))

  (evil-define-command my/pixel-scroll-interpolate-line-down (count)
    :repeat nil
    :keep-visual t
    (interactive "p")
    (let* ((pixel-scroll-precision-interpolation-total-time 0.08)
           (pixels-per-line (/ (window-text-height nil t)
                               (window-text-height)))
           (delta (- (* pixels-per-line
                        num-of-lines
                        count))))
      (pixel-scroll-precision-interpolate delta nil 1))))

(evil-define-command my/pixel-scroll-interpolate-half-page-up ()
  "Interpolate a scroll upwards by half page."
  :repeat nil
  :keep-visual t
  (interactive)
  (pixel-scroll-precision-interpolate (/ (window-text-height nil t) 2)
                                      nil 1))

(evil-define-command my/pixel-scroll-interpolate-half-page-down ()
  "Interpolate a scroll downwards by half page."
  :repeat nil
  :keep-visual t
  (interactive)
  (pixel-scroll-precision-interpolate (- (/ (window-text-height nil t) 2))
                                      nil 1))

(evil-add-command-properties #'pixel-scroll-interpolate-down :repeat nil :keep-visual t)
(evil-add-command-properties #'pixel-scroll-interpolate-up   :repeat nil :keep-visual t)

(general-def
  [remap evil-scroll-down]      #'my/pixel-scroll-interpolate-half-page-down ; C-d
  [remap evil-scroll-up]        #'my/pixel-scroll-interpolate-half-page-up   ; C-u
  [remap evil-scroll-page-down] #'pixel-scroll-interpolate-down              ; C-f
  [remap evil-scroll-page-up]   #'pixel-scroll-interpolate-up                ; C-b
  [remap evil-scroll-line-down] #'my/pixel-scroll-interpolate-line-down      ; C-e
  [remap evil-scroll-line-up]   #'my/pixel-scroll-interpolate-line-up)       ; C-y

;; (general-def :keymaps 'help-mode-map :states 'normal
;;   "C-f" 'pixel-scroll-interpolate-down
;;   "C-b" 'pixel-scroll-interpolate-up)
#+end_src

****** HACK: Add smooth-scrolling to ~help-mode~ buffers
:PROPERTIES:
:header-args: :noweb-ref pixel-scroll-config
:END:
#+begin_src emacs-lisp
(add-hook 'help-mode-hook
          (defun my/help-mode-remove-evil-scroll-keymaps ()
            (map! :map help-mode-map
                  :n "C-f" nil
                  :n "C-b" nil)
            (remove-hook 'help-mode-hook 'my/help-mode-remove-evil-scroll-keymaps)))
#+end_src

***** COMMENT scroll-on-jump
#+begin_src emacs-lisp
(use-package! scroll-on-jump
  :config
  (with-eval-after-load 'evil
    (scroll-on-jump-advice-add evil-undo)
    (scroll-on-jump-advice-add evil-redo)
    (scroll-on-jump-advice-add evil-jump-item)
    (scroll-on-jump-advice-add evil-jump-forward)
    (scroll-on-jump-advice-add evil-jump-backward)
    (scroll-on-jump-advice-add evil-ex-search-next)
    (scroll-on-jump-advice-add evil-ex-search-previous)
    (scroll-on-jump-advice-add evil-forward-paragraph)
    (scroll-on-jump-advice-add evil-backward-paragraph)
    (scroll-on-jump-advice-add evil-goto-mark)

    ;; Actions that themselves scroll.
    (scroll-on-jump-with-scroll-advice-add evil-goto-line)
    (scroll-on-jump-with-scroll-advice-add evil-scroll-down)
    (scroll-on-jump-with-scroll-advice-add evil-scroll-up)
    (scroll-on-jump-with-scroll-advice-add evil-scroll-page-down)
    (scroll-on-jump-with-scroll-advice-add evil-scroll-page-up)
    (scroll-on-jump-with-scroll-advice-add evil-scroll-line-to-center)
    (scroll-on-jump-with-scroll-advice-add evil-scroll-line-to-top)
    (scroll-on-jump-with-scroll-advice-add evil-scroll-line-to-bottom))

  (with-eval-after-load 'goto-chg
    (scroll-on-jump-advice-add goto-last-change)
    (scroll-on-jump-advice-add goto-last-change-reverse))

  (global-set-key (kbd "<C-M-next>") (scroll-on-jump-interactive 'diff-hl-next-hunk))
  (global-set-key (kbd "<C-M-prior>") (scroll-on-jump-interactive 'diff-hl-previous-hunk)))
#+end_src

*** Compose escape signs together to make regexps more readable

=\\= in strings is displayed as a ~easy-escape-character~ (single =\= by default)
and fontified using ~easy-escape-face~.

#+begin_src emacs-lisp
(use-package! easy-escape
  :custom
  (easy-escape-character ?⧵) ;; REVERSE SOLIDUS OPERATOR
  ;; (easy-escape-character ?⧹) ;; BIG REVERSE SOLIDUS
  ;; (easy-escape-character ?＼) ;; FULLWIDTH REVERSE SOLIDUS
  :hook (emacs-lisp-mode . easy-escape-minor-mode))
#+end_src

*** prettify-symbols-mode
#+begin_src emacs-lisp
(setq! prettify-symbols-unprettify-at-point t)
#+end_src

*** Colorize strings that represent colors.
**** rainbow-mode
#+begin_src emacs-lisp
(use-package! rainbow-mode
  :hook (emacs-lisp-mode conf-space-mode fish-mode conf-toml-mode toml-ts-mode))
#+end_src

**** COMMENT colorful-mode
#+begin_src emacs-lisp
(use-package! colorful-mode
  :hook (emacs-lisp-mode conf-space-mode fish-mode conf-toml-mode toml-ts-mode))
#+end_src

** Window managment
- [[https://www.masteringemacs.org/article/demystifying-emacs-window-manager][Demystifying Emacs's Window Manager - Mastering Emacs]]
- [[https://protesilaos.com/codelog/2024-02-08-emacs-window-rules-display-buffer-alist/][Protesilaos: control where buffers are displayed (the ‘display-buffer-alist’)]]
*** variables
If I trying to switch buffer in dedicated window, put it somewhere instead of
error out (what Emacs will do when set to ~nil~).
#+begin_src emacs-lisp
(setq switch-to-buffer-in-dedicated-window 'pop)
#+end_src

By default Emacs distinguishes between automatic and manual window switching. If
you effect a window switch yourself with =C-x b=, it’s manual — and exempt from
any display action rules you create yourself. *I don’t want that.*
#+begin_src emacs-lisp
(setq switch-to-buffer-obey-display-actions t)
#+end_src

Number of slots in side widows for every side of the screen.
#+begin_src emacs-lisp
;; (setq window-sides-slots '(2 2 2 2))
#+end_src

#+begin_src emacs-lisp
(setq window-combination-resize t
      even-window-sizes 'height-only
      window-sides-vertical nil
      fit-window-to-buffer-horizontally t
      ;; window-resize-pixelwise t
      fit-frame-to-buffer t)
#+end_src

*** COMMENT display-buffer-base-action
Default action for ~display-buffer~.
#+begin_src emacs-lisp
(setq display-buffer-base-action
      '((display-buffer-reuse-mode-window
         display-buffer-in-previous-window
         display-buffer-use-some-window)))
#+end_src

*** display-buffer-alist
- [[id:20241124T151533][My notes about display-buffer-alist]]

#+begin_src emacs-lisp
;; (add-to-list 'display-buffer-alist
;;              `(,(rx string-start
;;                     (or "*Apropos*" "*Messages*" "*Help*" "*helpful" "*info*" "*Man" "*Summary*")
;;                     (0+ not-newline))
;;                (display-buffer-reuse-mode-window display-buffer-pop-up-window)
;;                (mode apropos-mode help-mode helpful-mode Info-mode Man-mode messages-buffer-mode)
;;                (window-width . 80)
;;                ;; (window-parameters
;;                ;;  (no-delete-other-windows . t))
;;                (body-function . select-window)))

;; (add-to-list 'display-buffer-alist
;;              `(,(rx string-start
;;                     (or "*Apropos*" "*Messages*" "*Help*" "*helpful" "*info*" "*Man" "*Summary*")
;;                     (0+ not-newline))
;;                (display-buffer-reuse-mode-window
;;                 display-buffer-in-side-window)
;;                (mode apropos-mode help-mode helpful-mode Info-mode Man-mode)
;;                (side . right)
;;                (slot . 0)
;;                (window-width . 80)
;;                (window-parameters
;;                 (no-delete-other-windows . t))))

;; (add-to-list 'display-buffer-alist
;;              '("\\*sly-mrepl"
;;                (display-buffer-at-bottom)
;;                (window-height . 12)))
;; (add-to-list 'display-buffer-alist
;;              '("\\*Calendar*"
;;                (display-buffer-at-bottom)))
;; (add-to-list 'display-buffer-alist
;;              '("\\*shell:"
;;                (display-buffer-below-selected)
;;                (window-height . 12)))
;; (add-to-list 'display-buffer-alist
;;              '("\\magit:"
;;                (display-buffer-same-window)))
;; (add-to-list 'display-buffer-alist
;;              '("\\*Man"
;;                (display-buffer-same-window)))

;; (add-to-list 'display-buffer-alist
;;              '("\\*TeX errors\\*"
;;                (display-buffer-in-side-window)
;;                (side . bottom)
;;                (slot . 3)
;;                (window-height . shrink-window-if-larger-than-buffer)
;;                (dedicated . t)))

;; (add-to-list 'display-buffer-alist
;;              '("\\*TeX Help\\*"
;;                (display-buffer-in-side-window)
;;                (side . bottom)
;;                (slot . 4)
;;                (window-height . shrink-window-if-larger-than-buffer)
;;                (dedicated . t)))
#+end_src

*** popper
**** Which buffers should be considered popups and where display them

Add "select windows" ~display-buffer-base-action~ to select popper-poput
windows. It appears this breaks some behavior, like magit commit window.
eli-zaretskii (Emacs maintainer) says next about it:
"My advice is not to try to change this. Reusing windows is very basic in
Emacs, and changing it everywhere is an up-hill battle which you will
eventually lose.
I suggest to get used to what Emacs does. From personal experience,
it works well, and you might even like it after some time."
#+begin_src emacs-lisp
;; (setq display-buffer-base-action
;;       '(nil . ((body-function . select-window))))
#+end_src

#+begin_src emacs-lisp
(defvar my-grep-modes-list '(occur-mode
                             grep-mode
                             xref--xref-buffer-mode
                             ivy-occur-grep-mode
                             ivy-occur-mode
                             locate-mode
                             flymake-diagnostics-buffer-mode
                             rg-mode)
  "List of major-modes used in occur-type buffers")

;; This does not work at buffer creation since the major-mode for
;; REPLs is not yet set when `display-buffer' is called, but is
;; useful afterwards
(defvar my-repl-modes-list '(matlab-shell-mode
                             ;; sly-mrepl-mode
                             eshell-mode
                             geiser-repl-mode
                             shell-mode
                             eat-mode
                             vterm-mode
                             inferior-python-mode
                             cider-repl-mode
                             fennel-repl-mode
                             jupyter-repl-mode
                             inferior-ess-julia-mode)
  "List of major-modes used in REPL buffers")

(defvar my-repl-names-list
  '("^\\*\\(?:.*?-\\)\\{0,1\\}e*shell[^z-a]*\\(?:\\*\\|<[[:digit:]]+>\\)$"
    ;; "^\\*sly-mrepl .*\\*$"
    "^\\*sly-description\\*"
    "\\*.*REPL.*\\*"
    "\\*MATLAB\\*"
    "\\*Python\\*"
    "^\\*jupyter-repl.*?\\(\\*\\|<[[:digit:]]>\\)$"
    "\\*Inferior .*\\*$"
    "^\\*julia.*\\*$"
    "^\\*cider-repl.*\\*$"
    "\\*ielm\\*"
    "\\*edebug\\*")
  "List of buffer names used in REPL buffers")

(defvar my-help-modes-list '(helpful-mode
                             help-mode
                             aporopos-mode
                             pydoc-mode
                             TeX-special-mode)
  "List of major-modes used in documentation buffers")

(defvar my-man-modes-list '(Man-mode woman-mode)
  "List of major-modes used in Man-type buffers")

(defvar my-compilation-modes-list '(compilation-mode
                                    edebug-eval-mode)
  "List of major-modes used for compilation buffers")

;; my-man-modes-list
;; '(Custom-mode)
;; '("^\\*Warnings\\*$"
;;   ("^\\*Compile-Log\\*$" . hide)
;;   "^\\*Backtrace\\*"
;;   "^\\*evil-registers\\*"
;;   "^\\*Apropos"
;;   "^Calc:"
;;   "^\\*TeX errors\\*"
;;   "^\\*ielm\\*"
;;   "^\\*TeX Help\\*"
;;   "^\\*ChatGPT\\*"
;;   "^\\*gptel-ask\\*"
;;   "\\*Shell Command Output\\*"
;;   ("\\*Async Shell Command\\*" . hide)
;;   ("\\*Detached Shell Command\\*" . hide)
;;   "\\*Completions\\*"
;;   ;; "\\*scratch.*\\*$"
(setq popper-reference-buffers (append my-help-modes-list
                                       my-grep-modes-list
                                       my-compilation-modes-list
                                       my-repl-modes-list
                                       my-repl-names-list
                                       '(;; "^\\*Messages\\*$"
                                         messages-buffer-mode)
                                       '("^\\*Embark Export:"
                                         "^\\*Embark Collect:")
                                       '("^\\*doom eval\\*"
                                         "[Oo]utput\\*"
                                         "^\\*eldoc\\*")))

(add-to-list 'display-buffer-alist
             `(;; (or (derived-mode . helpful-mode)
               ;;     (derived-mode . help-mode)
               ;;     (derived-mode . apropos-mode))
               (or ,@(let (result)
                       (dolist (mode my-help-modes-list result)
                         (push `(derived-mode . ,mode)
                               result))))
               (display-buffer-reuse-mode-window display-buffer-pop-up-window)
               (mode helpful-mode
                     help-mode
                     apropos-mode)
               (window-width . 80)
               (body-function . select-window)))

(add-to-list 'display-buffer-alist
             '((or "^\\*Embark Export:"
                   "^\\*Embark Collect:")
               nil
               (body-function . select-window)))

(add-to-list 'display-buffer-alist
             `((or ,@my-repl-names-list)
               nil
               (body-function . select-window)))

;; (add-to-list 'display-buffer-alist
;;              `(,(rx string-start
;;                     (or "*Apropos*" "*Messages*" "*Help*" "*helpful" "*info*" "*Man" "*Summary*")
;;                     (0+ not-newline))
;;                (display-buffer-reuse-mode-window display-buffer-pop-up-window)
;;                (mode apropos-mode help-mode helpful-mode Info-mode Man-mode messages-buffer-mode)
;;                (window-width . 80)
;;                ;; (window-parameters
;;                ;;  (no-delete-other-windows . t))
;;                (body-function . select-window)))
#+end_src
**** config
#+begin_src emacs-lisp
(use-package! popper
  :custom
  ;; have popper respect display-buffer-alist rules
  (popper-display-control nil)
  ;; enable actions in echo area (k to kill buffer)
  (popper-echo-dispatch-actions t)
  (popper-echo-dispatch-keys '("0" "1" "2" "3" "4" "5" "6" "7" "8" "9"))
  (popper-group-function #'popper-group-by-projectile) ; projectile projects
  ;; (popper-group-function #'popper-group-by-project) ; project.el projects

  :config
  (popper-mode +1)
  (popper-echo-mode +1)                 ; For echo area hints
  ;; (popper-tab-line-mode +1)
  )
#+end_src

**** COMMENT popper's author config for inspiration
Adopted from [[https://github.com/karthink/.emacs.d/blob/master/lisp/setup-windows.el][karthink dotfiles]].
***** Which buffers should be considered popups

#+begin_src emacs-lisp
(defvar my/occur-grep-modes-list '(occur-mode
                                   grep-mode
                                   xref--xref-buffer-mode
                                   ivy-occur-grep-mode
                                   ivy-occur-mode
                                   locate-mode
                                   flymake-diagnostics-buffer-mode
                                   rg-mode)
  "List of major-modes used in occur-type buffers")

;; This does not work at buffer creation since the major-mode for
;; REPLs is not yet set when `display-buffer' is called, but is
;; useful afterwards
(defvar my/repl-modes-list '(matlab-shell-mode
                             eshell-mode
                             geiser-repl-mode
                             shell-mode
                             eat-mode
                             vterm-mode
                             inferior-python-mode
                             cider-repl-mode
                             fennel-repl-mode
                             jupyter-repl-mode
                             inferior-ess-julia-mode)
  "List of major-modes used in REPL buffers")

(defvar my/repl-names-list
  '("^\\*\\(?:.*?-\\)\\{0,1\\}e*shell[^z-a]*\\(?:\\*\\|<[[:digit:]]+>\\)$"
    "\\*.*REPL.*\\*"
    "\\*MATLAB\\*"
    "\\*Python\\*"
    "^\\*jupyter-repl.*?\\(\\*\\|<[[:digit:]]>\\)$"
    "\\*Inferior .*\\*$"
    "^\\*julia.*\\*$"
    "^\\*cider-repl.*\\*$"
    "\\*ielm\\*"
    "\\*edebug\\*")
  "List of buffer names used in REPL buffers")

(defvar my/help-modes-list '(helpful-mode
                             help-mode
                             pydoc-mode
                             TeX-special-mode)
  "List of major-modes used in documentation buffers")

(defvar my/man-modes-list '(Man-mode woman-mode)
  "List of major-modes used in Man-type buffers")

(defvar my/message-modes-list '(compilation-mode
                                edebug-eval-mode)
  "List of major-modes used in message buffers")


(setq popper-reference-buffers (append my/help-modes-list
                                       my/man-modes-list
                                       my/repl-modes-list
                                       my/repl-names-list
                                       my/occur-grep-modes-list
                                       ;; my/man-modes-list
                                       '(Custom-mode
                                         compilation-mode
                                         messages-buffer-mode)
                                       '(("^\\*Warnings\\*$" . hide)
                                         ("^\\*Compile-Log\\*$" . hide)
                                         "^\\*Matlab Help.*\\*$"
                                         ;; "^\\*Messages\\*$"
                                         "^\\*Backtrace\\*"
                                         "^\\*evil-registers\\*"
                                         "^\\*Apropos"
                                         "^Calc:"
                                         "^\\*eldoc\\*"
                                         "^\\*TeX errors\\*"
                                         "^\\*ielm\\*"
                                         "^\\*TeX Help\\*"
                                         "^\\*ChatGPT\\*"
                                         "^\\*gptel-ask\\*"
                                         "\\*Shell Command Output\\*"
                                         ("\\*Async Shell Command\\*" . hide)
                                         ("\\*Detached Shell Command\\*" . hide)
                                         "\\*Completions\\*"
                                         ;; "\\*scratch.*\\*$"
                                         "[Oo]utput\\*")))
#+end_src

***** display-buffer-alist for popper.el from karthink for inspiration
#+begin_src emacs-lisp
;;;###autoload
(defun buffer-mode (&optional buffer-or-name)
  "Returns the major mode associated with a buffer.
If buffer-or-name is nil return current buffer's mode."
  (buffer-local-value 'major-mode
                      (if buffer-or-name
                          (get-buffer buffer-or-name)
                        (current-buffer))))

(setq display-buffer-alist
      '(

        ("^\\*[Ee]shell [Ee]xport: .*\\*$"
         (display-buffer-reuse-window display-buffer-use-some-window))

        ("^\\*julia\\*"
         (display-buffer-reuse-mode-window
          display-buffer-reuse-window
          display-buffer-in-direction
          display-buffer-in-side-window)
         (body-function . select-window)
         (window-height . .35)
         (window-width .  .40)
         ;; (preserve-size . (nil . t))
         (direction . below)
         (side . bottom)
         (slot . 1))

        ;; ----------------------------------------------------------------
        ;; Windows on top
        ;; ----------------------------------------------------------------

        ("\\*\\(?:Org Select\\|Agenda Commands\\)\\*"
         (display-buffer-below-selected
          display-buffer-in-side-window)
         (body-function . select-window)
         (window-height . (lambda (win) (fit-window-to-buffer win nil 12)))
         (side . top)
         (slot . -2)
         (preserve-size . (nil . t))
         (window-parameters . ((mode-line-format . nil))))

        ("\\*Buffer List\\*" (display-buffer-in-side-window)
         (side . top)
         (slot . 0)
         (window-height . shrink-window-if-larger-than-buffer))

        ((lambda (buf act) (member (buffer-mode buf) my/occur-grep-modes-list))
         (display-buffer-reuse-mode-window
          display-buffer-in-direction
          display-buffer-in-side-window)
         (side . top)
         (slot . 5)
         (window-height . (lambda (win) (fit-window-to-buffer win 20 10)))
         (direction . above)
         (body-function . select-window))

        ("\\*\\(Flycheck\\|Package-Lint\\).*"
         (display-buffer-in-direction display-buffer-in-side-window)
         (direction . above)
         (window-height . shrink-window-if-larger-than-buffer)
         ;; (window-height . 0.16)
         (side . top)
         (slot . 1)
         (window-parameters . (;; (mode-line-format . (:eval (my/helper-window-mode-line-format)))
                               (no-other-window . t))))

        ;; ----------------------------------------------------------------
        ;; Windows on the side
        ;; ----------------------------------------------------------------

        ((lambda (buf act) (member (buffer-mode buf) my/man-modes-list))
         nil
         (body-function . select-window))

        ("\\*Faces\\*" (display-buffer-in-side-window)
         (window-width . 0.25)
         (side . right)
         (slot . -2)
         (window-parameters . ((no-other-window . t)
                               ;; (mode-line-format . (:eval (my/helper-window-mode-line-format)))
                               )))

        ((lambda (buf act) (or (equal (buffer-mode buf) 'Custom-mode)
                               (string-match-p "^\\*Customize" (buffer-name))))
         (display-buffer-in-side-window)
         (body-function . select-window)
         (window-width . 74)
         (side . right)
         (slot . 5))

        ("\\*undo-tree\\*" ;; (lambda (buf act) (equal (buffer-mode buf) 'undo-tree-visualizer-mode))
         (display-buffer-in-direction)
         (window-width . 35) ;; (lambda (win) (fit-window-to-buffer win nil nil 65 40 t)))
         (direction . right)
         (side . right)
         (slot . -5))

        ;; ----------------------------------------------------------------
        ;; Windows at the bottom
        ;; ----------------------------------------------------------------

        ("\\*Backtrace\\*" (display-buffer-in-side-window)
         (window-height . 0.20)
         (side . bottom)
         (slot . -9)
         ;; (preserve-size . (nil . t))
         ;; (window-parameters . (;; (mode-line-format . (:eval (my/helper-window-mode-line-format)))
         ;;                       ))
         )

        ("\\*RefTex" (display-buffer-in-side-window)
         (window-height . 0.25)
         (side . bottom)
         (slot . -9)
         ;; (preserve-size . (nil . t))
         ;; (window-parameters . (;; (mode-line-format . (:eval (my/helper-window-mode-line-format)))
         ;;                       ))
         )

        ;; ("\\*scratch\\*"
        ;;  display-buffer-in-side-window
        ;;  (body-function . select-window)
        ;;  ;; (window-width 35)
        ;;  (window-height . (lambda (win) (fit-window-to-buffer win 20 nil 85)))
        ;;  (side . bottom)
        ;;  (slot . -8))

        ((lambda (buf act) (member (buffer-mode buf) my/message-modes-list))
         (display-buffer-at-bottom display-buffer-in-side-window)
         (window-height . 0.25)
         (side . bottom)
         (slot . -6)
         ;; (preserve-size . (nil . t))
         ;; (window-parameters . ((no-other-window . #'ignore)
         ;;                       ;; (mode-line-format . (:eval (my/helper-window-mode-line-format)))
         ;;                       ))
         )

        ("\\*Messages\\*"
         (display-buffer-at-bottom display-buffer-in-side-window display-buffer-in-direction)
         (window-height . (lambda (win) (fit-window-to-buffer
                                         win
                                         (floor (frame-height) 5))))
         (side . bottom)
         (direction . below)
         (slot . -6)
         (body-function . select-window)
         (window-parameters . ((split-window . #'ignore))))

        ("\\*\\(?:Warnings\\|Compile-Log\\)\\*" ;\\|Tex Help\\|TeX errors
         (display-buffer-at-bottom display-buffer-in-side-window display-buffer-in-direction)
         (window-height . (lambda (win) (fit-window-to-buffer
                                         win
                                         (floor (frame-height) 5))))
         (side . bottom)
         (direction . below)
         (slot . -5)
         (window-parameters . ((split-window . #'ignore))))

        ("[Oo]utput\\*" display-buffer-in-side-window
         (window-height . (lambda (win)
                            (fit-window-to-buffer win (floor (frame-height) 2.5))))
         (side . bottom)
         (slot . -4)
         ;; (preserve-size . (nil . t))
         ;; (window-parameters . ((no-other-window . t)
         ;;                       ;; (mode-line-format . (:eval (my/helper-window-mode-line-format)))
         ;;                       ))
         )

        ("\\*Async Shell Command\\*" display-buffer-in-side-window
         (window-height . 0.20)
         (side . bottom)
         (slot . -4)
         ;; (preserve-size . (nil . t))
         (window-parameters . ((no-other-window . t)
                               ;; (mode-line-format . (:eval (my/helper-window-mode-line-format)))
                               )))

        ("\\*\\(Register Preview\\).*" (display-buffer-in-side-window)
         (window-height . 0.20)       ; See the :hook
         (side . bottom)
         (slot . -3)
         (window-parameters . ((no-other-window . t)
                               ;; (mode-line-format . (:eval (my/helper-window-mode-line-format)))
                               )))

        ("\\*Completions\\*" (display-buffer-in-side-window)
         (window-height . 0.20)
         (side . bottom)
         (slot . -2)
         ;; (window-parameters . ((no-other-window . t)
         ;;                       ;; (mode-line-format . (:eval (my/helper-window-mode-line-format)))
         ;;                       ))
         )

        ("\\*Apropos\\*" (display-buffer-in-side-window)
         ;; (window-height . 0.40)
         (window-width . 65)
         (side . right)
         (slot . -2)
         (dedicated . t)
         (body-function . select-window)
         ;; (window-parameters . (;; (no-other-window . t)
         ;;                       ;; (mode-line-format . (:eval (my/helper-window-mode-line-format)))
         ;;                       ))
         )


        ((lambda (buf act) (or (seq-some (lambda (regex) (string-match-p regex buf))
                                         my/repl-names-list)
                               (seq-some (lambda (mode)
                                           (equal
                                            (buffer-mode buf)
                                            mode))
                                         my/repl-modes-list)))
         (display-buffer-reuse-window
          display-buffer-in-direction
          display-buffer-in-side-window)
         (body-function . select-window)
         ;; display-buffer-at-bottom
         (window-height . .35)
         (window-width .  .40)
         ;; (preserve-size . (nil . t))
         (direction . below)
         (side . bottom)
         (slot . 1))

        ((lambda (buf act) (member (buffer-mode buf) my/help-modes-list))
         (display-buffer-reuse-window
          display-buffer-in-side-window
          display-buffer-in-direction)
         (body-function . select-window)
         (window-width . 77)
         ;; (lambda (win) (fit-window-to-buffer win nil nil 75 65))
         (direction . below)
         (side . right)
         (slot . 2)
         (window-parameters . ((split-window . #'ignore))))

        (;; (lambda (buf act) (equal (buffer-mode buf) 'matlab-shell-help-mode))
         "\\*Matlab Help\\*"
         (display-buffer-reuse-window
          display-buffer-in-side-window
          display-buffer-in-direction)
         (body-function . select-window)
         ;; (direction . bottom)
         ;; (window-height . (lambda (win) (fit-window-to-buffer win 25 14)))
         (window-width . 86 ;; (lambda (win) (fit-window-to-buffer win nil nil 75 65))
                       )
         (direction . right)
         (side . right)
         (slot . 2)
         (window-parameters . ((split-window . #'ignore)
                               ;; (no-other-window . t)
                               ;; (mode-line-format . (:eval (my/helper-window-mode-line-format)))
                               )))

        ("^\\*eldoc.*\\*$"
         (display-buffer-reuse-window
          display-buffer-in-direction
          display-buffer-in-side-window)
         ;; (body-function . select-window)
         ;; (direction . bottom)
         ;; (window-height . (lambda (win) (fit-window-to-buffer win 25 14)))
         (window-width . 82 ;; (lambda (win) (fit-window-to-buffer win nil nil 75 65))
                       )
         (direction . below)
         (side . below)
         (slot . 2)
         (window-parameters . ((dedicated . t)
                               (split-window . #'ignore)
                               (no-other-window . t)
                               (mode-line-format . none))))

        ((lambda (buf act) (member (buffer-mode buf) '(ibuffer-mode bookmark-bmenu-mode)))
         (;; display-buffer-reuse-window
          ;; display-buffer-in-side-window
          ;;display-buffer-at-bottom
          display-buffer-below-selected)
         (body-function . select-window)
         (direction . below)
         (window-height . (lambda (win) (fit-window-to-buffer win 30 7)))
         ;; (dedicated . t)
         ;; (window-width . (lambda (win) (fit-window-to-buffer win nil nil 85 55)))
         ;; (direction . right)
         (side . bottom)
         (slot . 2))


        ((lambda (buf act) (with-current-buffer buf view-mode))
         (display-buffer-in-side-window)
         (window-height . (/ (frame-height) 3))
         (side . bottom)
         (slot . 10)
         ;; (window-parameters . (;; (no-other-window . t)
         ;;                       ;; (mode-line-format . (:eval (my/helper-window-mode-line-format)))
         ;;                       ))
         )


        ;; ("\\*elfeed-entry\\*" (lambda (buf act) (let ((parent-win (get-buffer-window)))
        ;;                                      (display-buffer-in-direction buf act)
        ;;                                      (select-window parent-win)
        ;;                                      ))
        ;;  (direction . below)
        ;;  (window-height . 0.5)
        ;;  )

        ))
#+end_src

*** tab-bar
Per-frame tabs, with each tab representing a window configuration (like in Vim).
#+begin_src emacs-lisp
(tab-bar-mode)
#+end_src

Replace ~tab-bar-format-tabs~ with ~tab-bar-format-tabs-groups~ to make tab bar
displays tab groups. [[https://git.savannah.gnu.org/cgit/emacs.git/commit/etc/NEWS?id=f9b737fb9d21ac7adff403274167e76e77d033b8][Source]]
#+begin_src emacs-lisp
;; :options
;; tab-bar-format-menu-bar
;; tab-bar-format-tabs
;; tab-bar-format-tabs-groups
;; tab-bar-separator
;; tab-bar-format-add-tab
;; tab-bar-format-align-right
;; tab-bar-format-global
(setq! tab-bar-format '(tab-bar-format-history
                        tab-bar-format-tabs-groups
                        tab-bar-separator
                        tab-bar-format-add-tab))
#+end_src

#+begin_src emacs-lisp
(setq! tab-bar-tab-hints nil ; Show tab numbers.
       tab-bar-close-button-show nil
       ;; tab-bar-new-tab-choice "*dashboard*" ; Buffer to show in new tab.
       )
#+end_src

#+begin_src emacs-lisp
;; (setq! tab-bar-show 1) ;; Hide tab bar if only 1 tabs open.
(setq! tab-bar-show t) ;; Always show tab bar.
#+end_src

#+begin_src emacs-lisp
(defun my-tab-new (arg)
  "Execute `tab-new` normally, or `tab-window-detach` with a universal argument."
  (interactive "P")
  (if arg
      (tab-window-detach)
    (tab-new)))
#+end_src

*** windows changes history
Use ~tab-bar-history-mode~ instead of ~winner-mode~, since I use ~tab-bar-mode~.
#+begin_src emacs-lisp
(after! winner
  (winner-mode -1)
  (tab-bar-history-mode +1)
  (setq tab-bar-history-limit 20)
  (global-set-key [remap winner-undo] #'tab-bar-history-back)
  (global-set-key [remap winner-redo] #'tab-bar-history-forward))
#+end_src

** Evil
*** evil

This variavle should be set in init.el ([[https: github.com/doomemacs/doomemacs/issues/401#issuecomment-588502773][#2447]])
#+begin_src emacs-lisp
;; (setq evil-respect-visual-line-mode t)
#+end_src

#+begin_src emacs-lisp
(setq evil-collection-setup-minibuffer t)

(after! evil
  (setq! evil-echo-state nil
         evil-want-fine-undo t
         evil-move-beyond-eol t
         evil-shift-round t
         evil-want-C-i-jump t
         evil-vsplit-window-right t
         evil-split-window-below t
         ;; evil-search-module 'isearch
         ;; evil-undo-system 'undo-redo
         ;; evil-overriding-maps nil
         )

  ;; Bind `:ls' command to `bufler' /`ibuffer' instead of `list-buffers'.
  (evil-ex-define-cmd "ls" 'ibuffer))
#+end_src

#+begin_src emacs-lisp
(defvar +word-wrap-mode nil)

(defun my/evil-end-of-line ()
  "Move the cursor to the end of the current line."
  (interactive)
  (if +word-wrap-mode
      (evil-end-of-visual-line)
    (evil-end-of-line)))

(defun my/evil-first-non-blank ()
  "Move the cursor to the end of the current line."
  (interactive)
  (if +word-wrap-mode
      (evil-first-non-blank-of-visual-line)
    (evil-first-non-blank)))
#+end_src

**** Fix [[kbd:][[ SPC]] unimpaired keybinding to correspond to its Vim counterpart

#+begin_src emacs-lisp
(after! evil
  (define-advice +evil/insert-newline-above (:after (count) fix-unimpaired)
    (when (bolp) (forward-char count))))

;; (after! evil
;;   (defun my/insert-newline-above (count)
;;     "Insert COUNT blank line(s) above current line. Does not change modes."
;;     (interactive "p")
;;     (save-excursion (dotimes (_ count) (evil-insert-newline-above)))
;;     (when (bolp) (forward-char count)))
;;
;;   (global-set-key [remap +evil/insert-newline-above] #'my/insert-newline-above))
#+end_src

*** evil-collection
#+begin_src emacs-lisp
(defvar +evil-collection-disabled-list
  '(anaconda-mode
    buff-menu
    calc
    comint
    company
    custom
    eldoc
    elisp-mode
    ert
    free-keys
    helm
    help
    image
    indent
    kotlin-mode
    lispy
    ;; outline
    replace
    shortdoc
    simple
    slime
    tab-bar)
  "A list of `evil-collection' modules to ignore.")
#+end_src

*** Returning convenient paragrapsh behavior in evil
- [[https://emacs.stackexchange.com/a/38605][Source]]

Переоределяем понятие =paragraph= в =org-mode= для ряда функций на стандартное:
параграф — это любой сплошной текст разделённый пустыми линиями.

#+begin_src emacs-lisp
(with-eval-after-load 'evil
  (define-advice forward-evil-paragraph
      (:around (orig-fun &rest args) use-default-paragraph-definiton-in-org)
    (if (derived-mode-p 'org-mode)
        (let ((paragraph-start    (default-value 'paragraph-start))
              (paragraph-separate (default-value 'paragraph-separate)))
          (apply orig-fun args))
      (apply orig-fun args))))
#+end_src

*** evil-snipe
#+begin_src emacs-lisp :noweb yes
;; Should be set before `evil-snipe' loaded
(setq! evil-snipe-override-evil-repeat-keys nil)

(after! evil-snipe
  (setq! evil-snipe-scope 'whole-visible
         evil-snipe-smart-case t)
  ;; (evil-snipe-mode)
  ;; (evil-snipe-override-mode)
  (pushnew! evil-snipe-disabled-modes #'telega-root-mode
                                      #'pdf-view-mode
                                      ;; #'helpful-mode
                                      #'magit-mode ;; #'magit-status-mode
                                      #'nov-mode)
  (map! :map evil-snipe-parent-transient-map
        "n" #'evil-snipe-repeat
        "N" #'evil-snipe-repeat-reverse
        "<tab>"     #'evil-snipe-repeat
        "<backtab>" #'evil-snipe-repeat-reverse
        ;; Integration with evil-easymotion
        ";" (cmd! (require 'evil-easymotion)
                  (call-interactively
                   (evilem-create #'evil-snipe-repeat
                                  :bind ((evil-snipe-scope 'buffer)
                                         (evil-snipe-enable-highlight nil)
                                         (evil-snipe-enable-incremental-highlight nil))
                                  :post-hook #'evil-snipe--cleanup)))))
#+end_src

*** evil-easymotion
#+begin_src emacs-lisp
(after! evil-easymotion
  (require 'avy)
  (evil-define-avy-motion avy-goto-word-0-above exclusive)
  (evil-define-avy-motion avy-goto-word-0-below exclusive)
  (evilem-make-motion evilem-motion-forward-WORD-begin  #'evil-forward-WORD-begin)
  (evilem-make-motion evilem-motion-backward-WORD-begin #'evil-backward-WORD-begin)
  (evilem-make-motion evilem-motion-forward-word-end    #'evil-forward-word-end)
  (evilem-make-motion evilem-motion-forward-WORD-end    #'evil-forward-WORD-end)
  ;; (map! :m ";" evilem-map
  ;;       (:map evilem-map
  ;;        :desc "word"          "w" #'evil-avy-goto-word-0-below
  ;;        :desc "WORD"          "W" #'evilem-motion-forward-WORD-begin
  ;;        :desc "backward word" "b" #'evil-avy-goto-word-0-above
  ;;        :desc "backward WORD" "B" #'evilem-motion-backward-WORD-begin
  ;;        :desc "word end"      "e" #'evilem-motion-forward-word-end
  ;;        :desc "WORD end"      "E" #'evilem-motion-forward-WORD-end
  ;;        ;; "ge" #'evilem-motion-backward-word-end
  ;;        ;; "gE" #'evilem-motion-backward-WORD-end
  ;;        ;; "j"  #'evilem-motion-next-visual-line
  ;;        ;; "k"  #'evilem-motion-previous-visual-line
  ;;        ))
  (map! :mnv "gw" #'evil-avy-goto-word-0-below
        :mnv "gW" #'evilem-motion-forward-WORD-begin
        :mnv "gb" #'evil-avy-goto-word-0-above
        :mnv "gB" #'evilem-motion-backward-WORD-begin
        :mnv "gj" #'evilem-motion-next-visual-line
        :mnv "gk" #'evilem-motion-previous-visual-line))
#+end_src

*** evil-goggles
#+begin_src emacs-lisp :noweb yes
(use-package! evil-goggles
  :hook (doom-first-input . evil-goggles-mode)
  :init
  ;; (setq evil-goggles-duration 0.100  ; default is 0.200
  ;;       evil-goggles-enable-delete nil
  ;;       evil-goggles-enable-change ni)
  (setq evil-goggles-pulse t) ; may be slow

  :config
  ;;; Add `evil-cleverparens' support
  (pushnew! evil-goggles--commands
            '(evil-cp-delete      :face evil-goggles-delete-face :switch t :advice evil-goggles--generic-blocking-advice)
            '(evil-cp-delete-line :face evil-goggles-delete-face :switch t :advice evil-goggles--delete-line-advice)
            '(evil-cp-yank        :face evil-goggles-yank-face   :switch t :advice evil-goggles--generic-async-advice)
            '(evil-cp-yank-line   :face evil-goggles-yank-face   :switch t :advice evil-goggles--generic-async-advice)
            '(evil-cp-change      :face evil-goggles-change-face :switch t :advice evil-goggles--generic-blocking-advice)
            '(evil-cp-change-line :face evil-goggles-change-face :switch t :advice evil-goggles--generic-blocking-advice))

  ;; From Doom `ui/ophints' module
  (pushnew! evil-goggles--commands
            '(evil-magit-yank-whole-line :face evil-goggles-yank-face :switch evil-goggles-enable-yank :advice evil-goggles--generic-async-advice)
            '(+evil:yank-unindented      :face evil-goggles-yank-face :switch evil-goggles-enable-yank :advice evil-goggles--generic-async-advice)
            '(+eval:region               :face evil-goggles-yank-face :switch evil-goggles-enable-yank :advice evil-goggles--generic-async-advice))

  ;; Use diff-mode's faces; deleted text will be highlighed with `diff-removed',
  ;; other faces such as `diff-added' will be used for other actions.
  (evil-goggles-use-diff-faces))
#+end_src
*** evil-org
#+begin_src emacs-lisp
(after! evil-org
  (setq! evil-org-special-o/O '(table-row item)))
#+end_src
*** evil-jumps

Record jumps from the ~elisp-refs-mode~ buffer:
#+begin_src emacs-lisp
;; (evil-add-command-properties #'dired-find-file :jump t)
;; (evil-add-command-properties #'elisp-refs-visit-match :jump t)

;; (setq evil--jumps-buffer-targets "\\(\\*\\(\\new\\|scratch\\)\\*\\|\\*refs:.+\\)")
#+end_src

** Completion
*** Minibuffer
**** emacs
#+begin_src emacs-lisp
;; Allow opening new minibuffers from inside existing minibuffers.
(setq! enable-recursive-minibuffers t)
(minibuffer-depth-indicate-mode +1)

;; Show current key-sequence in minibuffer ala 'set showcmd' in vim. Any
;; feedback after typing is better UX than no feedback at all.
(setq! echo-keystrokes 0.02)

;; Hide commands in `M-x' menu which do not work in the current mode.
;; - Vertico commands are hidden in normal buffers.
;; - Corfu commands are hidden, since they are not supposed to be used via `M-x'.
(setq! read-extended-command-predicate #'command-completion-default-include-p)

(setq! read-file-name-completion-ignore-case t
       read-buffer-completion-ignore-case t
       completion-ignore-case t)
#+end_src

**** vertico
#+begin_src emacs-lisp
(after! vertico
  (setq! vertico-count 15 ; How many candidates to show
         vertico-scroll-margin 2
         vertico-cycle nil
         vertico-resize 'grow-only) ; Grow and shrink the Vertico minibuffer
  )
#+end_src

**** consult

Restore previews that Doom turns off.
#+begin_src emacs-lisp
(after! consult
  (consult-customize
   consult-ripgrep consult-git-grep consult-grep
   ;; consult--grep
   ;; consult--read
   ;; consult-bookmark consult-recent-file
   ;; consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
   :preview-key '(:debounce 0.4 any)    ; or 'any
   )

  (consult-customize
   +default/search-project +default/search-other-project
   ;; +default/search-project-for-symbol-at-point
   ;; +default/search-cwd +default/search-other-cwd
   ;; +default/search-notes-for-symbol-at-point
   ;; +default/search-emacsd
   +vertico/jump-list
   :preview-key 'any)

  (consult-customize org-roam-node-find :preview-key "C-<return>"))
#+end_src

**** consult-xref

Use consult for xref:
#+begin_src emacs-lisp
(setq! xref-show-definitions-function 'consult-xref
       xref-show-xrefs-function 'consult-xref)
#+end_src

***** COMMENT Start ~consult-xref~ in evils' normal-state:
This solution works, but sometimes start other consult commands in evils normal
state also.

#+begin_src emacs-lisp
(defvar my/consult-xref-active nil
  "Flag indicating that `consult-xref` has been called.")

(defun my/set-consult-xref-flag (&rest args)
  "Set `my/consult-xref-active` to t when `consult-xref` is called."
  (setq my/consult-xref-active t))

(advice-add 'consult-xref :before #'my/set-consult-xref-flag)

(defun my/evil-normal-state-for-consult-xref ()
  "Switch to Evil's normal state in the minibuffer when `consult-xref' is active."
  (when my/consult-xref-active
    (evil-normal-state)
    (setq my/consult-xref-active nil)))

(add-hook 'minibuffer-setup-hook #'my/evil-normal-state-for-consult-xref)
#+end_src

** IDE
*** projectile (project management)
#+begin_src emacs-lisp
;; (setq project-vc-extra-root-markers '(".projectile" ".project"))
#+end_src

#+begin_src emacs-lisp
(after! projectile
  (setq! projectile-project-search-path (list (file-truename "~"))))
#+end_src

**** COMMENT Open projects in new tabs
#+begin_src emacs-lisp
(defun my-open-in-new-tab-advice (orig-fun &rest args)
  (other-tab-prefix)
  (apply orig-fun args))

(dolist (fun '(projectile-switch-project
               projectile-find-dir
               projectile-find-file))
  (advice-add fun :around #'my-open-in-new-tab-advice))
#+end_src

*** eldoc
#+begin_src emacs-lisp
(setq! eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)
#+end_src

**** eldoc-box
Show eldoc content in the floating frame.

#+begin_src emacs-lisp
(use-package! eldoc-box
  :autoload (eldoc-box--replace-en-space
             eldoc-box--prettify-markdown-separator
             eldoc-box--remove-linked-images
             eldoc-box--remove-noise-chars
             eldoc-box--fontify-html
             eldoc-box--condense-large-newline-gaps)
  :config
  (pushnew! eldoc-box-self-insert-command-list #'evil-force-normal-state)

  (define-advice eldoc-doc-buffer
      (:after (_) prettify-eldoc-buffer)
    (with-current-buffer eldoc--doc-buffer
      (setq-local fill-column 90)
      (+word-wrap-mode)
      ;; (eldoc-box--prettify-markdown-separator)
      (eldoc-box--replace-en-space)
      ;; (eldoc-box--remove-linked-images)
      ;; (eldoc-box--remove-noise-chars)
      ;; (eldoc-box--fontify-html)
      ;; (eldoc-box--condense-large-newline-gaps)
      )))
#+end_src

*** flycheck
**** checkers per mode
#+begin_src emacs-lisp
(add-hook! 'org-src-mode-hook
  (setq-local flycheck-disabled-checkers '(emacs-lisp emacs-lisp-checkdoc)))
#+end_src

**** eldoc integration for flycheck
- [[https://www.masteringemacs.org/article/seamlessly-merge-multiple-documentation-sources-eldoc][Source]]
#+begin_src emacs-lisp
(after! flycheck
  ;; https://www.masteringemacs.org/article/seamlessly-merge-multiple-documentation-sources-eldoc
  (defun my/flycheck-eldoc-function (callback &rest _ignored)
    "A member of `eldoc-documentation-functions', for flycheck."
    (when-let ((flycheck-errors (and flycheck-mode
                                     (flycheck-overlay-errors-at (point)))))
      (mapc (lambda (err)
              (funcall callback
                       (format "%s: %s"
                               (let ((level (flycheck-error-level err)))
                                 (pcase level
                                   ('info (propertize "I" 'face 'flycheck-error-list-info))
                                   ('error (propertize "E" 'face 'flycheck-error-list-error))
                                   ('warning (propertize "W" 'face 'flycheck-error-list-warning))
                                   (_ level)))
                               (flycheck-error-message err))
                       :thing (or (flycheck-error-id err)
                                  (flycheck-error-group err))
                       :face 'font-lock-doc-face))
            flycheck-errors)))

  (defun my/flycheck-prefer-eldoc ()
    (add-hook 'eldoc-documentation-functions #'my/flycheck-eldoc-function 90 t)
    (setq! flycheck-display-errors-function nil
           flycheck-help-echo-function nil))

  (add-hook 'flycheck-mode-hook #'my/flycheck-prefer-eldoc))
#+end_src

**** COMMENT flycheck-inline
#+begin_src emacs-lisp
(use-package! flycheck-inline
  :after flycheck
  :hook (flycheck-mode . flycheck-inline-mode))
#+end_src

*** lsp-mode
#+begin_src emacs-lisp
(after! lsp-mode
  (setq! lsp-lens-enable nil
         ;; lsp-ui-sideline-show-diagnostics nil
         lsp-enable-folding nil
         lsp-enable-text-document-color nil
         lsp-headerline-breadcrumb-enable t
         lsp-signature-render-documentation nil)

  (setq lsp-signature-function #'lsp-lv-message) ;; show signature in echo area
  ;; (setq! lsp-signature-function #'lsp-signature-posframe) ;; show signature in posframe

  (set-lookup-handlers! 'lsp-mode
    :definition #'+lsp-lookup-definition-handler
    :references #'+lsp-lookup-references-handler
    :documentation '(lsp-ui-doc-glance :async t) ;; default `lsp-describe-thing-at-point'
    :implementations '(lsp-find-implementation :async t)
    :type-definition #'lsp-find-type-definition))

;; (advice-add #'consult-xref :after #'evil-normal-state)

(defun my/lsp-doc ()
  "Open lsp doc in popup window. If called with `universal-argument' open in split."
  ;; (interactive "P")
  (interactive)
  (cond
   ((null current-prefix-arg)       (eldoc-box-help-at-point))
   ((equal current-prefix-arg '(4))
    ;; (call-interactively #'+lookup/documentation)
    (+lookup/documentation))))

;; (defun my/eldoc-settings-for-lsp-mode ()
;;   "Setup my eldoc setting for lsp-mode"
;;   (if lsp-managed-mode
;;       (progn
;;         (add-hook 'eldoc-documentation-functions #'my/flycheck-eldoc-function nil t)
;;         (add-hook 'eldoc-documentation-functions #'lsp-eldoc-function nil t))
;;     (progn
;;       (remove-hook 'eldoc-documentation-functions #'my/flycheck-eldoc-function t)
;;       (remove-hook 'eldoc-documentation-functions #'lsp-eldoc-function nil t))))
;; (add-hook 'lsp-managed-mode-hook #'my/eldoc-settings-for-lsp-mode)
#+end_src

#+begin_src emacs-lisp
;; (defun my-lsp--filter-servers-by-major-mode ()
;;   "Filter the available LSP servers to match the current major mode."
;;   (let ((current-mode major-mode)
;;         (available-clients (hash-table-keys lsp-clients)))
;;     ;; Filter the clients that support the current major mode
;;     (seq-filter
;;      (lambda (client)
;;        (let* ((client-info (gethash client lsp-clients))
;;               (supported-modes (plist-get client-info :major-modes)))
;;          (and supported-modes
;;               (memq current-mode supported-modes))))
;;      available-clients)))

;; (defun my-lsp ()
;;   "Custom wrapper around `lsp' that filters servers by major mode."
;;   (interactive)
;;   (let ((filtered-servers (my-lsp--filter-servers-by-major-mode)))
;;     ;; When `C-u M-x lsp` is used, `lsp` interactively prompts for servers
;;     ;; Set the `lsp-enabled-clients` to limit the servers for the prompt
;;     (if filtered-servers
;;         (let ((lsp-enabled-clients filtered-servers))
;;           (lsp))
;;       (message "No LSP servers available for current major mode: %s" major-mode))))

;; ;; Optionally override the original lsp command (remove this if you don't want to override)
;; (advice-add 'lsp :override #'my-lsp)
#+end_src

**** lsp-booster
#+begin_src emacs-lisp
(defun lsp-booster--advice-json-parse (old-fn &rest args)
  "Try to parse bytecode instead of json."
  (or
   (when (equal (following-char) ?#)
     (let ((bytecode (read (current-buffer))))
       (when (byte-code-function-p bytecode)
         (funcall bytecode))))
   (apply old-fn args)))

(advice-add (if (progn (require 'json)
                       (fboundp 'json-parse-buffer))
                'json-parse-buffer
              'json-read)
            :around
            #'lsp-booster--advice-json-parse)

(defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
  "Prepend emacs-lsp-booster command to lsp CMD."
  (let ((orig-result (funcall old-fn cmd test?)))
    (if (and (not test?)                             ; for check lsp-server-present?
             (not (file-remote-p default-directory)) ; see lsp-resolve-final-command, it would add extra shell wrapper
             lsp-use-plists
             (not (functionp 'json-rpc-connection))  ; native json-rpc
             (executable-find "emacs-lsp-booster"))
        (progn
          ;; resolve command from exec-path (in case not found in $PATH)
          (when-let ((command-from-exec-path (executable-find (car orig-result))))
            (setcar orig-result command-from-exec-path))
          (message "Using emacs-lsp-booster for %s!" orig-result)
          (cons "emacs-lsp-booster" orig-result))
      orig-result)))

(advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)
#+end_src

*** xref
#+begin_src emacs-lisp
(setq! xref-auto-jump-to-first-definition 'show)
#+end_src

*** sly (common-lisp)
**** Adopted from evil-collection
#+begin_src emacs-lisp
(defun my-sly-last-sexp-a (command &rest args)
  "In normal-state or motion-state, last sexp ends at point."
  (if (or (evil-normal-state-p)
          (evil-motion-state-p))
      (save-excursion
        (when (and (eq (char-after) ?\) )
                   (not (eobp))
                   (not (eolp)))
          (forward-char))
        (apply command args))
    (apply command args)))

(defun my-sly-eval-print-last-expression-a (string)
  "Evaluate sexp before point; print value into the current buffer.

Evil version of `sly-eval-print-last-expression' that accounts for
`evil-move-beyond-eol'."
  (interactive (list (progn
                       (when (or (evil-normal-state-p)
                                 (evil-motion-state-p))
                         (when (and (eq (char-after) ?\))
                                    (not (eobp))
                                    (not (eolp))
                                    (forward-char)))
                         (sly-last-expression))))
               (insert "\n")
               (sly-eval-print string)))

(advice-add 'sly-eval-last-expression :around 'my-sly-last-sexp-a)
(advice-add 'sly-pprint-eval-last-expression :around 'my-sly-last-sexp-a)
(advice-add 'sly-mrepl-return :around 'my-sly-last-sexp-a)
(advice-add 'sly-eval-print-last-expression :override 'my-sly-eval-print-last-expression-a)
#+end_src

**** COMMENT eval-in-repl
#+begin_src emacs-lisp
(require 'eval-in-repl)

;; Uncomment if no need to jump after evaluating current line
(setq eir-jump-after-eval nil)

;; Uncomment if you want to always split the script window into two.
;; This will just split the current script window into two without
;; disturbing other windows.
(setq eir-always-split-script-window t)

;; Uncomment if you always prefer the two-window layout.
(setq eir-delete-other-windows t)

;; Place REPL on the right of the script window when splitting.
(setq eir-repl-placement 'right)


;;; ielm support (for emacs lisp)
(require 'eval-in-repl-ielm)
;; Evaluate expression in the current buffer.
(setq eir-ielm-eval-in-current-buffer t)
(map! (:map emacs-lisp-mode-map ; for .el files
       :mnv "<C-return>" #'eir-eval-in-ielm)
      (:map lisp-interaction-mode-map ; for *scratch*
       :mnv "<C-return>" #'eir-eval-in-ielm)
      (:map Info-mode-map ; for M-x info
       :mnv "<C-return>" #'eir-eval-in-ielm))


;;; SLY support (for Common Lisp)
;; (require 'slime) ; if not done elsewhere
(with-eval-after-load 'sly
  (require 'eval-in-repl-sly)
  ;; (add-hook 'lisp-mode-hook
  ;;           '(lambda ()
  ;;              (local-set-key (kbd "<C-return>") 'eir-eval-in-sly)))
  (map! :map lisp-mode-map
        :mnv "<C-return>" #'eir-eval-in-sly))
#+end_src

** Extra facitilies
*** aggressive-indent
#+begin_src emacs-lisp
(use-package! aggressive-indent
  ;; :config
  ;; (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
  ;; (add-hook 'css-mode-hook #'aggressive-indent-mode)
  )
#+end_src

*** avy
#+begin_src emacs-lisp
(after! avy
  (setq! avy-keys (number-sequence ?a ?z) ; Any lower-case letter a-z.
         avy-style 'at-full
         avy-all-windows nil))
#+end_src
*** deft
#+begin_src emacs-lisp
(setq deft-directory "~/notes")
#+end_src

*** Dired
**** dired
| *-l*               | use a long listing format                     |
| *-a*, *--all*        | do not ignore entries starting with =.=         |
| *-A*, *--almost-all* | do not list implied =.= and =..=                  |
| *-F*, *--classify*   | append indicator (one of =*/=>@¦=) to entries   |
| *-v*               | natural sort of (version) numbers within text |
#+begin_src emacs-lisp
(setq! dired-listing-switches "-lAhF -v --group-directories-first")
;; (setq! dired-listing-switches "-l --human-readable --group-directories-first")
#+end_src

#+begin_src emacs-lisp
(setq! dired-dwim-target t
       dired-auto-revert-buffer #'dired-buffer-stale-p
       dired-kill-when-opening-new-dired-buffer t
       delete-by-moving-to-trash t
       dired-recursive-deletes 'always ;; 'top
       dired-recursive-copies 'always
       dired-no-confirm t
       ;; Ask whether destination dirs should get created when copying/removing files.
       dired-create-destination-dirs 'ask)
#+end_src

#+begin_src emacs-lisp
(add-hook! dired-mode '(dired-hide-details-mode
                        hl-line-mode))
#+end_src

***** copy filenames functions
#+begin_src emacs-lisp
(defun my-dired-copy-file-name ()
  "Copy file name."
  (interactive)
  (dired-copy-filename-as-kill))

(defun my-dired-copy-file-path ()
  "Copy full path to the file"
  (interactive)
  (dired-copy-filename-as-kill 0))
#+end_src

***** dired delete permanently
#+begin_src emacs-lisp
(defun dired-do-flagged-delete-permanently ()
  "Delete files permanently instead of trashing them"
  ;; (declare (interactive-only t))
  ;; (interactive nil dired-mode)
  (interactive)
  (let ((delete-by-moving-to-trash nil))
    (dired-do-flagged-delete)))
#+end_src

**** dired-omit
~dired-omit-mode~ is defined in =dired-x= package.

#+begin_src emacs-lisp
(setq! dired-omit-files "\\`[.]?#\\|\\`[.][.]?\\'\\|\\`[.].+")

(add-hook 'dired-mode-hook #'dired-omit-mode)

(defun my-dired-toggle-omit-mode ()
  "Toggle `dired-omit-mode' not only in current buffer,but in general."
  (interactive)
  (if dired-omit-mode
      (progn
        (dired-omit-mode -1)
        (remove-hook 'dired-mode-hook #'dired-omit-mode))
    (dired-omit-mode +1)
    (add-hook 'dired-mode-hook #'dired-omit-mode)))
#+end_src

**** wdired
#+begin_src emacs-lisp
(after! wdired
  (setq! wdired-allow-to-change-permissions t) ; or 'advanced

  (defun my-wdired-toggle-bit ()
    "Toggle the permission bit at point."
    (interactive)
    (wdired-toggle-bit)
    (backward-char)))
#+end_src

**** image-dired
#+begin_src emacs-lisp
;; Use Thumbnail Managing Standard
(setq! image-dired-thumbnail-storage 'standard)  ; 128x128
;; (setq! image-dired-thumbnail-storage 'standard-large)  ; 256x256
;; (setq! image-dired-thumbnail-storage 'standard-x-large) ; 512x512

(setq! image-dired-marking-shows-next nil)

;; TODO: xdg-open doesn't worked
(setq! image-dired-external-viewer "qimgv")

;; image-dired-dired-display-image
;; dired-open-file
#+end_src

**** dired-filter
#+begin_src emacs-lisp
(use-package! dired-filter
  :config
  (setq! dired-filter-group-saved-groups
         '(("default"
            ("Directories"
             (directory))
            ("Archives"
             (extension "zip" "rar" "gz" "bz2" "tar"))
            ("Pictures"
             (or (extension "jfif" "JPG")
                 (mode . 'image-mode)))
            ("Videos"
             (extension "mp4" "mkv" "flv" "mpg" "avi" "webm"))
            ;; ("LaTeX"
            ;;  (extension "tex" "bib"))
            ;; ("Org"
            ;;  (extension . "org"))
            ("PDF"
             (extension . "pdf"))))))

(defun my-dired-filter-group-mode ()
  "Toggle `dired-filter-group-mode' in all buffers."
  (interactive)
  (if dired-filter-group-mode
      (progn
        (dired-filter-group-mode -1)
        (remove-hook 'dired-mode-hook #'dired-filter-group-mode))
    (dired-filter-group-mode +1)
    (add-hook 'dired-mode-hook #'dired-filter-group-mode)))
#+end_src

**** dired-open
#+begin_src emacs-lisp
(use-package! dired-open
  :config
  (setq! dired-open-extensions '(("pdf" . "evince")
                                 ;; ("exe" . "wine")
                                 ;; ("docx" . "libreoffice")
                                 ;; ("doc" . "libreoffice")
                                 ;; ("xlsx" . "libreoffice")
                                 ;; ("xls" . "libreoffice")
                                 ;; ("epub" . "fbreader")
                                 ))
  ;; NOTE: With this setting, dired will also open directories with `xdg-open'.
  ;; (add-to-list 'dired-open-functions #'my/dired-xdg-open)
  )

(defun my/dired-xdg-open ()
  "In a dired buffer, open file or folder on the current line with `xdg-open'
shell command."
  (interactive)
  (when (executable-find "xdg-open")
    (let* ((file-name (ignore-errors
                        (thread-first (dired-get-file-for-visit)
                                      (file-truename)
                                      (shell-quote-argument)))))
      (when file-name
        (call-process-shell-command (concat "xdg-open " file-name))))))
#+end_src

**** denote-dired
#+begin_src emacs-lisp
(defconst denote-id-format "%Y%m%dT%H%M%S")
(defconst denote-id-regexp "\\([0-9]\\{8\\}\\)\\(T[0-9]\\{6\\}\\)")

(defun my-get-file-creation-time (filepath)
  "Get the creation time of FILEPATH using the `stat' from coreutils."
  (thread-first (format "stat --format=%%w %s" (shell-quote-argument filepath))
                (shell-command-to-string)
                (string-trim)
                (parse-time-string)
                (encode-time)))

(defun my-get-file-modification-time (filepath)
  (file-attribute-modification-time (file-attributes filepath)))

(defun my-get-file-denote-id (filepath)
  "Get file denote ID or `nil'"
  (let ((filename (file-name-nondirectory filepath)))
    (if (string-match (concat "\\`" denote-id-regexp) filename)
        (match-string-no-properties 0 filename)
      nil)))

(defun my-create-file-denote-id (filepath)
  "Generate denote ID based on file creation time"
  (let* ((created (my-get-file-creation-time filepath))
         (modified (file-attribute-modification-time (file-attributes filepath)))
         (time (if (time-less-p created modified)
                   created modified)))
    (format-time-string denote-id-format time)))

(defun my-dired-add-denote-id ()
  "Add denote timestamp in front of the files name, unless it's already there."
  (declare (interactive-only t))
  (interactive nil dired-mode)
  (dolist (file (dired-get-marked-files))
    (unless (my-get-file-denote-id file)
      (let ((filename (file-name-nondirectory file)))
        (cond
         ;; Files from Reddit app on android. They have timestamp in their name,
         ;; like this: RDT_20220820_0858002573777192519160821.jpg
         ((string-match "^RDT_\\([0-9]\\{8\\}\\)_\\([0-9]\\{6\\}\\)" filename)
          (let* ((date (match-string-no-properties 1 filename))
                 (time (match-string-no-properties 2 filename))
                 (extension (file-name-extension file))
                 (newname (format "%sT%s.%s" date time extension)))
            (rename-file file newname)))
         (t
          (let* ((id (my-create-file-denote-id file))
                 (newname (format "%s--%s" id filename)))
            (rename-file file newname)))))))
  (dired-revert))
#+end_src

**** misc dired packages
#+begin_src emacs-lisp
(use-package! casual-dired)
(use-package! diredfl
  :hook (dired-mode . diredfl-mode))
(use-package! dired-copy-paste)
(use-package! dired-narrow)
(use-package! dired-subtree)
#+end_src

**** dired-du
#+begin_src emacs-lisp
(use-package! dired-du
  :commands dired-du-mode
  :config
  (setq! dired-du-size-format t))
#+end_src

*** COMMENT Doom dired module
**** Overcome for doom 8081 issue
- [[https://github.com/doomemacs/doomemacs/issues/8081][Issue 8081 overcome]]
#+begin_src emacs-lisp
(defun my/dired-find-file-close-duplicate (orig-fun &rest args)
  "Advice around `dired-find-file` to close the previous dired buffer
if it's a duplicate."
  (let ((prev-dired-buffer (current-buffer))
        (prev-buffer-name (buffer-name))
        (prev-dir (dired-current-directory)))
    ;; Call the original `dired-find-file` function
    (apply orig-fun args)
    ;; After opening the file, check if the previous buffer is a duplicate dired
    ;; buffer and close it
    (when (and (buffer-live-p prev-dired-buffer)
               (with-current-buffer prev-dired-buffer
                 (derived-mode-p 'dired-mode))
               (string-match-p "<[0-9]+>$" prev-buffer-name)
               ;; Ensure the directory matches
               (equal prev-dir (with-current-buffer prev-dired-buffer
                                 (dired-current-directory))))
      (kill-buffer prev-dired-buffer))))

;; Add the advice
(advice-add 'dirvish-find-entry-a :around #'my/dired-find-file-close-duplicate)
;; (advice-add 'dired-find-file :around #'my/dired-find-file-close-duplicate)
#+end_src

*** elfeed
#+begin_src emacs-lisp
(after! elfeed
  (add-hook 'elfeed-search-mode-hook #'elfeed-update))
#+end_src

*** embark
Doom already set this for us:
#+begin_src emacs-lisp
;; (after! embark
;;   (setq prefix-help-command #'embark-prefix-help-command))

;; (after! embark-consult
;;   (add-hook embark-collect-mode-hook #'consult-preview-at-point-mode))
#+end_src

*** COMMENT filladapt

Note that in this release Filladapt mode is a minor mode and it is *off* by
default. If you want it to be on by default, use
: (setq-default filladapt-mode t)

~M-x filladapt-mode~ toggles Filladapt mode on/off in the current buffer.

Enabled Filladapt in Text mode
: (add-hook 'text-mode-hook #'filladapt-mode)

Disable Filladapt in C mode
: (add-hook 'c-mode-hook #'turn-off-filladapt-mode)

In many cases, you can extend Filladapt by adding appropriate entries to the
following three ~defvar~. See ~postscript-comment~ or ~texinfo-comment~ as a sample of
what needs to be done.
: filladapt-token-table
: filladapt-token-match-table
: filladapt-token-conversion-table

#+begin_src emacs-lisp
(use-package! filladapt)
#+end_src

*** ibuffer
#+begin_src emacs-lisp :noweb yes
(after! ibuffer
  <<ibuffer-config>>
  )
#+end_src

**** general settings
:PROPERTIES:
:header-args: :noweb-ref ibuffer-config
:END:
#+begin_src emacs-lisp
(setq! ibuffer-expert t ; Do not ask for confirmation to delete the unmodified buffer.
       ibuffer-truncate-lines t
       ibuffer-show-empty-filter-groups nil ; Don't show emtpy filter groups
       ibuffer-display-summary nil
       ;; ibuffer-default-sorting-mode 'filename/process ; recency alphabetic major-mode
       ;; ibuffer-read-only-char "%"
       ;; ibuffer-modified-char "*"
       ;; ibuffer-marked-char ">"
       ;; ibuffer-locked-char "L"
       ;; ibuffer-deletion-char "D"
       ibuffer-eliding-string "…")

(pushnew! ibuffer-help-buffer-modes #'helpful-mode)
#+end_src

#+begin_src emacs-lisp :noweb yes
(add-hook! 'ibuffer-mode-hook
  #'ibuffer-auto-mode ; automatically update ibuffer
  #'hl-line-mode
  ;; (ibuffer-switch-to-saved-filter-groups "home")
  )

(evil-ex-define-cmd "buffers" #'ibuffer)
#+end_src

In ibuffer put cursor on the buffer it was called from. ([[https://emacs.stackexchange.com/questions/31757/ibuffer-cursor-on-buffer-which-it-was-called-from][source]])
#+begin_src emacs-lisp
(defun ibuffer-jump-to-last-buffer ()
  (ibuffer-jump-to-buffer (buffer-name (cadr (buffer-list)))))

(add-hook 'ibuffer-hook #'ibuffer-jump-to-last-buffer)
#+end_src

**** layout
:PROPERTIES:
:header-args: :noweb-ref ibuffer-config
:END:
#+begin_src emacs-lisp
(let ((path (cond ((require 'ibuffer-projectile nil t) 'my/project-relative-filename-or-process)
                  (t 'filename-and-process))))
  (setq ibuffer-formats
        `((mark modified read-only locked
                " " (icon 2 2 :left :elide)
                ,(propertize " " 'display `(space :align-to 8))
                (name 26 -1)
                "  " ,path)
          (mark modified read-only locked
                " " (icon 2 2 :left :elide)
                ,(propertize " " 'display `(space :align-to 8))
                (name 30 30 :left :elide)
                " " (size 6 -1 :right)
                " " (mode 16 16 :left :elide)
                ;; ,@(when (require 'ibuffer-vc nil t)
                ;;     '(" " (vc-status 12 :left)))
                " " ,path))))
#+end_src

**** ibuffer columns
:PROPERTIES:
:header-args: :noweb-ref ibuffer-config
:END:
#+begin_src emacs-lisp
;; Display buffer icons on GUI
(define-ibuffer-column icon
  (:name "  ")
  (let ((icon (if (and (buffer-file-name)
                       (nerd-icons-auto-mode-match?))
                  (nerd-icons-icon-for-file (file-name-nondirectory (buffer-file-name)) :v-adjust -0.05)
                (nerd-icons-icon-for-mode major-mode :v-adjust -0.05))))
    (if (symbolp icon)
        (setq icon (nerd-icons-faicon "nf-fa-file_o" :face 'nerd-icons-dsilver :height 0.8 :v-adjust 0.0))
      icon)))

;; Human readable size column
(define-ibuffer-column size
  (:name "Size"
   :inline t
   :header-mouse-map ibuffer-size-header-map)
  (file-size-human-readable (buffer-size)))
#+end_src

**** ibuffer-projectile
#+begin_src emacs-lisp
(use-package! ibuffer-projectile
  :hook
  (ibuffer . ibuffer-projectile-set-filter-groups)
  :config
  (setq ibuffer-projectile-prefix (concat (nerd-icons-octicon
                                           "nf-oct-file_directory"
                                           :face ibuffer-filter-group-name-face
                                           :v-adjust -0.05)
                                          " "))

  ;; Render filnames relative to project root
  (define-ibuffer-column my/project-relative-filename-or-process
    (:name "Filename/Process"
     :header-mouse-map ibuffer-filename/process-header-map
     :summarizer
     (lambda (strings)
       (setq strings (delete "" strings))
       (let ((procs (--count (get-text-property 1 'ibuffer-process it)
                             strings))
             (files (length strings)))
         (concat (cond ((zerop files) "No files")
                       ((= 1 files) "1 file")
                       (t (format "%d files" files)))
                 ", "
                 (cond ((zerop procs) "no processes")
                       ((= 1 procs) "1 process")
                       (t (format "%d processes" procs)))))))
    (let ((proc     (get-buffer-process buffer))
          (filename (ibuffer-make-column-filename buffer mark)))
      (if proc
          (concat (propertize (format "(%s %s)" proc (process-status proc))
                              'font-lock-face 'italic
                              'ibuffer-process proc)
                  (if (> (length filename) 0)
                      (format " %s" filename)
                    ""))
        ;; else
        (let ((root-dir (cdr (ibuffer-projectile-root buffer))))
          (if root-dir
              (file-relative-name filename root-dir)
            (abbreviate-file-name filename)))))))
#+end_src

*** COMMENT popup
Open help and man in popup window on the side
#+begin_src emacs-lisp
(when (modulep! :completion corfu)
  ;; (plist-put +popup-defaults :modeline t)
  (set-popup-rules!
   '(("^\\*\\([Hh]elp\\|Apropos\\)" :side right :slot 2 :vslot -8 :size 90 :select t)
     ("^\\*\\(?:Wo\\)?Man " :side right :vslot -6 :size 85 :select t :quit t :ttl 0))))
#+end_src

*** Russian language
**** evil-xkbswitch
#+begin_src emacs-lisp
(use-package! evil-xkbswitch
  :after evil
  :diminish evil-xkbswitch-mode
  :config
  ;; If you use GNOME:
  (when (string-equal-ignore-case (getenv "DESKTOP_SESSION") "gnome")
    (setq evil-xkbswitch-set-layout "g3kb-switch -s"
          evil-xkbswitch-get-layout "g3kb-switch"))
  (evil-xkbswitch-mode))
#+end_src

**** emacs-smart-input-source
- [[https://github.com/laishulu/emacs-smart-input-source][emacs-smart-input-source]]

*** structural editing
**** evil-cleverparens
#+begin_src emacs-lisp :noweb yes
(use-package! evil-cleverparens
  :hook (lisp-data-mode . evil-cleverparens-mode)
  :custom
  (evil-cleverparens-use-s-and-S nil)
  (evil-cleverparens-drag-ignore-lines t)
  :config

  (evil-define-motion my/evil-cp-forward-sexp (count)
    "Motion for moving forward by a sexp."
    :type exclusive
    (let ((count (or count 1)))
      (when (evil-eolp)
        (forward-char))
      (forward-sexp count)
      (forward-sexp)
      (backward-sexp)))

  (evil-define-motion my/evil-cp-backward-sexp (count)
    "Motion for moving backwward by a sexp."
    :type exclusive
    (let ((count (or count 1)))
      (backward-sexp count)))

  (evil-define-motion my/evil-cp-up-sexp (count)
    "Move the cursor to the nearest paired closing bracket."
    :move-point nil
    :type inclusive
    (let ((count (or count 1)))
      (when (evil-cp--looking-at-any-opening-p)
        (if (fboundp 'evilmi-jump-items) (evilmi-jump-items) (evil-jump-item))
        (setq count (- count 1)))
      (when (> count 0)
        (when (evil-cp--looking-at-any-closing-p)
          (forward-char))
        (and (sp-up-sexp count)
             (backward-char))))))
#+end_src

*** vc

Start ~git-commit-mode~ in normal state.
#+begin_src emacs-lisp
(after! git-commit
 (remove-hook 'git-commit-setup-hook #'+vc-start-in-insert-state-maybe-h))
#+end_src

**** magit
#+begin_src emacs-lisp
(after! magit
  (setq! magit-diff-refine-hunk 'all
         magit-diff-hide-trailing-cr-characters t
         magit-display-buffer-function #'my/magit-display-buffer-fn))
#+end_src

#+begin_src emacs-lisp
(defun my/magit-display-buffer-fn (buffer)
    "Same as `magit-display-buffer-traditional', except...

- Open status buffer in the same window.
- Magit process windows are always opened in small windows below the current. "
    (let ((buffer-mode (buffer-local-value 'major-mode buffer)))
      (display-buffer
       buffer (cond
               ((eq buffer-mode 'magit-status-mode) '(display-buffer-same-window))
               ((eq buffer-mode 'magit-process-mode) '(display-buffer-below-selected
                                                       (window-height . (truncate (* (window-height) 0.35)))))
               ((and (derived-mode-p 'magit-mode)
                     (not (memq buffer-mode
                                '(magit-process-mode
                                  magit-revision-mode
                                  magit-diff-mode
                                  magit-stash-mode))))
                '(display-buffer-same-window))

               ('(+magit--display-buffer-in-direction))))))
#+end_src

*** pandoc
#+begin_src emacs-lisp
;; (use-package! pandoc-mode
;;   :commands (pandoc-mode))

(defun my-convert-makrdown-region-to-org (start end)
  "Convert selected region from markdown to org and replace selection"
  (interactive "r")
  (shell-command-on-region start end "pandoc -f markdown -t org" t t))
#+end_src
*** COMMENT smartparens
Turn off =smartparens= in Doom
#+begin_src emacs-lisp
(after! doom
  (remove-hook 'doom-first-buffer-hook #'smartparens-global-mode))

(after! org
  (add-hook 'org-mode-hook #'turn-off-smartparens-mode))
#+end_src
*** chezmoi
#+begin_src emacs-lisp
(use-package! chezmoi
  :config
  ;; Integrate with evil mode by toggling template display when entering insert
  ;; mode.
  (defun chezmoi--evil-insert-state-enter ()
    "Run after evil-insert-state-entry."
    (chezmoi-template-buffer-display nil (point))
    (remove-hook 'after-change-functions #'chezmoi-template--after-change 1))

  (defun chezmoi--evil-insert-state-exit ()
    "Run after evil-insert-state-exit."
    (chezmoi-template-buffer-display nil)
    (chezmoi-template-buffer-display t)
    (add-hook 'after-change-functions #'chezmoi-template--after-change nil 1))

  (defun chezmoi-evil ()
    (if chezmoi-mode
        (progn
          (add-hook 'evil-insert-state-entry-hook #'chezmoi--evil-insert-state-enter nil 1)
          (add-hook 'evil-insert-state-exit-hook #'chezmoi--evil-insert-state-exit nil 1))
      (progn
        (remove-hook 'evil-insert-state-entry-hook #'chezmoi--evil-insert-state-enter 1)
        (remove-hook 'evil-insert-state-exit-hook #'chezmoi--evil-insert-state-exit 1))))
  (add-hook 'chezmoi-mode-hook #'chezmoi-evil))

(use-package! chezmoi-dired
  :init
  (add-to-list 'load-path (file-name-concat doom-local-dir "straight/repos/chezmoi.el/extensions"))
  :commands (chezmoi-dired-add-marked-files))
#+end_src

** Org-mode

The ~org-directory~ variable must be set before Org loads!
#+begin_src emacs-lisp
(setq org-directory (expand-file-name "~/notes/"))
#+end_src

*** org
#+begin_src emacs-lisp :noweb yes
(after! org
  <<org-config>>
  )
#+end_src
**** config
:PROPERTIES:
:header-args: :noweb-ref org-config
:END:
***** General settings
#+begin_src emacs-lisp
(setq! org-modules '(;; ol-doi
                     ;; ol-w3m
                     ;; ol-bbdb
                     ol-bibtex
                     ol-docview
                     ;; ol-gnus
                     ol-info
                     ;; ol-irc
                     ;; ol-mhe
                     ;; ol-rmail
                     ;; ol-eww
                     ))
#+end_src

#+begin_src emacs-lisp
(setq! org-return-follows-link t
       ;; org-fold-core-style 'overlays
       org-tags-column -80 ; Прижимать тэги к 80 колонке справа.

       ;; org-M-RET-may-split-line '((default . t))
       org-insert-heading-respect-content nil
       org-default-notes-file (file-name-concat org-directory "inbox.org")

       ;; Indentation for the content of a source code block.
       org-edit-src-content-indentation 0
       org-src-preserve-indentation nil

       ;; Use `TAB' language's major-mode binding in code blocks.
       org-src-tab-acts-natively nil

       ;; ;; Follow org links by press Enter with point on it.
       ;; org-return-follows-link t

       ;; ;; Changes to task states might get logged, especially for recurring
       ;; ;; routines. If so, log them in a drawer, not the content of the note.
       ;; org-log-state-notes-into-drawer t

       org-indirect-buffer-display 'current-window
       org-list-allow-alphabetical t
       ;; org-log-into-drawer t

       org-startup-folded 'show2levels ; Initial visibility

       ;; Properties apply also for sublevels.
       org-use-property-inheritance t

       ;; org-log-done 'time ; Track time when tasks were finished.
       org-deadline-warning-days 14
       org-log-redeadline 'note
       org-log-reschedule nil
       org-blank-before-new-entry '((heading . t)
                                    (plain-list-item . auto)))
#+end_src

***** appearence
#+begin_src emacs-lisp
(setq org-startup-indented t
      org-fontify-whole-heading-line t
      org-fontify-quote-and-verse-blocks t
      org-pretty-entities t)

;; Enclose text in "{}" after "_" to make it treated as subscript.
(setq org-use-sub-superscripts '{})
#+end_src

***** org-id
#+begin_src emacs-lisp
(setq! org-id-method 'ts
       org-id-ts-format "%Y%m%dT%H%M%S")
#+end_src

How to store link on org-mode outline node:
#+begin_src emacs-lisp
(setq! org-id-link-to-org-use-id 'create-if-interactive)
;; (setq! org-id-link-to-org-use-id 'use-existing)
#+end_src

***** Attachments (org-attach)
#+begin_src emacs-lisp
(setq! org-attach-store-link-p 'attached
       org-attach-dir-relative t
       org-attach-id-dir (file-name-concat org-directory "org-attach/")
       org-attach-method 'mv ; move
       ;; org-attach-use-inheritance nil
       org-attach-auto-tag "ATTACH"
       org-attach-preferred-new-method 'id
       org-attach-sync-delete-empty-dir 'query
       org-file-apps '((system . "xdg-open %s")
                       ("\\.pdf\\'" . system)
                       ("\\.djvu?\\'" . system)
                       (directory . system)
                       (auto-mode . emacs)
                       ("\\.x?html?\\'" . default))
       org-attach-id-to-path-function-list '(identity
                                             org-attach-id-uuid-folder-format
                                             org-attach-id-ts-folder-format
                                             org-attach-id-fallback-folder-format))

(defun my-org-attach-id-ts-folder-format (id)
  "Translate an UUID ID into a folder-path.
Default format for how Org translates ID properties to a path for
attachments.  Useful if ID is generated with UUID."
  (and (< 4 (length id))
       (format "%s/%s"
               (substring id 0 4)
               id
               ;; (substring id 4)
               )))
#+end_src

****** COMMENT Display list of org-attach'ed files in buffer property
- [[https://list.orgmode.org/87sg70vsvy.fsf@localhost/][Source]]

#+begin_src emacs-lisp
(defun org-attach-save-file-list-to-property (dir)
  "Save list of attachments to ORG_ATTACH_FILES property."
  (when-let* ((files (org-attach-file-list dir)))
    (org-set-property "ORG_ATTACH_FILES" (mapconcat #'identity files ", "))))

(add-hook 'org-attach-after-change-hook #'org-attach-save-file-list-to-property)
#+end_src

****** COMMENT my org-attach synchronizes advice
#+begin_src emacs-lisp
(defun my-org-roam-attach-sync-a (orig-fun)
  "My version of the `org-attach-sync' function, which works with
org-roam file level tags."
  (interactive)
  (let ((attach-dir (org-attach-dir))
        (attach-tag-fun (if (org-roam-buffer-p)
                            (lambda (&optional off)
                              (if off
                                  (org-roam-tag-remove (list org-attach-auto-tag))
                                (org-roam-tag-add (list org-attach-auto-tag))))
                          #'org-attach-tag)))
    (if (not attach-dir)
        (funcall attach-tag-fun 'off)
      (run-hook-with-args 'org-attach-after-change-hook attach-dir)
      (let ((files (org-attach-file-list attach-dir)))
	(funcall attach-tag-fun (not files)))
      (when org-attach-sync-delete-empty-dir
        (when (and (org-directory-empty-p attach-dir)
                   (if (eq 'query org-attach-sync-delete-empty-dir)
                       (yes-or-no-p "Attachment directory is empty.  Delete?")
                     t))
          (delete-directory attach-dir))))))

(advice-add 'org-attach-sync :around #'my-org-roam-attach-sync-a)
#+end_src

***** Capture templates
#+begin_src emacs-lisp
(setq org-capture-templates
      '(("j" "journal" plain
         (file+olp+datetree +org-capture-journal-file)
         "%?"
         :empty-lines-before 1
         ;; :kill-buffer t
         )))
#+end_src

***** babel

Open source block with ~org-edit-special~ in the same window.
#+begin_src emacs-lisp
(setq! org-src-window-setup 'current-window)
#+end_src

#+begin_src emacs-lisp
;; Allow babel code execution without confirming it every time.
(setq! org-confirm-babel-evaluate nil)
#+end_src

Available embedded languages for babel.
#+begin_src emacs-lisp
(setq! org-babel-load-languages '((sql . t)
                                  (shell . t)
                                  (emacs-lisp . t)
                                  (python . t)
                                  (plantuml . t)))
#+end_src

Use PlantUML executable instead of =.jar= file together with Java.
#+begin_src emacs-lisp
(setq! org-plantuml-exec-mode 'plantuml
       org-plantuml-jar-path (expand-file-name "~/.nix-profile/lib/plantuml.jar"))
#+end_src
***** footnotes
#+begin_src emacs-lisp
(setq! org-footnote-define-inline nil
       org-footnote-auto-adjust t)
#+end_src

***** images
#+begin_src emacs-lisp
(setq! org-startup-with-inline-images t
       org-cycle-inline-images-display t
       org-image-actual-width '(300))
#+end_src

***** =TODO= keywords and Priorities
#+begin_src emacs-lisp
(setq! org-todo-keywords
       '((sequence
          ;; "󰔌" ; SOMEDAY
          "󰒅" ; SOMEDAY
          "󰄱" ; TODO
          "󰡖" ; NEXT
          ;; "󰤌" ; IN PROCESS
          ;; "󱅊" ; IN PROGRESS
          ;; "󱗝" ; IN PROGRESS
          "󰔟" ; WAITING
          "|"
          "󰄵" ; DONE
          "󱈎" ; ARCHIVED
          "󰅘" ; CANCELLED
          )
         (sequence "󰃃" "" "|" "󱍻")
         (sequence "SOMEDAY" "TODO" "NEXT" "IN-PROGRESS" "WAITING" "|"
                   "DONE" "ARCHIVED" "CANCELLED")
         (sequence "TOREAD" "READING" "|" "READ")
         ))

;; Make priority signs be integers from 1 to 5, with 3 as default.
;; Default priorities are: #A, #B, #C, with #B as default.
(setq! org-priority-highest ?A
       org-priority-lowest  ?D
       org-priority-default ?C)

;; Consider all nested entries in the subtree for cookies.
;; [[info:org#Breaking Down Tasks]]
(setq! org-hierarchical-todo-statistics nil)
#+end_src

***** tags
#+begin_src emacs-lisp
;; (setq! org-use-tag-inheritance nil)
(setq! org-tags-exclude-from-inheritance '("project" "main" "index")
       org-tags-match-list-sublevels nil)
#+end_src

***** COMMENT org open fold
#+begin_src emacs-lisp
(defun +org/open-fold ()
  "Open the current fold (not but its children)."
  (interactive))
#+end_src
***** zotero integration

Redirect =zotero:= links to the system for handling:
#+begin_src emacs-lisp
(org-link-set-parameters "zotero" :follow
                         (lambda (zpath)
                           (browse-url (format "zotero:%s" zpath))))
#+end_src

*** org files appearence
**** Prettify symbols mode
#+begin_src emacs-lisp
;; ("TODO" . "")
;; ("WAIT" . "")
;; ("NOPE" . "")
;; ("DONE" . "")
;; ("[#A]" . "")
;; ("[#B]" . "")
;; ("[#C]" . "")
;; ("[ ]" . "")
;; ("[X]" . "")
;; ("[-]" . "")
;; (":PROPERTIES:" . "")
;; (":END:" . "―")
;; ("#+STARTUP:" . "")
;; ("#+TITLE: " . "")
;; ("#+RESULTS:" . "")
;; ("#+NAME:" . "")
;; ("#+ROAM_TAGS:" . "")
;; ("#+FILETAGS:" . "")
;; ("#+HTML_HEAD:" . "")
;; ("#+SUBTITLE:" . "")
;; ("#+AUTHOR:" . "")
;; (":Effort:" . "")
;; ("SCHEDULED:" . "")
;; ("DEADLINE:" . "")

(defun my/org-icons ()
  "Beautify org mode keywords."
  (setq prettify-symbols-alist
        (mapcan (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
                '(("#+begin_src" . "")
                  ("#+end_src" . "―")
                  ("#+begin_example" . "")
                  ("#+end_example" . "")
                  ("#+begin_quote" . "")
                  ("#+end_quote" . "")
                  ;; ("#+begin_quote" . "")
                  ;; ("#+end_quote" . "")
                  ;; ("#+header:" . ?)
                  ;; ("#+name:" . ?﮸)
                  ;; ("#+results:" . ?)
                  ;; ("#+call:" . ?)
                  ;; (":properties:" . ?)
                  ;; (":logbook:" . ?)
                  )))
  (prettify-symbols-mode))
#+end_src

**** COMMENT Font in agenda buffer
#+begin_src emacs-lisp
(defun my/org-setup-agenda-buffer-face ()
  (setq buffer-face-mode-face '(:family "iA Writer Mono S"))
  (buffer-face-mode))

(add-hook 'org-agenda-mode-hook 'my/org-setup-agenda-buffer-face)
#+end_src

**** org-superstar
• ◦ ‣ ￭ ■ ⋄ ○ □ ▬ ▶ ▸ ◂ ◆

#+begin_src emacs-lisp
(use-package! org-superstar
  :custom
  (org-superstar-remove-leading-stars nil)
  (org-superstar-headline-bullets-list '("●"))
  ;; (org-superstar-leading-bullet)
  (org-superstar-item-bullet-alist '((?+ . ?◦)
                                     (?- . ?•)
                                     (?* . ?◆)))
  :hook (org-mode . org-superstar-mode))
#+end_src

**** org-pretty-tags
#+begin_src emacs-lisp
(use-package! org-pretty-tags
  :hook (org-mode . org-pretty-tags-mode)
  :custom (org-pretty-tags-surrogate-strings '(("attach" . "󰁦")
                                               ("ATTACH" . "󰁦"))))
#+end_src

**** org-appear
#+begin_src emacs-lisp
(use-package! org-appear
  :custom
  (org-hide-emphasis-markers t)
  :hook (org-mode . org-appear-mode))
#+end_src

*** org-auto-tangle
#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode)
  ;; :custom (org-auto-tangle-babel-safelist '("~/.config/emacs/README.org"))
  )
#+end_src

*** org-tempo
Org 9.2 introduced a new template expansion mechanism, combining
~org-insert-structure-template~ bound to =z,= (default binding =C-c C-,=).
The previous ~easy-templates~ mechanism (=<s Tab=) should be enabled manualy.
For more information, refer to the commentary section in =org-tempo.el=.

Type =<se Tab= to insert emacs-lisp source code block,
type =<sh Tab= to insert bash source block and so on.

#+begin_src emacs-lisp
(after! org
  (use-package! org-tempo
    ;; :after org
    :config
    ;; Elements of length one have a tab appended. Elements of length two are
    ;; kept as is. Longer elements are truncated to length two. If an element
    ;; cannot be made unique, an error is raised.
    (pushnew! org-structure-template-alist
              '("se" . "src emacs-lisp")
              '("sh" . "src sh")
              '("sc" . "src cpp")
              '("sf" . "src fennel")
              '("sl" . "src common-lisp")
              '("sm" . "src markdown")
              ;; '("sr" . "src rust")
              '("sp" . "src python")
              '("su" . "src lua"))))
#+end_src

*** org-roam
**** org-roam
#+begin_src emacs-lisp :noweb yes
(after! org-roam
  <<org-roam-config>>
  )
#+end_src
***** config
:PROPERTIES:
:header-args: :noweb-ref org-roam-config
:END:
****** Variables
#+begin_src emacs-lisp
(setq org-roam-directory org-directory)
#+end_src

Provide link completion matching outside of Org links.
#+begin_src emacs-lisp
(setq org-roam-completion-everywhere t)
#+end_src

Make =org-roam= snappier during sqlite database synchronization.
#+begin_src emacs-lisp
(setq! org-roam-db-gc-threshold most-positive-fixnum)
#+end_src

https://github.com/org-roam/org-roam/issues/576
#+begin_src emacs-lisp
(setq! org-roam-graph-executable "dot")
#+end_src

#+begin_src emacs-lisp
#+end_src

#+begin_src emacs-lisp
(setq org-roam-mode-section-functions '(org-roam-backlinks-section
                                        org-roam-reflinks-section
                                        ;; org-roam-unlinked-references-section
                                        ))
#+end_src

****** Node searching interface in completion menu
#+begin_src emacs-lisp
(setq! org-roam-node-display-template
       (format "${title:*} %s %s"
               (propertize "${doom-type:12}" 'face 'font-lock-keyword-face)
               (propertize "${doom-tags:42}" 'face '(:inherit org-tag :box nil))))
#+end_src

****** Capture template to respect the Denote filenaming scheme
#+begin_src emacs-lisp
(setq org-roam-extract-new-file-path "${slug}.org")

(setq org-roam-capture-templates
      `(("d" "denote" plain "%?" :target
         (file+head "${slug}.org"
                    ,(concat "#+title:    ${title}\n"
                             "#+filetags: ${my-tags}"))
         :immediate-finish t
         :unnarrowed t)))
#+end_src

******* Custom =${slug}= function

The slug function is used to determine the filename to use for a node, based on
its title. It is calculated in ~org-roam-node-slug~. If you wish to change the
default behaviour of the slug function, you should override the entire function.

#+begin_src emacs-lisp
(cl-defmethod org-roam-node-slug ((node org-roam-node))
  "Return the slug of NODE."
  (let ((title (org-roam-node-title node))
        (id (org-roam-node-id node))
        (slug-trim-chars '(;; Combining Diacritical Marks https://www.unicode.org/charts/PDF/U0300.pdf
                           768 ; U+0300 COMBINING GRAVE ACCENT
                           769 ; U+0301 COMBINING ACUTE ACCENT
                           770 ; U+0302 COMBINING CIRCUMFLEX ACCENT
                           771 ; U+0303 COMBINING TILDE
                           772 ; U+0304 COMBINING MACRON
                           774 ; U+0306 COMBINING BREVE
                           775 ; U+0307 COMBINING DOT ABOVE
                           776 ; U+0308 COMBINING DIAERESIS
                           777 ; U+0309 COMBINING HOOK ABOVE
                           778 ; U+030A COMBINING RING ABOVE
                           780 ; U+030C COMBINING CARON
                           795 ; U+031B COMBINING HORN
                           803 ; U+0323 COMBINING DOT BELOW
                           804 ; U+0324 COMBINING DIAERESIS BELOW
                           805 ; U+0325 COMBINING RING BELOW
                           807 ; U+0327 COMBINING CEDILLA
                           813 ; U+032D COMBINING CIRCUMFLEX ACCENT BELOW
                           814 ; U+032E COMBINING BREVE BELOW
                           816 ; U+0330 COMBINING TILDE BELOW
                           817 ; U+0331 COMBINING MACRON BELOW
                           )))
    (cl-flet* ((nonspacing-mark-p (char)
                 (memq char slug-trim-chars))
               (strip-nonspacing-marks (s)
                 (string-glyph-compose
                  (apply #'string (seq-remove #'nonspacing-mark-p
                                              (string-glyph-decompose s)))))
               (cl-replace (title pair)
                 (replace-regexp-in-string (car pair) (cdr pair) title)))
      (let* ((pairs `(("[^[:alnum:][:digit:]]" . " ") ;; convert anything not alphanumeric to spaces
                      ("%s*" . " ")                   ;; remove sequential spaces
                      ("^-" . "")                     ;; remove starting underscore
                      ("-$" . "")))                   ;; remove ending underscore
             (slug (-reduce-from #'cl-replace (strip-nonspacing-marks title) pairs)))
        ;; (downcase slug)
        (concat id "--" slug)))))
#+end_src

******* =${my-tags}= function
#+begin_src emacs-lisp
(cl-defmethod org-roam-node-my-tags ((node org-roam-node))
  (let ((tags (completing-read-multiple "New note KEYWORDS: "
                                        (org-roam-tag-completions))))
    (when tags
      (concat ":" (mapconcat #'identity tags ":") ":"))))
#+end_src

****** config
#+begin_src emacs-lisp
(org-roam-db-autosync-mode)
(add-to-list 'org-default-properties "ROAM_EXCLUDE")

;; Soft-wrap lines in the backlinks buffer
(remove-hook 'org-roam-mode-hook #'turn-on-visual-line-mode)
#+end_src

****** COMMENT open node from org-roam buffer in main window
#+begin_src emacs-lisp
(advice-add
 'org-roam-node-visit
 :around
 (defun my-org-roam-node-visit (orig-fun node &rest args)
   ;; (interactive (list (org-roam-node-at-point t)))
   (org-roam-node-open node
                       ;; #'pop-to-buffer-same-window
                       ;; #'display-buffer-use-some-window
                       (lambda (buffer)
                         (display-buffer buffer
                                         '((display-buffer-use-some-window))))
                       t)))
#+end_src

****** org-roam buffer
******* COMMENT In regular window
- [[id:20241124T151533][My notes about display-buffer-alist]]

Dispaly in a regular window (not a side-window). This allows for predictable
navigation:
1. =RET= navigates to thing-at-point in the current window, replacing the Org-roam
   buffer.
2. =C-u RET= navigates to thing-at-point in the other window.

#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-direction)
               (direction . right)
               (window-width . 0.4)
               (window-height . fit-window-to-buffer)))
#+end_src

******* In side window
- [[id:20241124T151533][My notes about display-buffer-alist]]
#+begin_src emacs-lisp
(add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-side-window)
               ;; (side . left)
               (side . right)
               (slot . 0)
               (window-width . 80) ; 0.4
               (window-height . fit-window-to-buffer)))

;; Uncomment only one of the following two peaces, as they aim to achieve the
;; same behavior:
;;
;; - If there are two open windows (an org-roam buffer with backlinks in side
;;   window and a general org-mode window displaying an org-roam note), pressing
;;   RET in the org-roam buffer (`org-roam-preview-visit') should open the note
;;   buffer in the main window.
;;
;; - In all other cases, the org-roam note should open in the same window.
;;
;; Alternative way is to set `display-buffer-base-action' (which is not
;; recomended).

;; ;; 1
;; (add-hook 'org-roam-mode-hook
;;           (lambda ()
;;             (setq-local display-buffer--same-window-action
;;                         '(display-buffer-use-some-window (main)))))

;; 2
(add-to-list 'display-buffer-alist
             '(org-roam-buffer-p
               (display-buffer-same-window display-buffer-reuse-mode-window)
               (mode org-mode)
               (body-function . select-window)))
#+end_src

******* org-roam buffer content
- [[https://github.com/syl20bnr/spacemacs/issues/16519][syl20bnr/spacemacs#16519 How can I make org-roam's buffer look useful and nic...]]
- [[https://github.com/org-roam/org-roam/issues/1934][org-roam/org-roam#1934 roam-buffer shows full content of backlinks/reflinks]]

#+begin_src emacs-lisp
(defun my-org-roam-buffer-preview-function-1 ()
  (let* ((elem (org-element-context))
         (parent (org-element-property :parent elem)))
    ;; TODO: alt handling for non-paragraph elements
    (string-trim-right (buffer-substring-no-properties
                        (org-element-property :begin parent)
                        (org-element-property :end parent)))))


(defun my-org-element-string (elem)
  "Get the string for org AST node."
  (string-trim (buffer-substring-no-properties
                (org-element-property :begin elem)
                (org-element-property :end elem))))


(defun my-org-roam-buffer-preview-function-2 ()
  (let* ((elem (org-element-at-point))
         (type (car elem))
         (parent (org-element-property :parent elem)))
    (cond
     ;; Handle headlines
     ((eq type 'headline)
      (let* ((title (org-element-property :title elem))
             (level (org-element-property :level elem))
             (stars (make-string level ?*)))
        (concat stars " " title)))
     ;; list items
     ((and (eq type 'paragraph)
           ;; `parent' is checked here to prevent from evaluation the next
           ;; line if it is nil.
           parent
           (eq (car parent) 'item))
      (my-org-element-string parent))
     ;; All others
     (t
      (string-trim-right (buffer-substring-no-properties
                          (org-element-property :begin elem)
                          (org-element-property :end elem)))
      (my-org-element-string elem)))))


;; (defun my-org-roam-buffer-preview-function-3 ()
;;   "Return the preview content at point - depending on context.
;;
;; This function handles different cases:
;; - If the current line is an Org-mode list item, show the entire list.
;; - If the current line has more than 300 characters, it retrieves the whole line.
;; - Otherwise, it retrieves two lines before and after the current
;;   line, without crossing headlines."
;;
;;   (let* ((line-beg (save-excursion (org-beginning-of-line) (point)))  ; Start of current line
;;          (line-end (save-excursion (org-end-of-line) (point)))        ; End of current line
;;          (line-length (- line-end line-beg))                          ; Calculate line length
;;          (is-item (org-at-item-p))                                    ; Check if the line is an item
;;          (beg (cond
;; 	       ;; If the line is an item, go to item list beginning
;; 	       (is-item (save-excursion
;; 		          (let* ((struct (org-list-struct))
;; 			         (pos (progn (beginning-of-line) (point)))
;; 			         (ind (org-list-get-nth 1 pos struct))
;; 			         (n (if (= 0 ind)
;; 				        (progn (org-beginning-of-item-list) 0)
;; 			              (log ind 2))))
;; 		            (while (> n 0)
;; 		              (org-beginning-of-item-list)
;; 		              (forward-line -1)
;; 		              (org-beginning-of-item-list)
;; 		              (setq n
;; 			            (log (org-list-get-nth 1
;; 						           (progn (beginning-of-line) (point))
;; 						           struct))))
;; 		            (point))))
;; 	       ;; If the line length is greater than 300, return the whole line
;; 	       ((> line-length 300) line-beg)
;; 	       ;; Otherwise, go two lines before the current line or beginning
;; 	       ;; of block whichever comes first
;; 	       (t (let ((meta-end (save-excursion (org-roam-end-of-meta-data t) (point)))
;; 		        (line-beg-1 (save-excursion (org-beginning-of-line -1) (point))))
;; 		    (if (>= meta-end line-beg-1)
;; 		        meta-end
;; 		      line-beg-1)))))
;;
;;          (end (cond
;; 	       ;; If the line is an item, go to the end of item
;; 	       (is-item (save-excursion
;;                           (org-end-of-item-list) (point)))
;; 	       ;; If the line length is greater than 300, return the whole line
;; 	       ((> line-length 300) line-end)
;; 	       ;; Otherwise, go two lines after the current line
;; 	       (t (let ((next-heading (save-excursion (org-next-visible-heading 1) (point)))
;; 		        (line-end+3 (save-excursion (org-end-of-line 3) (point))))
;; 		    (if (<= next-heading line-end+3) next-heading line-end+3))))))
;;
;;     ;; Return the trimmed content between `beg` and `end`
;;     (string-trim (buffer-substring-no-properties beg end))))


;; (setq org-roam-preview-function #'org-roam-preview-default-function)
;; (setq org-roam-preview-function #'my-org-roam-buffer-preview-function-1)
(setq org-roam-preview-function #'my-org-roam-buffer-preview-function-2)
;; (setq org-roam-preview-function #'my-org-roam-buffer-preview-function-3)
#+end_src

****** Additional functions
- [[https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/][5 org-roam hacks by System Crafters]]

#+begin_src emacs-lisp
(defun my-org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))
#+end_src

#+begin_src emacs-lisp
(defun my-org-roam-create-untracked-node ()
  "Create Org-Roam node with `ROAM_EXCLUDE' property."
  (interactive)
  (org-id-get-create)
  (org-set-property "ROAM_EXCLUDE" "t"))
#+end_src

**** org-roam-dailies

Note that for daily files to show up in the calendar, they have to be of format
"org-time-string.org".
#+begin_src emacs-lisp
(use-package! org-roam-dailies
  :after org-roam
  :config
  (setq org-roam-dailies-directory "daily/")
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry "* %?"
           :target (file+head "%<%Y-%m-%d>.org"
                              "#+title: %<%Y-%m-%d>\n")
           :empty-lines 1))))
#+end_src

**** consult-org-roam
#+begin_src emacs-lisp :noweb yes
(use-package! consult-org-roam
  :after org-roam
  :config
  <<consult-org-roam-config>>
  (consult-org-roam-mode))
#+end_src
***** config
:PROPERTIES:
:header-args: :noweb-ref consult-org-roam-config
:END:

Use =ripgrep= for searching with ~consult-org-roam-search~.
#+begin_src emacs-lisp
(setq! consult-org-roam-grep-func #'consult-ripgrep)
#+end_src

Configure a custom narrow key for ~consult-buffer~.
#+begin_src emacs-lisp
(setq! consult-org-roam-buffer-narrow-key ?r)
#+end_src

Display org-roam buffers right after non-org-roam buffers in ~consult-buffer~
(and not down at the bottom).
#+begin_src emacs-lisp
;; (setq! consult-org-roam-buffer-after-buffers t)
#+end_src

**** org-roam-ui
#+begin_src emacs-lisp
(use-package! org-roam-ui
  :after org-roam
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-follow-mode t)
  (org-roam-ui-open-on-start nil))
#+end_src

**** org-roam-ql
#+begin_src emacs-lisp
(use-package! org-roam-ql
  :after org-roam)
#+end_src
**** COMMENT org-roam-tags
#+begin_src emacs-lisp
(use-package! org-roam-tags
  ;; (map! :map org-mode-map
  ;;       :n "" #'org-roam-tags-tag-note ; "C-c C-g"
  ;;       :n "" #'org-roam-tags-tag-note-at-point ; "C-c g"
  ;;       :n "" #'org-roam-tags-open-tag ; "C-c M-g"
  ;;       )
  )
#+end_src

**** nursery
#+begin_src emacs-lisp
(use-package! org-roam-dblocks
  :hook (org-mode . org-roam-dblocks-autoupdate-mode)
  :config
  (defalias 'org-roam-insert-notes-dblock     #'org-insert-dblock:notes)
  (defalias 'org-roam-insert-backlinks-dblock #'org-insert-dblock:backlinks))

;; (use-package org-roam-lazy-previews
;;   :after org-roam
;;   :demand t)
#+end_src

*** COMMENT Denote integration
#+begin_src emacs-lisp
(use-package! denote
  :config
  (setq! denote-directory  org-directory
         denote-date-prompt-use-org-read-date t
         ;; Remove a format specifier for a link, to not create CUSTOM_ID
         ;; property in the note from which `org-capture' was invoked.
         ;; https://github.com/protesilaos/denote/issues/404
         denote-org-capture-specifiers "%i\n%?"
         denote-org-front-matter (my-concat '(":PROPERTIES:"
                                              ":ID:        %4$s"
                                              ":END:"
                                              "#+title:    %1$s"
                                              ;; "#+date:     %2$s"
                                              "#+filetags: %3$s")
                                            "\n"))

  ;; Automatically rename Denote buffers
  (denote-rename-buffer-mode)

  ;; Auto generate time based ID only on file creating.
  (setq denote-generate-identifier-automatically 'on-creation)
  ;; Redefine some Denote naming scheme components.
  (setq denote-file-name-slug-functions '((title . my-denote-sluggify-title)
                                          (signature . denote-sluggify-signature)
                                          (keyword . denote-sluggify-keyword)))
  (defun my-denote-sluggify-title (str)
    (thread-last
      str
      (replace-regexp-in-string "[][{}!@#$%^&*()+'\"?,.\|;:~`‘’“”/=]*" "")
      (replace-regexp-in-string "\s+" " ")
      (replace-regexp-in-string "-\\{2,\\}" "-")
      (replace-regexp-in-string "^-\\|-$" "")))

  ;; Fontification in Dired
  (add-hook 'dired-mode-hook #'denote-dired-mode)
  ;; (setq denote-dired-directories-include-subdirectories t
  ;;       denote-dired-directories org-directory)
  ;; ;; (setq denote-dired-directories
  ;; ;;       (list denote-directory
  ;; ;;             org-attach-id-dir
  ;; ;;             ;; (thread-last denote-directory (expand-file-name "attachments"))
  ;; ;;             ;; (expand-file-name "~/Documents/ vlog")
  ;; ;;             ))
  ;; (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
  )
#+end_src

*** org-bookmarks
#+begin_src emacs-lisp
(use-package! org-bookmarks
  :commands (org-bookmarks)
  :init
  (setq! org-bookmarks-file (file-name-concat org-directory "bookmarks.org")
         org-bookmarks-add-org-capture-template t
         org-bookmarks-display-screenshot t)
  (org-bookmarks-add-org-capture-template))
#+end_src

*** org-journal
#+begin_src emacs-lisp
(after! org-journal
  ;; When switching from daily to weekly, monthly, yearly, or from weekly,
  ;; monthly, yearly to daily, you need to invalidate the cache. This has
  ;; currently to be done manually by calling `org-journal-invalidate-cache'.
  (setq! org-journal-file-type 'monthly)
  (setq! org-extend-today-until 4
         org-journal-date-format "%x, %A")) ; "DATE, WEEKDAY"
#+end_src

*** org-web-tools
#+begin_src emacs-lisp
(use-package! org-web-tools
  ;; :after org
  :commands (org-web-tools-insert-web-page-as-entry
             org-web-tools-read-url-as-org
             org-web-tools-convert-links-to-page-entries
             org-web-tools-archive-attach
             org-web-tools-archive-view))
#+end_src

*** Doom lookup for org-mode
#+begin_src emacs-lisp
(after! org
  (set-lookup-handlers! 'org-mode
    :definition #'+org-lookup-definition-handler
    :references #'+org-lookup-references-handler
    :documentation #'helpful-at-point ;; original: #'+org-lookup-documentation-handler
    ))
#+end_src

*** scrolling over images
#+begin_src emacs-lisp
(use-package! org-sliced-images
  ;; :config
  ;; (org-sliced-images-mode +1)
  )
#+end_src

*** LaTeX previews
#+begin_src emacs-lisp
(use-package! org-fragtog
  :after org
  :hook
  (org-mode . org-fragtog-mode)
  :init
  (setq! org-startup-with-latex-preview t)

  (setq! org-format-latex-options (thread-first
                                    org-format-latex-options
                                    (plist-put :scale 0.8)
                                    ;; (plist-put :foreground 'auto)
                                    ;; (plist-put :background 'auto)
                                    )))
#+end_src

** Notes
*** COMMENT Obsidian
#+begin_src emacs-lisp
(use-package! obsidian
  :custom
  (obsidian-directory "~/obsidian")
  ;; The directory for daily notes (file name is YYYY-MM-DD.md)
  (obsidian-daily-notes-directory "Daily Notes")
  ;; Directory of note templates, unset (nil) by default
  ;;(obsidian-templates-directory "Templates")
  ;; Daily Note template name - requires a template directory.
  ;; Default: Daily Note Template.md
  ;;(obsidian-daily-note-template "Daily Note Template.md")
  (markdown-enable-wiki-links t)
  :config
  (global-obsidian-mode t))
#+end_src

** Major modes
*** COMMENT Tree-sitter (treesit.el)

*WARNING:* Currently doesn't work with Doom.

Manually build tree-sitter grammar: [[elisp:(helpful-function 'treesit-install-language-grammar)][treesit-install-language-grammar]]

Sources to install C and C++ grammar.
#+begin_src emacs-lisp
(setq treesit-language-source-alist
      '((cpp "https://github.com/anuvyklack/tree-sitter-cpp")
        ;; (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
        (c   "https://github.com/tree-sitter/tree-sitter-c")))

(-each treesit-language-source-alist
  (-lambda ((lang url))
    (unless (treesit-language-available-p lang)
      (treesit-install-language-grammar lang))))
#+end_src

#+begin_src emacs-lisp
(setq! treesit-font-lock-level 4)
;; (setq! treesit-extra-load-path )
#+end_src

**** Auto install tree-sitter grammars
#+begin_src emacs-lisp :noweb yes
(use-package! treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  :config

  ;; nushell
  (add-to-list 'treesit-auto-langs 'nu)
  (add-to-list 'treesit-auto-recipe-list
               (make-treesit-auto-recipe
                :lang 'nu
                :ts-mode 'nushell-ts-mode
                :url "https://github.com/nushell/tree-sitter-nu"
                :revision "main"
                :source-dir "src"
                :ext "\\.nu\\'"))

  ;; nix
  (add-to-list 'treesit-auto-langs 'nix)
  (add-to-list 'treesit-auto-recipe-list
               (make-treesit-auto-recipe
                :lang 'nix
                :ts-mode 'nix-ts-mode
                :remap 'nix-mode
                :url "https://github.com/nix-community/tree-sitter-nix"
                :revision "master"
                :source-dir "src"
                :ext "\\.nix\\'"))

  ;; ;; fennel
  ;; (add-to-list 'treesit-auto-langs 'fennel)
  ;; (add-to-list 'treesit-auto-recipe-list
  ;;              (make-treesit-auto-recipe
  ;;               :lang 'fennel
  ;;               :ts-mode 'fennel-ts-mode
  ;;               :remap 'fennel-mode
  ;;               :url "https://github.com/travonted/tree-sitter-fennel"
  ;;               :revision "master"
  ;;               :source-dir "src"
  ;;               :ext "\\.fnl\\'"))

  ;; (setq! treesit-auto-langs
  ;;        (seq-map #'treesit-auto-recipe-lang treesit-auto-recipe-list))
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+end_src
*** c++-mode
#+begin_src emacs-lisp
(after! cc-mode
  (c-add-style "my-custom-style"
               '("stroustrup" ;; "doom"
                 (c-basic-offset . 4)
                 (indent-tabs-mode . nil)
                 (c-offsets-alist . ((innamespace . 0)
                                     (namespace-open . 0)
                                     (namespace-close . 0)
                                     (access-label . 0)))))
  (setf (alist-get 'other c-default-style) "my-custom-style"))
#+end_src

*** compilation-mode
#+begin_src emacs-lisp
(add-hook! 'compilation-mode-hook
  (+word-wrap-mode +1))
#+end_src

*** emacs-lisp-mode
#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
#+end_src

*** common-lisp-mode
#+begin_src emacs-lisp
(add-hook 'lisp-mode-hook #'aggressive-indent-mode)
#+end_src

#+begin_src emacs-lisp
;; (set-popup-rules!
;;  '(("^\\*sly-mrepl"       :vslot 2 :size 0.3 :quit nil :ttl nil)
;;    ("^\\*sly-compilation" :vslot 3 :ttl nil)
;;    ("^\\*sly-traces"      :vslot 4 :ttl nil)
;;    ("^\\*sly-description" :vslot 5 :size 0.3 :ttl 0)
;;    ;; Do not display debugger or inspector buffers in a popup window. These
;;    ;; buffers are meant to be displayed with sufficient vertical space.
;;    ("^\\*sly-\\(?:db\\|inspector\\)" :ignore t)))
#+end_src

*** org-mode
#+begin_src emacs-lisp
(add-hook! 'org-mode-hook :append
  (setq-local fill-column 80) ;; set textwidth to 80
  (display-line-numbers-mode -1)
  ;; (auto-revert-mode) ;; обновлять буфер, если файл изменился

  (auto-fill-mode) ;; hard wrap long lines
  ;; (setq-local normal-auto-fill-function #'do-auto-fill) ;; Default is `org-auto-fill-function'

  (+word-wrap-mode -1) ;; soft wrap long lines

  (my/org-icons)
  (setq-local evil-shift-width 2)
  ;; (setq-local TeX-electric-sub-and-superscript nil)
  )
#+end_src

*** prog-mode
#+begin_src emacs-lisp
(add-hook! 'prog-mode-hook :append
  (setq-local visual-fill-column-width (+ fill-column 5)))
#+end_src

*** text-mode
#+begin_src emacs-lisp
(remove-hook! 'text-mode-hook #'display-line-numbers-mode)
#+end_src

*** fish-mode
#+begin_src emacs-lisp
(use-package! fish-mode)
#+end_src

*** lua-mode
#+begin_src emacs-lisp
(after! lua-mode
  (setq! lua-indent-level 3))
#+end_src

*** emacs-lisp
Trun off eldoc when edebug is active
#+begin_src emacs-lisp
(add-hook 'edebug-mode-hook
  (lambda ()
    (eldoc-mode (if edebug-mode -1 1))))
#+end_src

** My custom commands
*** my-which-key-set-command-description
#+begin_src emacs-lisp
(defun my-which-key-add-command-based-replacements (&rest args)
  "Add description for command that would be shown in the which-key menu"
  (dolist (pair (-partition 2 args))
    (-let* (((command description) pair)
            (command (if (symbolp command)
                       (symbol-name command)
                     command)))
      (add-to-list 'which-key-replacement-alist
                   `((nil . ,command) . (nil . ,description))))))
#+end_src

*** narrow-to-active-region
#+begin_src emacs-lisp
(defun my-narrow-to-active-region ()
  (interactive)
  (narrow-to-region (region-beginning)
                    (region-end))
  (evil-exit-visual-state))
#+end_src

*** toggle window dedication
#+begin_src emacs-lisp
(defun my-toggle-window-dedication ()
  "Toggles window dedication in the selected window."
  (interactive)
  (let* ((window    (selected-window))
         (dedicated (window-dedicated-p window)))
    (set-window-dedicated-p window (not dedicated))
    (message "Window %sdedicated to %s"
             (if dedicated "no longer " "")
             (buffer-name))))
#+end_src

*** COMMENT ansi-color
#+begin_src emacs-lisp
(require 'ansi-color)
(defun display-ansi-colors ()
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))
#+end_src

*** toggle line spacing
- [[http://xahlee.info/emacs/emacs/emacs_toggle_line_spacing.html][Source]]
#+begin_src emacs-lisp
(defun my/toggle-line-spacing ()
  "Toggle line spacing between my custom value and no extra space"
  (interactive)
  (if line-spacing
      (setq line-spacing nil)
    (setq line-spacing (default-value 'line-spacing)))
  (redraw-frame (selected-frame)))
#+end_src

*** Copy current file path and line-position to clipboard
#+begin_src emacs-lisp
(defun my/copy-file-current-line-position-to-clipboard ()
  "Copy current line in file to clipboard as `</path/to/file>:<line-number>'."
  (interactive)
  (let* ((path (if (equal current-prefix-arg '(4))
                   (string-replace (getenv "HOME") "~" (buffer-file-name))
                 (buffer-file-name)))
         (path-with-line-number (concat path ":" (number-to-string (line-number-at-pos)))))
    (kill-new path-with-line-number)
    (message path-with-line-number)))

(defun my/copy-file-position-for-org-link-target-to-clipboard ()
  "Copy current line in file to clipboard as `file:</path/to/file>::<line-number>'."
  (interactive)
  (let* ((file-name (buffer-file-name))
         (line-number (number-to-string (line-number-at-pos)))
         (path-with-line-number (concat "file:" file-name "::" line-number)))
    (kill-new path-with-line-number)
    (message (concat path-with-line-number " copied to clipboard"))))
#+end_src
*** kill buffer and window
#+begin_src emacs-lisp
;; kill-buffer-and-window

(evil-define-command my-evil-kill-buffer-and-window ()
  (kill-buffer)
  (evil-window-delete))
#+end_src

** Keybindings
*** My keymaps
#+begin_src emacs-lisp
(defvar-keymap my-notes-map)
(defvar-keymap my-org-roam-ui)
(defvar-keymap my-dired-localleader-map)
#+end_src

*** which-key
#+begin_src emacs-lisp
;; (let ((keys '("\\`SPC p d\\'"
;;               "\\`SPC t i\\'")))
;;   (seq-remove (lambda (element)
;;                 (cl-some (lambda (key)
;;                            (string-equal key (caar element)))
;;                          keys))
;;               which-key-replacement-alist))
#+end_src

**** misc
#+begin_src emacs-lisp
(after! which-key
  (my-which-key-add-command-based-replacements
   'display-fill-column-indicator-mode "Fill-column indicator"
   'evil-collection-consult-mark       "Evil marks"))
#+end_src
**** dired
#+begin_src emacs-lisp
(after! which-key
  (my-which-key-add-command-based-replacements
   'my-dired-filter-group-mode "Dired Filter groups"
   'casual-dired-sort-by-tmenu "Options"
   'casual-dired-link-tmenu    "Symlink"
   'casual-dired-utils-tmenu   "Utils"))
#+end_src

***** dired-filter
#+begin_src emacs-lisp
(after! which-key
  (my-which-key-add-command-based-replacements
   'dired-unmark-all-files           "Unmark all files"
   'dired-change-marks               "Change marks char"
   'dired-filter-mark-by-extension   "Mark by extension"
   'dired-filter-mark-by-directory   "Mark directories"
   'dired-filter-mark-by-predicate   "Mark by predicate"
   'dired-filter-mark-by-file        "Mark files"
   'dired-filter-mark-by-garbage     "Mark garbage"
   'dired-filter-mark-by-dot-files   "Mark dotfiles"
   'dired-filter-mark-by-mode        "Mark by mode"
   'dired-filter-mark-by-name        "Mark by name"
   'dired-filter-mark-by-omit        "Mark omit"
   'dired-filter-mark-by-regexp      "Mark by regexp"
   'dired-filter-mark-by-symlink     "Mark symlinks"
   'dired-filter-mark-by-executable  "Mark executables"
   'dired-filter-mark-by-git-ignored "Mark git-ignored"
   'dired-filter-mark-by-saved-filters "Mark by saved filters"))
#+end_src

**** denote
#+begin_src emacs-lisp
(after! which-key
  (my-which-key-add-command-based-replacements
   'denote-rename-file-using-front-matter "Rename via front-matter"))
#+end_src
**** org-mode
#+begin_src emacs-lisp
(with-eval-after-load 'which-key
  (my-which-key-add-command-based-replacements
   'org-attach              "org-attach"
   'org-ctrl-c-ctrl-c       "Org C-c C-c"
   'org-capture             "Org capture"
   'org-capture-goto-target "Org capture destination"
   'org-todo-list           "Todo list"
   '+org/remove-link        "Remove link"
   'org-store-link          "Store org link"
   'org-set-property        "Property")
  (my-which-key-add-command-based-replacements
   'consult-org-heading "Headings")
  (my-which-key-add-command-based-replacements
   '+default/find-in-notes   "Find file in notes"
   '+default/browse-notes    "Browse notes"
   '+default/search-notes-for-symbol-at-point "Search notes for selection"
   '+org/export-to-clipboard "Org export to clipboard"
   '+org/export-to-clipboard-as-rich-text "Org export to clipboard as RTF")
  (my-which-key-add-command-based-replacements
   'org-cliplink                      "Web title link"
   'org-web-tools-insert-link-for-url "Web title link")
  (my-which-key-add-command-based-replacements
   'my-org-roam-create-untracked-node   "Create untracked-node"
   'org-roam-node-random                "Open random node"
   'org-roam-node-find                  "Find org-roam node"
   'org-roam-ref-find                   "Find ref"
   'org-roam-extract-subtree            "Org-roam extract subtree"
   'org-roam-alias-add                  "Add roam alias"
   'org-roam-alias-remove               "Remove roam alias"
   'org-roam-node-insert                "link to Roam node"
   'org-roam-tag-add                    "Add tag"
   'org-roam-tag-remove                 "Remove tag"
   'my-org-roam-node-insert-immediate   "create Roam node & insert link"
   'org-roam-dailies-goto-previous-note "Goto previous note"
   'org-roam-dailies-goto-date          "Goto date"
   'org-roam-dailies-capture-date       "Capture date"
   'org-roam-dailies-goto-next-note     "Goto next note"
   'org-roam-dailies-goto-tomorrow      "Goto tomorrow"
   'org-roam-dailies-capture-tomorrow   "Capture tomorrow"
   'org-roam-dailies-capture-today      "Capture today"
   'org-roam-dailies-goto-today         "Goto today"
   'org-roam-dailies-capture-today      "Capture today"
   'org-roam-dailies-goto-yesterday     "Goto yesterday"
   'org-roam-dailies-capture-yesterday  "Capture yesterday"
   'org-roam-dailies-find-directory     "Find directory"))
#+end_src

**** projectile
#+begin_src emacs-lisp
(after! which-key
  (my-which-key-add-command-based-replacements
   '+default/browse-project                    "Browse project"
   'doom/browse-in-other-project               "Browse other project"
   'projectile-run-shell-command-in-root       "Run cmd in project root"
   'projectile-run-async-shell-command-in-root "Async cmd in project root"
   'projectile-add-known-project               "Add new project"
   'projectile-switch-to-buffer                "Switch to project buffer"
   'projectile-compile-project                 "Compile in project"
   'projectile-repeat-last-command             "Repeat last command"
   'projectile-remove-known-project            "Remove known project"
   '+default/discover-projects                 "Discover projects in folder"
   'projectile-edit-dir-locals                 "Edit project .dir-locals"
   'projectile-find-file                       "Find file in project"
   'projectile-find-dir                        "Find dir in project"
   'doom/find-file-in-other-project            "Find file in other project"
   'projectile-configure-project               "Configure project"
   'projectile-invalidate-cache                "Invalidate project cache"
   'projectile-kill-buffers                    "Kill project buffers"
   'find-sibling-file                          "Find sibling file"
   'projectile-switch-project                  "Switch project"
   'projectile-recentf                         "Find recent project files"
   'projectile-run-project                     "Run project"
   'projectile-save-project-buffers            "Save project files"
   'projectile-test-project                    "Test project"
   'doom/open-project-scratch-buffer           "Pop up scratch buffer"
   'doom/switch-to-project-scratch-buffer      "Switch to scratch buffer"))
#+end_src

**** tabs & windows
#+begin_src emacs-lisp
(after! which-key
  (my-which-key-add-command-based-replacements
   'winner-undo                    "Back in window history"
   'winner-redo                    "Forward in window history")
  (my-which-key-add-command-based-replacements
   'tab-bar-history-back           "Back in window history"
   'tab-bar-history-forward        "Forward in window history"
   'tab-bar-move-tab               "Move tab forward"
   'tab-bar-move-tab-backward      "Move tab backward")
  (my-which-key-add-command-based-replacements
   'my-evil-kill-buffer-and-window "Kill buffer and window"))
#+end_src

*** general keybindings

: (general-def :states 'motion
:   "M-u" 'universal-argument
:   "SPC" '(:keymap leader-map)
:   ";"   '(:keymap semicolon-leader-map)
:   "<backspace>"     'execute-extended-command ; emacs M-x

Doom bind it's leader keys in ~override-mode-map~. I don't like it.
#+begin_src emacs-lisp
(remove-hook 'doom-after-init-hook #'doom-init-leader-keys-h)
#+end_src

#+begin_src emacs-lisp
(setq! doom-localleader-key ","
       doom-localleader-alt-key "M-,")

(map! :m "<backspace>" #'execute-extended-command ; emacs M-x
      ;; :nvm "SPC" doom-leader-map
      :nvm "SPC"   #'doom/leader ; doom-leader-map
      :ei  "M-SPC" #'doom/leader ; doom-leader-map in insert state
      :m   "C-s"   #'evil-write
      :m   "-"     #'dired-jump
      :m   "/"     #'+default/search-buffer
      :m   "?"     #'evil-ex-search-forward
      :m   "zn"    #'my-narrow-to-active-region
      :m   "zw"    #'widen
      :m   "z SPC" #'cycle-spacing
      :m   "z;"    #'comment-dwim
      :m   "z."    #'set-fill-prefix
      :n   "ga"    #'describe-char
      :mnv "gh"    #'my/evil-first-non-blank
      :mnv "gl"    #'my/evil-end-of-line)

(map! (:leader "n" (cons "notes" my-notes-map))
      ;; <leader> t
      (:map doom-leader-toggle-map
            "c" #'display-fill-column-indicator-mode)
      ;; <leader> s
      (:map doom-leader-search-map
            "m" #'evil-collection-consult-mark
            "r" nil ;; consult-mark
            ))
#+end_src

*** usinversal argument
#+begin_src emacs-lisp
(map! :m "M-u" #'universal-argument
      :map universal-argument-map
      "M-u" #'universal-argument-more)
#+end_src

*** evil
#+begin_src emacs-lisp
(map!
 :n "gq" #'evil-fill
 :ri "C-<backspace>" #'evil-delete-backward-word
 :ri "C-ц" #'evil-delete-backward-word)
#+end_src

*** dired
#+begin_src emacs-lisp
(map! :leader
      "-" #'dired)

(map! :after dired
      :map dired-mode-map
      :n "^" #'evil-first-non-blank)

(map! :after dired
      :map dired-mode-map
      :n "C-w <return>" #'dired-find-file-other-window
      :nv "C-<return>" #'my/dired-xdg-open
      :n "SPC tf" #'my-dired-filter-group-mode
      :n "SPC tg" #'my-dired-filter-group-mode
      :n "l"  #'dired-find-file
      :n "h"  #'dired-up-directory
      :n "<"  #'dired-prev-marked-file
      :n ">"  #'dired-next-marked-file
      :n ")"  #'my-dired-toggle-omit-mode
      :n "o"  #'my/dired-xdg-open
      :n "K"  #'dired-do-kill-lines
      :n "s"  #'dired-sort-toggle-or-edit
      :n "S"  #'casual-dired-sort-by-tmenu
      :n "n"  #'dired-narrow-fuzzy
      :n "N"  #'dired-narrow-regexp
      :n "zn" #'dired-narrow-fuzzy
      :n "zN" #'dired-narrow-regexp
      :n "w"  #'dired-display-file
      :n "c" (cons "change/compress"
                   (define-keymap
                     "d" #'my-dired-add-denote-id
                     "g" #'dired-do-chgrp
                     "o" #'dired-do-chown
                     "m" #'dired-do-chmod
                     "t" #'dired-do-touch
                     "c" #'dired-do-compress-to
                     "z" #'dired-do-compress))
      ;; :n "o" #'dired-sort-toggle-or-edit
      ;; :n "O" #'casual-dired-sort-by-tmenu
      :n "g" (progn
               (defvar-keymap my-dired-g-map
                 :full t
                 :suppress t
                 "$" #'dired-hide-subdir
                 "A" #'dired-show-file-type
                 "o" #'dired-view-file
                 "O" #'dired-find-file-other-window
                 "q" #'dired-do-find-regexp-and-replace
                 "r" #'dired-do-redisplay
                 "u" #'dired-undo

                 "l" #'dired-subtree-down
                 "h" #'dired-subtree-up
                 "k" #'dired-prev-dirline
                 "j" #'dired-next-dirline

                 "a" #'describe-char
                 "g" #'evil-goto-first-line
                 "v" #'evil-visual-restore
                 "*" #'evil-ex-search-unbounded-word-forward
                 "#" #'evil-ex-search-unbounded-word-backward
                 "<home>" #'evil-first-non-blank-of-visual-line
                 "<end>"  #'evil-end-of-visual-line)
               my-dired-g-map)
      :n "r" (cons "regexp"
                   (define-keymap
                     "d" #'dired-flag-files-regexp
                     "q" #'dired-mark-files-containing-regexp
                     "m" #'dired-mark-files-regexp
                     "r" #'dired-do-rename-regexp
                     "c" #'dired-do-copy-regexp
                     "h" #'dired-do-hardlink-regexp
                     "s" #'dired-do-symlink-regexp
                     "g" #'dired-flag-garbage-files))
      ;; :n "s"  (define-keymap
      ;;           "s" #'dired-do-symlink
      ;;           "r" #'dired-do-relsymlink
      ;;           "S" #'dired-do-relsymlink
      ;;           "h" #'dired-do-hardlink)
      :n "p"  #'dired-copy-paste-do-paste
      :n "y"  (cons "yank"
                    (define-keymap
                      "y" #'dired-copy-paste-do-copy
                      "x" #'dired-copy-paste-do-cut
                      "c" #'dired-do-copy
                      "n" #'my-dired-copy-file-name
                      "p" #'my-dired-copy-file-path))
      :nv "u" #'dired-unmark
      :nv "U" #'dired-unmark-all-marks
      :nv "," (define-keymap
                :keymap my-dired-localleader-map
                "a" #'org-attach-dired-to-subtree
                "d" #'my-dired-add-denote-id
                "r" (cons "rename"
                          (define-keymap
                            "d" #'my-dired-add-denote-id
                            "r" #'my-dired-rename-files-from-reddit))
                "f" (cons "filter" dired-filter-map)
                "l" #'casual-dired-link-tmenu
                "s" #'casual-dired-sort-by-tmenu
                "u" #'casual-dired-utils-tmenu))

;; dired-subtree
(with-eval-after-load 'dired
  (define-keymap
    :keymap dired-mode-map
    "<tab>"     #'dired-subtree-toggle
    "<backtab>" #'dired-subtree-cycle
    "z j" #'dired-subtree-down
    "z k" #'dired-subtree-up
    "z u" #'dired-subtree-up
    "C-j" #'dired-subtree-next-sibling
    "C-k" #'dired-subtree-previous-sibling))

;; dired-filter
(with-eval-after-load 'dired-filter
  (define-keymap
    :keymap my-dired-localleader-map
    "m" (cons "marks"
              (define-keymap
                :parent dired-filter-mark-map
                "c" #'dired-change-marks
                "u" #'dired-unmark-all-files
                "i" #'dired-filter-mark-by-git-ignored)))
  ;; Keibindings that are active when point hovers on group title.
  (define-keymap
    :keymap dired-filter-group-mode-map
    ;; "<tab>" #'dired-filter-group-toggle-header
    ;; "<backtab>" nil
    "C-j" #'dired-filter-group-forward-drawer
    "C-k" #'dired-filter-group-backward-drawer
    "z j"  #'dired-filter-group-forward-drawer
    "z k"  #'dired-filter-group-backward-drawer))

(map! :after wdired
      :map wdired-mode-map
      ;; :n "("   #'dired-hide-details-mode
      :n "RET" #'my-wdired-toggle-bit
      ;; :n "ESC" #'wdired-exit
      )

;; (map! :after dirvish
;;       :map dirvish-mode-map
;;       :n  "q"   #'quit-window
;;       :n  "zh"  #'dirvish-subtree-up
;;       :n  "zl"  #'dirvish-subtree-down
;;       :ng "zn"  #'dirvish-narrow
;;       :n  "gz"  #'dirvish-history-jump)
#+end_src
*** image-dired
#+begin_src emacs-lisp
(map! :map image-dired-thumbnail-mode-map
      :n "RET" #'image-dired-display-this
      :n "o" #'image-dired-thumbnail-display-external
      :n "m" #'image-dired-mark-thumb-original-file
      :n "u" #'image-dired-unmark-thumb-original-file
      :n "d" #'image-dired-flag-thumb-original-file
      :n "K" #'image-dired-delete-char
      :n "n" #'image-dired-display-next
      :n "p" #'image-dired-display-previous)

;; (map! :map image-dired-image-mode-map)
#+end_src

*** embark
#+begin_src emacs-lisp
(map! "M-;" #'embark-dwim)
#+end_src

*** help system
#+begin_src emacs-lisp
(map! :after doom
      :map help-map
      "s" #'helpful-symbol
      "M" #'describe-keymap

      ;; Rebild `+lookup/online' from capital `O' to `o'
      "o" #'+lookup/online
      "O" nil)
#+end_src

*** ibuffer
#+begin_src emacs-lisp
(map! :after ibuffer
      :map ibuffer-mode-map
      :n "TAB" #'ibuffer-toggle-filter-group
      :n "A"   #'ibuffer-do-view-horizontally
      :n "zk"  #'ibuffer-backward-filter-group
      :n "zj"  #'ibuffer-forward-filter-group
      :n "zu"  #'ibuffer-backward-filter-group)
#+end_src

*** info mode
#+begin_src emacs-lisp
;; (general-def :keymaps 'Info-mode-map :states 'normal
;;   "SPC" (define-keymap :parent 'leader-map
;;           "1" 'Info-top-node
;;           "t" 'Info-toc
;;           "h" 'Info-history
;;           "d" 'Info-directory)

(map! :after info
      :map Info-mode-map
      :n "C-j" #'Info-next
      :n "C-k" #'Info-prev
      :n "<C-i>" #'Info-history-forward

      :n "zj" #'Info-forward-node
      :n "zk" #'Info-backward-node
      :n "zu" #'Info-up
      :n "zd" #'Info-directory
      :n "gd" #'Info-directory

      :n "J" #'Info-forward-node
      :n "K" #'Info-backward-node

      :n "M" #'Info-menu)

;; (after! info
;;   (evil-define-key 'normal Info-mode-map (kbd "<C-i>") #'Info-history-forward))
#+end_src

Remove all =g <n>= keybindings from evil-collection, to prevent them from
population of ~which-key~ menu.
#+begin_src emacs-lisp
(after! info
  (dolist (i (number-sequence 1 9))
    (keymap-unset Info-mode-map (format "<normal-state> g %s" i) :remove)))
#+end_src

*** lisp structural editing
#+begin_src emacs-lisp
(map! :map evil-cleverparens-mode-map
      :mnv ")"   'my/evil-cp-up-sexp
      :mnv "["    nil  ; unbind `evil-cp-previous-opening' in favor of unimpaired
      :mnv "]"    nil  ; unbind `evil-cp-next-closing' in favor of unimpaired
      :mnv "C-(" 'evil-cp-backward-up-sexp
      :mnv "C-)" 'my/evil-cp-up-sexp
      :mnv "M-w" 'my/evil-cp-forward-sexp
      :mnv "M-b" 'my/evil-cp-backward-sexp
      :mnv "L"   'my/evil-cp-forward-sexp
      :mnv "H"   'my/evil-cp-backward-sexp
      :mnv ",w"  'evil-cp-wrap-next-round
      :mnv ",W"  'evil-cp-wrap-previous-round
      :mnv ",b"  'evil-cp-wrap-next-square
      :mnv ",B"  'evil-cp-wrap-previous-square
      :mnv ",f"  'evil-cp-wrap-next-curly
      :mnv ",F"  'evil-cp-wrap-previous-curly)
#+end_src

*** lsp-mode
#+begin_src emacs-lisp
;; (map! :leader
;;       (:prefix "t"
;;        :desc "Truncate lines" "t" #'toggle-truncate-lines
;;        :desc "Inlay hints"    "i" #'lsp-inlay-hints-mode
;;        :desc "Code-lens"      "l" #'lsp-lens-mode
;;        :desc "Line numbers"   "L" #'doom/toggle-line-numbers))

;; (map! :leader
;;         (:prefix "t"
;;          :desc "Truncate lines" "t" #'toggle-truncate-lines
;;          :desc "Line numbers"   "L" #'doom/toggle-line-numbers))

(map! :after lsp-mode
      :map lsp-mode-map
      ;; :n "SPC t" (defvar-keymap my/lsp-mode-toggle-map
      ;;              :parent doom-leader-toggle-map
      ;;              "i" '("Inlay hints" . lsp-inlay-hints-mode)
      ;;              "L" '("Code-lens" . lsp-lens-mode))
      ;; :nv "K" #'my/lsp-doc
      :in "C-<return>" #'lsp-signature-activate
      :in "C-RET" #'lsp-signature-activate
      :n  "C-h ." #'lsp-describe-thing-at-point)

(map! :after (ccls cc-mode)
      :map (c-mode-map c++-mode-map)
      :n "C-h" nil
      :n "C-j" nil
      :n "C-k" nil
      :n "C-l" nil)

(map! :after (ccls cc-mode)
      :map (c-mode-map c++-mode-map)
      :in "C-<return>" #'lsp-signature-activate
      :in "C-RET" #'lsp-signature-activate
      :n  "C-h ." #'lsp-describe-thing-at-point)

;; (map! :after (ccls cc-mode)
;;       :map (c-mode-map c++-mode-map)
;;       :n "C-h" nil
;;       :n "C-j" nil
;;       :n "C-k" nil
;;       :n "C-l" nil)
#+end_src

*** magit
#+begin_src emacs-lisp
(map! :after magit
      (:map magit-mode-map
       :mnv "SPC" #'doom/leader
       :n   "C-j" #'magit-section-forward-sibling
       :n   "C-k" #'magit-section-backward-sibling
       :n   "zj"  #'magit-section-forward
       :n   "zk"  #'magit-section-backward
       :n   "Z"   #'magit-stash)

      (:map magit-section-mode-map
       :n "C-j" #'magit-section-forward-sibling
       :n "C-k" #'magit-section-backward-sibling
       :n "zj" #'magit-section-forward
       :n "zk" #'magit-section-backward
       :n "zu" #'magit-section-up
       :n "gh" #'evil-first-non-blank
       :n "gl" #'evil-end-of-line
       :n "zt" #'evil-scroll-line-to-top
       :n "zz" #'evil-scroll-line-to-center
       :n "zb" #'evil-scroll-line-to-bottom
       :n "za" #'magit-section-toggle
       :n "zo" #'magit-section-toggle
       :n "zc" #'magit-section-toggle
       :n "<tab>" #'magit-section-cycle
       :n "C-<tab>" #'tab-next
       :n "C-<backtab>" #'tab-previous
       ;; :n "g <tab>" #'tab-new
       ;; :n "g <backtab>" #'tab-bar-move-window-to-tab
       )

      (:map magit-status-mode-map
       :n "gt" #'tab-next
       :n "gT" #'tab-previous)

      (:map with-editor-mode-map
       :n "ZZ" 'with-editor-finish
       :n "Q" 'with-editor-cancel
       :n "ZQ" 'with-editor-cancel)

      (:map magit-diff-mode-map
       :mnv "SPC" #'doom/leader))

;; (map! :map with-editor-mode-map
;;       :n "ZZ" #'with-editor-finish
;;       :n "Q"  #'with-editor-cancel
;;       :n "ZQ" #'with-editor-cancel)
#+end_src

*** minibuffer (vertico)
#+begin_src emacs-lisp
(map! :leader
      :desc "Select vertico session" "\"" #'vertico-repeat-select)

(map! :after vertico
      :map vertico-map
      :gin "<tab>"      #'next-history-element
      :gin "<backtab>"  #'previous-history-element
      :gin "M-<return>" #'vertico-exit-input
      :gin "C-<return>" #'+vertico/embark-preview
      :in  "C-<backspace>" #'vertico-directory-delete-word
      :inv "C-f" #'vertico-scroll-up
      :inv "C-b" #'vertico-scroll-down
      :nv  "n"   #'vertico-next-group
      :nv  "N"   #'vertico-previous-group
      ;; :inv "C-n" #'vertico-next-group
      ;; :inv "C-p" #'vertico-previous-group
      :nv  "C-p" #'consult-yank-from-kill-ring
      :nv  "C-d" #'consult-dir
      ;; :nv  "C-j" #'consult-dir-jump-file
      ;; "C-h" (cmds! (eq 'file (vertico--metadata-get 'category))
      ;;              #'vertico-directory-up)
      ;; :in  "C-l" #'vertico-insert
      :in  "C-l" (cmds! (eq 'file (vertico--metadata-get 'category))
                        #'+vertico/enter-or-preview
                        #'vertico-insert)
      :nv "gg" #'vertico-first
      :nv "G" #'vertico-last
      :nv "q" #'minibuffer-keyboard-quit
      ;; Russian
      :i "C-о" #'vertico-next
      :i "C-л" #'vertico-previous)

(map! :map minibuffer-local-map
      :mi "M-a" #'marginalia-cycle)
#+end_src

*** outline

Doom disables outline keybindings from evil-collection, so I copy ones I use
here.

#+begin_src emacs-lisp
(map! :map outline-mode-map
      ;; :n "<tab>" #'outline-cycle

      ;; folding
      ;; Evil default keys:
      ;; zO: Show recursively for current branch only.
      ;; za: Toggle first level like outline-toggle-children.
      ;; zc: Hide complete subtree.
      ;; zm: Show only root notes.
      ;; zo: Show current node like "za".
      ;; zr: Show everything.
      ;; :n "zo" #'outline-hide-other
      ;; :n "zb" #'outline-show-branches
      :n "zB" #'outline-hide-body ; Hide all bodies, Emacs has "C-c C-t".
      :n "ze" #'outline-show-entry ; Show current body only, not subtree, reverse of outline-hide-entry, Emacs has "C-c C-e".
      :n "zE" #'outline-hide-entry ; Hide current body, Emacs has "C-c C-c".
      :n "zj" #'outline-next-visible-heading
      :n "zk" #'outline-previous-visible-heading
      ;; :n "zl" #'outline-hide-leaves
      :n "zL" #'outline-hide-leaves ; Like `outline-hide-body' but for current subtree only, Emacs has "C-c C-l".
      :n "zK" #'outline-show-branches ; Show all children recursively but no body.  Emacs has "C-c C-k".
      ;; :n "zk" #'outline-show-children ; Direct children only unlike `outline-show-branches', and no content unlike `outline-show-entry' and `outline-toggle-children'.  Emacs has "C-c TAB".
      :n "zu" #'outline-up-heading
      :n "zm" #'my-outline-hide-sublevels

      :n "zp" #'outline-hide-other ; Hide all nodes and bodies except current body.  Emacs has "C-c C-o".
      ;; outline-hide-sublevels ; q ; Is it any different from `outline-hide-body'?
      ;; outline-hide-subtree ; Emacs has "C-c C-d", Evil has default "zc".
      ;; outline-show-subtree ; Emacs has "C-c C-s", Evil has default "zO".

      ;; motion
      ;; :m "[[" #'outline-previous-visible-heading
      ;; :m "]]" #'outline-next-visible-heading
      :m "C-k" #'outline-backward-same-level
      :m "C-j" #'outline-forward-same-level
      ;; :m "gk" #'outline-backward-same-level
      ;; :m "gj" #'outline-forward-same-level

      ;; :m "M-h" #'outline-promote ; Org-mode has "M-<left>", Evil-org has "M-h"
      ;; :m "M-j" #'outline-move-subtree-down ; Org-mode has "M-<down>", Evil-org has "M-j"
      ;; :m "M-k" #'outline-move-subtree-up ; Org-mode has "M-<up>", Evil-org has "M-k"
      ;; :m "M-l" #'outline-demote ; Org-mode has "M-<right>", Evil-org has "M-l"

      ;; :m "M-<return>" #'outline-insert-heading ; Org-mode has "M-<return>"
      )

(defun my-outline-hide-sublevels (levels)
  (interactive "p")
  (outline-hide-sublevels (or levels 1)))
#+end_src

*** org-mode
#+begin_src emacs-lisp
;; "C-c C-S-l"  #'+org/remove-link
;; "C-c C-i"    #'org-toggle-inline-images
;; ;; textmate-esque newline insertion
;; "S-RET"      #'+org/shift-return
;; "C-RET"      #'+org/insert-item-below
;; "C-S-RET"    #'+org/insert-item-above
;; "C-M-RET"    #'org-insert-subheading
;; [C-return]   #'+org/insert-item-below
;; [C-S-return] #'+org/insert-item-above
;; [C-M-return] #'org-insert-subheading
;; (:when (featurep :system 'macos)
;;  [s-return]   #'+org/insert-item-below
;;  [s-S-return] #'+org/insert-item-above
;;  [s-M-return] #'org-insert-subheading)
;; ;; Org-aware C-a/C-e
;; [remap doom/backward-to-bol-or-indent]          #'org-beginning-of-line
;; [remap doom/forward-to-last-non-comment-or-eol] #'org-end-of-line
;; :localleader
;; "A" #'org-archive-subtree-default
;; "I" #'org-id-get-create
;; "t" #'org-todo
;; "T" #'org-todo-list
;; "x" #'org-toggle-checkbox
;; (:prefix ("c" . "clock")
;;  "c" #'org-clock-cancel
;;  "d" #'org-clock-mark-default-task
;;  "e" #'org-clock-modify-effort-estimate
;;  "E" #'org-set-effort
;;  "g" #'org-clock-goto
;;  "G" (cmd! (org-clock-goto 'select))
;;  "l" #'+org/toggle-last-clock
;;  "i" #'org-clock-in
;;  "I" #'org-clock-in-last
;;  "o" #'org-clock-out
;;  "r" #'org-resolve-clocks
;;  "R" #'org-clock-report
;;  "t" #'org-evaluate-time-range
;;  "=" #'org-clock-timestamps-up
;;  "-" #'org-clock-timestamps-down)
;; (:prefix ("s" . "tree/subtree")
;;  "a" #'org-toggle-archive-tag
;;  "b" #'org-tree-to-indirect-buffer
;;  "c" #'org-clone-subtree-with-time-shift
;;  "d" #'org-cut-subtree
;;  "h" #'org-promote-subtree
;;  "j" #'org-move-subtree-down
;;  "k" #'org-move-subtree-up
;;  "l" #'org-demote-subtree
;;  "n" #'org-narrow-to-subtree
;;  "r" #'org-refile
;;  "s" #'org-sparse-tree
;;  "A" #'org-archive-subtree-default
;;  "N" #'widen
;;  "S" #'org-sort)

(after! org
  (defvar-keymap my-org-mode-leader-map
    :parent doom-leader-map
    "SPC" #'org-ctrl-c-ctrl-c
    "a"   #'org-attach
    "d"   (cons "denote"
                (define-keymap
                  "r" #'denote-rename-file-using-front-matter))
    ;; "i l" #'org-roam-node-insert
    "i n" #'org-roam-node-insert
    "i d" '("Org drawer" . #'org-insert-drawer)
    "l"   (cons "links"
                (define-keymap
                  "a" #'org-insert-all-links
                  "c" #'org-web-tools-insert-link-for-url ;; or #'org-cliplink
                  "l" #'org-insert-link
                  "L" #'org-web-tools-insert-link-for-url
                  "d" #'+org/remove-link
                  "i" #'org-roam-node-insert
                  "I" #'my-org-roam-node-insert-immediate
                  "n" #'org-roam-node-insert
                  "N" #'my-org-roam-node-insert-immediate
                  "r" #'org-roam-node-insert
                  "R" #'my-org-roam-node-insert-immediate
                  "s" #'org-insert-last-stored-link
                  "w" #'org-web-tools-read-url-as-org))
    ;; "n"   (cons "notes" my-notes-map)
    "n b" #'org-roam-buffer-toggle
    "n B" #'org-roam-buffer-display-dedicated
    "n i" #'org-id-get-create
    "n I" #'my-org-roam-create-untracked-node
    "n e" #'org-roam-extract-subtree
    "s i" #'consult-org-heading
    "t i" #'org-toggle-inline-images
    "t o" #'org-sliced-images-mode
    ;; "u"   (cons "org-roam ui" my-org-roam-ui)
    "v"   (cons "org-babel" org-babel-map)) ;; deft

  (defvar-keymap my-org-mode-localleader-map
    "#" #'org-update-statistics-cookies
    "*" #'org-ctrl-c-star
    "-" #'org-ctrl-c-minus
    "," #'org-insert-structure-template
    "." #'org-goto
    "/" #'consult-org-agenda
    "@" #'org-cite-insert
    "a" #'org-roam-alias-add
    "A" #'org-roam-alias-remove
    "b" #'org-roam-buffer-toggle
    "B" #'org-roam-buffer-display-dedicated
    "e" #'org-export-dispatch
    "f" #'org-footnote-action
    "h" #'org-toggle-heading
    "l" #'consult-org-roam-backlinks
    "L" #'consult-org-roam-backlinks-recursive
    "p" #'org-set-property
    "q" #'org-roam-tag-add ;; #'org-set-tags-command
    "Q" #'org-set-tags-command ;; #'org-roam-tag-remove
    ;; "s" #'org-roam-db-sync ;; with C-u force the rebuild of the cache
    "S" #'org-sparse-tree
    "u" (cons "org-roam ui" my-org-roam-ui)
    "v" (cons "org-babel" org-babel-map)
    "y" #'yank-media
    "d" (cons "date/deadline"
              (define-keymap
                "d" #'org-deadline
                "s" #'org-schedule
                "t" #'org-time-stamp
                "T" #'org-time-stamp-inactive))
    "t" (cons "tables"
              (define-keymap
                "-" #'org-table-insert-hline
                "a" #'org-table-align
                "b" #'org-table-blank-field
                "c" #'org-table-create-or-convert-from-region
                "e" #'org-table-edit-field
                "f" #'org-table-edit-formulas
                "h" #'org-table-field-info
                "s" #'org-table-sort-lines
                "r" #'org-table-recalculate
                "R" #'org-table-recalculate-buffer-tables
                "d" (cons "delete"
                          (define-keymap
                            "c" #'org-table-delete-column
                            "r" #'org-table-kill-row))
                "i" (cons "insert"
                          (define-keymap
                            "c" #'org-table-insert-column
                            "h" #'org-table-insert-hline
                            "r" #'org-table-insert-row
                            "H" #'org-table-hline-and-move))
                "t" (cons "toggle"
                          (define-keymap
                            "f" #'org-table-toggle-formula-debugger
                            "o" #'org-table-toggle-coordinate-overlays))
                "p" #'org-plot/gnuplot)))

  (map! :map org-babel-map
        ;; "k" #'org-babel-remove-result-one-or-many
        "K" #'+org/remove-result-blocks)

  (map! :map org-mode-map
        ;; Recently, a [tab] keybind in `outline-mode-cycle-map' has begun
        ;; overriding org's [tab] keybind in GUI Emacs. This is needed to undo
        ;; that, and should probably be PRed to org.
        :mni "<tab>" #'org-cycle

        :nv doom-leader-key      my-org-mode-leader-map
        :nv doom-localleader-key my-org-mode-localleader-map
        :n  "; h" #'+org/goto-visible

        :nv "C-<up>"   #'org-backward-heading-same-level
        :nv "C-<down>" #'org-forward-heading-same-level
        :nv "^"  #'evil-org-beginning-of-line
        :nv "$"  #'evil-org-end-of-line
        ;; :nv "H"  #'org-up-element
        ;; :nv "L"  #'org-down-element
        :nv "gn" #'org-next-link
        :nv "gN" #'org-previous-link
        :nv "gx" #'org-open-at-point
        :nv "zC" #'outline-hide-entry
        :nv "zn" #'org-narrow-to-subtree
        :nv "z'" #'org-edit-special
        :nv "z," #'org-insert-structure-template
        :nv "z/" #'org-sparse-tree
        :nv "z;" #'org-toggle-comment
        :nv "z|" #'org-table-create-or-convert-from-region
        ;; :nv "M-q" 'unpackaged/flex-fill-paragraph
        ))

(map! :after evil-org
      :map evil-org-mode-map
      :mnv "gh"    #'evil-org-beginning-of-line
      :mnv "gl"    #'my/evil-end-of-line
      :mnv "gj"    nil ; #'org-forward-element
      :mnv "gk"    nil ; #'org-backward-element
      :n   "[ RET" #'+org/insert-item-above
      :n   "] RET" #'+org/insert-item-below
      :n   "zn"    #'org-narrow-to-subtree
      :i   "C-t"   #'evil-shift-right-line
      :i   "C-d"   #'evil-shift-left-line
      :i   "C-h"   help-map)

;; (map! :after (evil-org org-src)
;;       :map org-src-mode-map
;;       [remap evil-save-and-close]          #'org-edit-src-exit
;;       [remap evil-save-modified-and-close] #'org-edit-src-exit
;;       [remap evil-quit]                    #'org-edit-src-abort)
#+end_src

**** Undone some Doom bindings
[[file:~/.emacs.d/modules/lang/org/config.el::;; sensible vim-esque folding keybinds][Doom org keybindings]]

#+begin_src emacs-lisp
(map! :map evil-org-mode-map
      :after evil-org
      :n "za" nil ;; #'+org/toggle-fold
      :n "zA" nil ;; #'org-shifttab
      :n "zc" nil ;; #'+org/close-fold
      :n "zC" nil ;; #'outline-hide-subtree
      :n "zm" nil ;; #'+org/hide-next-fold-level
      :n "zM" nil ;; #'+org/close-all-folds
      :n "zn" nil ;; #'org-tree-to-indirect-buffer
      :n "zo" nil ;; #'+org/open-fold
      :n "zO" nil ;; #'outline-show-subtree
      :n "zr" nil ;; #'+org/show-next-fold-level
      :n "zR" nil ;; #'+org/open-all-folds
      :n "zi" nil ;; #'org-toggle-inline-images
      )
#+end_src

*** org-roam
#+begin_src emacs-lisp
(map! :map my-org-roam-ui
      "u" #'org-roam-ui-open
      ;; "u" #'org-roam-ui-mode
      "f" #'org-roam-ui-follow-mode
      "l" #'org-roam-ui-node-local)

(map! :map my-notes-map
      "*" #'+default/search-notes-for-symbol-at-point
      "a" #'org-agenda
      "A" #'org-roam-node-random
      "f" #'+default/find-in-notes
      "F" #'+default/browse-notes
      "g" #'org-roam-graph
      "n" #'org-roam-node-find
      "N" #'org-roam-ref-find
      "c" #'org-capture
      "C" #'org-capture-goto-target
      "d" (cons "dailies"
                (define-keymap
                  "-" #'org-roam-dailies-find-directory
                  "f" #'org-roam-dailies-goto-next-note
                  "b" #'org-roam-dailies-goto-previous-note
                  "]" #'org-roam-dailies-goto-next-note
                  "[" #'org-roam-dailies-goto-previous-note
                  "d" #'org-roam-dailies-goto-date
                  "D" #'org-roam-dailies-capture-date
                  "n" #'org-roam-dailies-capture-today
                  "t" #'org-roam-dailies-goto-today
                  "T" #'org-roam-dailies-capture-today
                  "y" #'org-roam-dailies-goto-yesterday
                  "Y" #'org-roam-dailies-capture-yesterday
                  "m" #'org-roam-dailies-goto-tomorrow
                  "M" #'org-roam-dailies-capture-tomorrow))
      "j" (cons "journal"
                (define-keymap
                  "j" #'org-journal-new-entry
                  "J" #'org-journal-new-scheduled-entry
                  "s" #'org-journal-search-forever))
      "l" #'org-store-link
      "t" #'org-todo-list
      "u" (cons "org-roam ui" my-org-roam-ui)
      "y" #'+org/export-to-clipboard
      "Y" #'+org/export-to-clipboard-as-rich-text
      "/" #'consult-org-roam-search)

;; Bindings in org-roam buffer with backlinks.
(map! :map org-roam-mode-map
      :after org-roam
      (:localleader "b" #'org-roam-buffer-toggle)
      :n "SPC nb" #'org-roam-buffer-toggle
      :nv "q"   #'quit-window
      :nv "C-j" #'magit-section-forward-sibling
      :nv "C-k" #'magit-section-backward-sibling
      :nv "zj"  #'magit-section-forward
      :nv "zk"  #'magit-section-backward)
#+end_src
*** latex
#+begin_src emacs-lisp
;; (setq org-pretty-entities-include-sub-superscripts nil)

(add-hook 'cdlatex-mode-hook
          (lambda ()
            (when (eq major-mode 'org-mode)
              ;; (make-local-variable 'org-pretty-entities-include-sub-superscripts)
              ;; (setq org-pretty-entities-include-sub-superscripts nil)
              (setq-local org-pretty-entities-include-sub-superscripts nil))))

;; (map! :map org-cdlatex-mode-map
;;       "^" nil  ; #'org-cdlatex-underscore-caret
;;       "_" nil) ; #'org-cdlatex-underscore-caret
#+end_src

*** project / projectile
#+begin_src emacs-lisp
(defvar-keymap my-project-prefix-map
  :parent doom-leader-map
  "-" #'projectile-dired
  "." #'+default/browse-project
  ">" #'doom/browse-in-other-project
  "!" #'projectile-run-shell-command-in-root
  "&" #'projectile-run-async-shell-command-in-root
  "a" #'projectile-add-known-project
  "b" #'projectile-switch-to-buffer
  "c" #'projectile-compile-project
  "C" #'projectile-repeat-last-command
  "d" #'projectile-find-dir
  ;; "d" #'projectile-remove-known-project
  "D" #'+default/discover-projects
  "e" #'projectile-edit-dir-locals
  "f" #'projectile-find-file
  "F" #'doom/find-file-in-other-project
  "g" #'projectile-configure-project
  "i" #'projectile-invalidate-cache
  "k" #'projectile-kill-buffers
  "o" #'find-sibling-file
  "p" #'projectile-switch-project
  "r" #'projectile-recentf
  "R" #'projectile-run-project
  "s" #'projectile-save-project-buffers
  "t" #'projectile-test-project
  "x" #'doom/open-project-scratch-buffer
  "X" #'doom/switch-to-project-scratch-buffer)

(map! :leader "p" (cons "project" my-project-prefix-map))
#+end_src

*** tabs & windows (tab-bar, popper)
#+begin_src emacs-lisp
(map! :n "C-<tab>"     #'tab-next
      :n "C-<backtab>" #'tab-previous
      :n "C-`" #'popper-cycle
      ;; C-w prefix
      (:map evil-window-map
            "n"   #'other-window-prefix
            "C-n" #'other-tab-prefix
            "d"   #'my-toggle-window-dedication
            "p"   #'popper-toggle
            "P"   #'popper-toggle-type
            "q"   #'my-evil-kill-buffer-and-window
            "C-q" #'my-evil-kill-buffer-and-window)
      ;; Tabs
      (:map evil-window-map
            "<tab>" #'my-tab-new  ; tab-new
            ;; "C-<tab>" #'tab-window-detach
            "C-<tab>" #'other-tab-prefix
            "t" (cons "tab-bar"
                      (progn
                        (defvar-keymap my-tab-prefix-map
                          "RET" #'tab-switch
                          "]" #'tab-next
                          "[" #'tab-previous
                          ">" #'tab-bar-move-tab
                          "<" #'tab-bar-move-tab-backward
                          "-" #'dired-other-tab
                          "c" #'tab-close
                          "C" #'tab-close-other
                          "d" #'tab-duplicate
                          "F" #'tab-detach
                          "g" #'tab-group
                          "n" #'other-tab-prefix
                          "r" #'tab-rename
                          "t" #'my-tab-new ; tab-new
                          "u" #'tab-undo)
                        my-tab-prefix-map))))

(map! :map messages-buffer-mode-map
      :n "q" #'quit-window)
#+end_src

**** special-mode
~special-mode~ is a basic major mode for buffers containing text that is produced
specially by Emacs, rather than directly from a file.

#+begin_src emacs-lisp
(map! :map special-mode-map
      :n "q" #'my-evil-kill-buffer-and-window)
#+end_src

*** COMMENT workspace
#+begin_src emacs-lisp
;; (after! persp-mode
;;   (define-key! persp-mode-map
;;                [remap delete-window] nil
;;                [remap evil-window-delete] nil))

(map! :after persp-mode
      :map pers-mode-map
      [remap delete-window] nil
      [remap evil-window-delete] nil)
#+end_src

** Meow
#+begin_src emacs-lisp
(require 'meow)
#+end_src
