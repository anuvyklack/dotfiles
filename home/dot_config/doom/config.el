;;; $DOOMDIR/config.el -*- lexical-binding: t; no-byte-compile: t -*-
;;;
;;; Commentary:
;;; This file was automatically generated by `org-babel-tangle'.
;;; Do not change this file.  Main config is located in ~/.config/emacs/README.org
;;;
;;; Code:

;; https://stackoverflow.com/questions/24356401/how-to-append-multiple-elements-to-a-list-in-emacs-lisp
(defun my/add-to-list (list elements &optional append)
  "Add ELEMENTS to the front of the LIST.

If APPEND is non-nil add ELEMENTS to the end of the LIST.
This function change the value of the LIST symbol.

LIST sould be a symbol.
ELEMENTS could be either a list or a single element."
  (unless (consp elements)
    (setq elements (list elements)))
  (set list (if append
                (append (symbol-value list) elements)
              (append elements (symbol-value list)))))

(defun my/remove-from-list (list elements)
  "Remove ELEMENTS from the LIST.

LIST should be a symbol.
ELEMENTS could be either a list or a single element."
  (unless (consp elements)
    (setq elements (list elements)))
  (dolist (element elements)
    (set list (remove element (symbol-value list)))))

(defun my/set-face-attribute (face-specs)
  (unless (listp (car face-specs))
    (setq face-specs (list face-specs)))
  (dolist (s face-specs)
    (-let [(face . spec) s]
      (apply #'set-face-attribute face nil spec))))

(defun my-concat (strings separator)
  "Concatenate STRINGS using SEPARATOR"
  (mapconcat #'identity strings separator))

(require 'dash)
(add-hook 'after-init-hook 'global-dash-fontify-mode)
(with-eval-after-load 'info-look
  (dash-register-info-lookup))

(setq user-full-name "Yuriy Artemyev"
      user-mail-address "anuvyklack@gmail.com")

(setq! what-cursor-show-names t)

(setq! use-short-answers t)

(global-auto-revert-mode)

(setq! comment-empty-lines t)

(setq confirm-kill-emacs nil)

(after! helpful
  (global-set-key [remap describe-symbol] #'helpful-symbol))

(map! :after embark
      :map embark-symbol-map
      "h" #'helpful-symbol)

;; (add-to-list 'warning-suppress-types '(obsolet))

(setq byte-compile-warnings nil)

;; (setq use-default-font-for-symbols nil)

(setq doom-font (font-spec :family "Inconsolata LGC" :size 12.5))

(set-fontset-font t '(?\xf0001 . ?\xf1af0) "Symbols Nerd Font Mono" nil 'prepend)

;; (set-fontset-font t ?\xe876 "Material Design Icons" nil 'prepend)
;; (set-fontset-font t ?Ó°∂ "Material Design Icons" nil 'prepend)
;; (set-fontset-font t ?Ó°∂ "Material Design Icons Desktop" nil 'prepend)

(set-fontset-font t '(?\x1fb00 . ?\x1fbca) "LegacyComputing" nil 'prepend)
(set-fontset-font t '(?üØ∞ . ?üØπ) "LegacyComputing" nil 'prepend)

;; (set-fontset-font t 'latin "Noto Sans")
;; (set-fontset-font t '(?\xea60 . ?\xec11) "codicon" nil 'prepend)

;; (set-fontset-font t '(?Ó©† . ?Ó∞ë) "codicon")

;; (let ((fontset (face-attribute 'default :fontset)))
;;   (set-fontset-font fontset '(?\xea60 . ?\xec11) "codicon" nil 'append))

;; (set-fontset-font (frame-parameter nil 'font)
;;                   '(?\xea60 . ?\xec11)
;;                   (font-spec :family "codicon"
;;                              :weight nil
;;                              :size nil)
;;                   nil
;;                   'prepend)

(setq-default line-spacing 1)

(setq-default truncate-lines t)

(setq! +word-wrap-fill-style 'soft)

(setq! visual-fill-column-enable-sensible-window-split t)

;; (pushnew! +word-wrap-text-modes 'fundamental-mode)

(require 'ef-themes)
(setq ef-themes-mixed-fonts t
      ef-themes-variable-pitch-ui t)

;; (setq ef-themes-to-toggle '(ef-summer ef-winter))

(custom-theme-set-faces! 'ef-light
  '(help-key-binding :foreground "DarkBlue" :background "grey96"
    :box (:line-width (-1 . -1) :color "grey80")
    :inherit fixed-pitch)
  '(line-number :background "#f5f5f5" :inherit fixed-pitch)
  '(line-number-current-line :background "#dddddd" :weight bold :inherit line-number)
  '(fringe :background "#f3f3f3"))

(setq ef-themes-common-palette-overrides
      '((cursor black)))

(with-eval-after-load 'org
  (custom-theme-set-faces! 'ef-light
    '(org-verbatim :foreground "#4250ef" :background "#f5f5f5")
    '(org-code     :foreground "#cf25aa" :background "#f5f5f5")))

(with-eval-after-load 'org
  (custom-theme-set-faces! 'ef-light
    '(org-list-dt :foreground "black" :inherit bold)))

(with-eval-after-load 'org
  (custom-theme-set-faces! 'ef-light
    '(org-level-1 :foreground "#375cd8" :weight normal :height 1.09)
    '(org-level-2 :foreground "#cf25aa" :weight normal :height 1.09)
    '(org-level-3 :foreground "#1f77bb" :weight normal :height 1.09)
    '(org-level-4 :foreground "#b65050" :weight normal :height 1.09)
    '(org-level-5 :foreground "#6052cf" :weight normal :height 1.09)))

;; (with-eval-after-load 'org
;;   (let ((font
;;          '(:family "ITC Avant Garde Gothic W1G" :weight medium)
;;          ;; '(:family "Basic Commercial LT" :weight normal)
;;          ))
;;     (custom-theme-set-faces! 'ef-light
;;      `(org-level-1 :foreground "#375cd8" :height 1.09 ,@font)
;;      `(org-level-2 :foreground "#cf25aa" :height 1.09 ,@font)
;;      `(org-level-3 :foreground "#1f77bb" :height 1.09 ,@font)
;;      `(org-level-4 :foreground "#b65050" :height 1.09 ,@font)
;;      `(org-level-5 :foreground "#6052cf" :height 1.09 ,@font))))

;; (with-eval-after-load 'org
;;   (my/set-face-attribute
;;    `((org-level-1 :foreground "#375cd8" :weight normal :height 1.08
;;                   :box (:line-width 4 :color ,(face-background 'default)))
;;      (org-level-2 :foreground "#cf25aa" :weight normal :height 1.08
;;                   :box (:line-width 4 :color ,(face-background 'default)))
;;      (org-level-3 :foreground "#1f77bb" :weight normal :height 1.08
;;                   :box (:line-width 4 :color ,(face-background 'default)))
;;      (org-level-4 :foreground "#b65050" :weight normal :height 1.08
;;                   :box (:line-width 4 :color ,(face-background 'default)))
;;      (org-level-5 :foreground "#6052cf" :weight normal :height 1.08
;;                   :box (:line-width 4 :color ,(face-background 'default))))))

(after! org
  (setq org-todo-keyword-faces
        '(("SOMEDAY"    . (:foreground "#6e6e6e"))
          ;; ("TODO"       . (:foreground "#cf7200"))
          ;; ("NEXT"       . (:foreground "#de0000"))
          ("INPROGRESS" . (:foreground "#0076c8"))
          ("WAITING"    . (:foreground "#cf7200"))
          ;; ("DONE"       . (:foreground "#598d3f"))
          ("CANCELLED"  . (:foreground "#63735b"))
          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
          ("Û∞íÖ" . (:foreground "#7b7b7b"))
          ;; ("Û∞ø¶" . (:foreground "#7b7b7b"))
          ;; ("Û∞îå" . (:foreground "#7b7b7b"))
          ;; ("Û∞Ñ±" . (:foreground ""))
          ;; ("Û±óù" . (:foreground ""))
          ;; ("Û∞°ñ" . (:foreground ""))
          ;; ("Û∞§å" . (:foreground ""))
          ;; ("Û±Öä" . (:foreground ""))
          ("Û∞îü" . (:foreground "#0076c8"))
          ;; ("Û∞Ñµ" . (:foreground ""))
          ("Û∞Öò" . (:foreground "#6e6e6e"))
          ("Û±àé" . (:foreground "#6e6e6e")))))

(setq org-priority-faces
      '((?A :foreground "red"     :weight bold)
        (?B :foreground "orange"  :weight bold)
        (?C :foreground "#7CB342" :weight bold)
        (?D :foreground "#2196F3" :weight bold)
        ;; (?D :foreground "#AB47BC" :weight bold)
        ))

(with-eval-after-load 'avy
  (custom-theme-set-faces! 'ef-light
    '(avy-background-face :foreground "#7e6f8e" :background unspecified)
    '(avy-lead-face       :foreground "grey5"   :background "#ffe9b0" :weight bold)
    ;; '(avy-lead-face-0     :background "#ffced7" :weight normal)
    '(avy-lead-face-0     :background "#ffe2e7" :weight normal)
    '(avy-lead-face-1     :foreground "black"   :background "#ffd5ff" :weight normal)
    '(avy-lead-face-2     :background "#c1ffc4")))

;; (with-eval-after-load 'avy
;;   (custom-theme-set-faces! 'ef-light
;;    '(avy-lead-face   :foreground "red"   :background unspecified :weight bold)
;;    '(avy-lead-face-0 :foreground "brown" :background unspecified :weight normal)))

(with-eval-after-load 'eglot
  (custom-theme-set-faces! 'ef-light
    '(eglot-highlight-symbol-face :background "grey98"
                                  :box (:line-width (-1 . -1) :color "grey75")
                                  :inherit unspecified)))

;; (with-eval-after-load 'dired
;;   (ef-themes-with-colors
;;     (my/set-face-attribute
;;      `((dired-symlink :foreground ,link-alt :inherit nil)))))

(with-eval-after-load 'dired
  (ef-themes-with-colors
    (custom-theme-set-faces! 'ef-light
      `(dired-symlink :foreground ,link-alt :inherit nil))))

(with-eval-after-load 'dired-filter
  (ef-themes-with-colors
    (my/set-face-attribute
     `((dired-filter-group-header :background ,bg-blue-subtle :weight bold
                                  :extend t
                                  :inherit nil)))))

(custom-theme-set-faces! 'ef-light
 '(lsp-face-highlight-textual :background "grey98"
                              :box (:line-width (-1 . -1) :color "grey75")
                              :inherit unspecified)
 '(lsp-face-highlight-read    :background "#f6ffff"
                              :box (:line-width (-1 . -1) :color "SkyBlue")
                              :inherit unspecified)
 '(lsp-face-highlight-write   :background "snow"
                              :box (:line-width (-1 . -1) :color "PaleVioletRed1")
                              :inherit unspecified)
 '(lsp-inlay-hint-face        :height 0.8 :inherit shadow)
 '(lsp-signature-posframe     :foreground "black" :background "white")
 '(lsp-ui-sideline-global     :foreground "DeepSkyBlue3"))

(after! lsp-ui
  (setq! lsp-ui-doc-max-height 17
         ;; lsp-ui-doc-delay 0.2
         lsp-ui-doc-border "black"))

(custom-theme-set-faces! 'ef-light
  '(lsp-ui-doc-background :background "white"))

(custom-theme-set-faces! 'ef-light
  '(flycheck-error-list-highlight :background "grey96"))

(custom-set-faces!
 '(flycheck-posframe-face :background "grey96"
                          ;; :box (:line-width (-1 . -1) :color "grey75")
                          :inherit unspecified)
 '(flycheck-posframe-error-face :background "misty rose"
                                ;; :box (:line-width (-1 . -1) :color "grey75")
                                :inherit unspecified))

;; (load-theme 'ef-light :no-confirm)
(setq doom-theme 'ef-light)

(setq! display-line-numbers-type t
       ;; display-line-numbers-width 4
       display-line-numbers-grow-only t
       display-line-numbers-width-start t)

;; (add-hook 'prog-mode-hook 'display-line-numbers-mode)

(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)

(remove-hook 'doom-first-buffer-hook #'global-hl-line-mode)

(setq! scroll-margin 0
       auto-window-vscroll nil
       scroll-error-top-bottom nil)

(setq! mouse-wheel-tilt-scroll t
       mouse-wheel-progressive-speed nil)

(setq! scroll-conservatively 101)

(defun with-default-scroll-settings (fun)
  (eval `(define-advice ,fun
             (:around (orig-fun &rest args)
                      scroll-conservatively)
           (-let (((scroll-conservatively) (get 'scroll-conservatively 'standard-value)))
             (apply orig-fun args)))))

(mapcar #'with-default-scroll-settings '(dired-do-find-regexp-and-replace
                                         projectile-replace
                                         projectile-replace-regexp))

(setq jit-lock-stealth-time 1.25 ; Calculate fonts when idle for 1.25 seconds
      jit-lock-stealth-nice 0.2  ; Seconds between font locking
      jit-lock-chunk-size 4096)

(setq jit-lock-defer-time 0)
(with-eval-after-load 'evil
  (add-hook 'evil-insert-state-entry-hook
            (lambda () (setq jit-lock-defer-time 0.25))
            nil t)
  (add-hook 'evil-insert-state-exit-hook
            (lambda () (setq jit-lock-defer-time 0))
            nil t))

(use-package! pixel-scroll
  :hook (after-init . pixel-scroll-precision-mode)
  :custom
  ;; (pixel-scroll-precision-use-momentum nil)
  (pixel-scroll-precision-interpolate-page t)
  (pixel-scroll-precision-interpolate-mice t)
  (pixel-scroll-precision-large-scroll-height 20.0)
  (pixel-scroll-precision-interpolation-total-time 0.3)
  :config
  (let ((num-of-lines 4))
    (evil-define-command my/pixel-scroll-interpolate-line-up (count)
      :repeat nil
      :keep-visual t
      (interactive "p")
      (let* ((pixel-scroll-precision-interpolation-total-time 0.08)
             (pixels-per-line (/ (window-text-height nil t)
                                 (window-text-height)))
             (delta (* pixels-per-line
                       num-of-lines
                       count)))
        (pixel-scroll-precision-interpolate delta nil 1)))
  
    (evil-define-command my/pixel-scroll-interpolate-line-down (count)
      :repeat nil
      :keep-visual t
      (interactive "p")
      (let* ((pixel-scroll-precision-interpolation-total-time 0.08)
             (pixels-per-line (/ (window-text-height nil t)
                                 (window-text-height)))
             (delta (- (* pixels-per-line
                          num-of-lines
                          count))))
        (pixel-scroll-precision-interpolate delta nil 1))))
  
  (evil-define-command my/pixel-scroll-interpolate-half-page-up ()
    "Interpolate a scroll upwards by half page."
    :repeat nil
    :keep-visual t
    (interactive)
    (pixel-scroll-precision-interpolate (/ (window-text-height nil t) 2)
                                        nil 1))
  
  (evil-define-command my/pixel-scroll-interpolate-half-page-down ()
    "Interpolate a scroll downwards by half page."
    :repeat nil
    :keep-visual t
    (interactive)
    (pixel-scroll-precision-interpolate (- (/ (window-text-height nil t) 2))
                                        nil 1))
  
  (evil-add-command-properties #'pixel-scroll-interpolate-down :repeat nil :keep-visual t)
  (evil-add-command-properties #'pixel-scroll-interpolate-up   :repeat nil :keep-visual t)
  
  (general-def
    [remap evil-scroll-down]      #'my/pixel-scroll-interpolate-half-page-down ; C-d
    [remap evil-scroll-up]        #'my/pixel-scroll-interpolate-half-page-up   ; C-u
    [remap evil-scroll-page-down] #'pixel-scroll-interpolate-down              ; C-f
    [remap evil-scroll-page-up]   #'pixel-scroll-interpolate-up                ; C-b
    [remap evil-scroll-line-down] #'my/pixel-scroll-interpolate-line-down      ; C-e
    [remap evil-scroll-line-up]   #'my/pixel-scroll-interpolate-line-up)       ; C-y
  
  ;; (general-def :keymaps 'help-mode-map :states 'normal
  ;;   "C-f" 'pixel-scroll-interpolate-down
  ;;   "C-b" 'pixel-scroll-interpolate-up)
  (add-hook 'help-mode-hook
            (defun my/help-mode-remove-evil-scroll-keymaps ()
              (map! :map help-mode-map
                    :n "C-f" nil
                    :n "C-b" nil)
              (remove-hook 'help-mode-hook 'my/help-mode-remove-evil-scroll-keymaps)))
  )

(use-package! easy-escape
  :custom
  (easy-escape-character ?‚ßµ) ;; REVERSE SOLIDUS OPERATOR
  ;; (easy-escape-character ?‚ßπ) ;; BIG REVERSE SOLIDUS
  ;; (easy-escape-character ?Ôºº) ;; FULLWIDTH REVERSE SOLIDUS
  :hook (emacs-lisp-mode . easy-escape-minor-mode))

(setq! prettify-symbols-unprettify-at-point t)

(use-package! colorful-mode
  :hook (emacs-lisp-mode conf-space-mode fish-mode conf-toml-mode toml-ts-mode))

(setq switch-to-buffer-in-dedicated-window 'pop)

(setq switch-to-buffer-obey-display-actions t)

;; (setq window-sides-slots '(2 2 2 2))

(setq window-combination-resize t
      even-window-sizes 'height-only
      window-sides-vertical nil
      fit-window-to-buffer-horizontally t
      ;; window-resize-pixelwise t
      fit-frame-to-buffer t)

;; (add-to-list 'display-buffer-alist
;;              `(,(rx string-start
;;                     (or "*Apropos*" "*Messages*" "*Help*" "*helpful" "*info*" "*Man" "*Summary*")
;;                     (0+ not-newline))
;;                (display-buffer-reuse-mode-window display-buffer-pop-up-window)
;;                (mode apropos-mode help-mode helpful-mode Info-mode Man-mode messages-buffer-mode)
;;                (window-width . 80)
;;                ;; (window-parameters
;;                ;;  (no-delete-other-windows . t))
;;                (body-function . select-window)))

;; (add-to-list 'display-buffer-alist
;;              `(,(rx string-start
;;                     (or "*Apropos*" "*Messages*" "*Help*" "*helpful" "*info*" "*Man" "*Summary*")
;;                     (0+ not-newline))
;;                (display-buffer-reuse-mode-window
;;                 display-buffer-in-side-window)
;;                (mode apropos-mode help-mode helpful-mode Info-mode Man-mode)
;;                (side . right)
;;                (slot . 0)
;;                (window-width . 80)
;;                (window-parameters
;;                 (no-delete-other-windows . t))))

;; (add-to-list 'display-buffer-alist
;;              '("\\*sly-mrepl"
;;                (display-buffer-at-bottom)
;;                (window-height . 12)))
;; (add-to-list 'display-buffer-alist
;;              '("\\*Calendar*"
;;                (display-buffer-at-bottom)))
;; (add-to-list 'display-buffer-alist
;;              '("\\*shell:"
;;                (display-buffer-below-selected)
;;                (window-height . 12)))
;; (add-to-list 'display-buffer-alist
;;              '("\\magit:"
;;                (display-buffer-same-window)))
;; (add-to-list 'display-buffer-alist
;;              '("\\*Man"
;;                (display-buffer-same-window)))

;; (add-to-list 'display-buffer-alist
;;              '("\\*TeX errors\\*"
;;                (display-buffer-in-side-window)
;;                (side . bottom)
;;                (slot . 3)
;;                (window-height . shrink-window-if-larger-than-buffer)
;;                (dedicated . t)))

;; (add-to-list 'display-buffer-alist
;;              '("\\*TeX Help\\*"
;;                (display-buffer-in-side-window)
;;                (side . bottom)
;;                (slot . 4)
;;                (window-height . shrink-window-if-larger-than-buffer)
;;                (dedicated . t)))

;; (setq display-buffer-base-action
;;       '(nil . ((body-function . select-window))))

(defvar my-grep-modes-list '(occur-mode
                             grep-mode
                             xref--xref-buffer-mode
                             ivy-occur-grep-mode
                             ivy-occur-mode
                             locate-mode
                             flymake-diagnostics-buffer-mode
                             rg-mode)
  "List of major-modes used in occur-type buffers")

;; This does not work at buffer creation since the major-mode for
;; REPLs is not yet set when `display-buffer' is called, but is
;; useful afterwards
(defvar my-repl-modes-list '(matlab-shell-mode
                             ;; sly-mrepl-mode
                             eshell-mode
                             geiser-repl-mode
                             shell-mode
                             eat-mode
                             vterm-mode
                             inferior-python-mode
                             cider-repl-mode
                             fennel-repl-mode
                             jupyter-repl-mode
                             inferior-ess-julia-mode)
  "List of major-modes used in REPL buffers")

(defvar my-repl-names-list
  '("^\\*\\(?:.*?-\\)\\{0,1\\}e*shell[^z-a]*\\(?:\\*\\|<[[:digit:]]+>\\)$"
    ;; "^\\*sly-mrepl .*\\*$"
    "^\\*sly-description\\*"
    "\\*.*REPL.*\\*"
    "\\*MATLAB\\*"
    "\\*Python\\*"
    "^\\*jupyter-repl.*?\\(\\*\\|<[[:digit:]]>\\)$"
    "\\*Inferior .*\\*$"
    "^\\*julia.*\\*$"
    "^\\*cider-repl.*\\*$"
    "\\*ielm\\*"
    "\\*edebug\\*")
  "List of buffer names used in REPL buffers")

(defvar my-help-modes-list '(helpful-mode
                             help-mode
                             aporopos-mode
                             pydoc-mode
                             TeX-special-mode)
  "List of major-modes used in documentation buffers")

(defvar my-man-modes-list '(Man-mode woman-mode)
  "List of major-modes used in Man-type buffers")

(defvar my-compilation-modes-list '(compilation-mode
                                    edebug-eval-mode)
  "List of major-modes used for compilation buffers")

;; my-man-modes-list
;; '(Custom-mode)
;; '("^\\*Warnings\\*$"
;;   ("^\\*Compile-Log\\*$" . hide)
;;   "^\\*Backtrace\\*"
;;   "^\\*evil-registers\\*"
;;   "^\\*Apropos"
;;   "^Calc:"
;;   "^\\*TeX errors\\*"
;;   "^\\*ielm\\*"
;;   "^\\*TeX Help\\*"
;;   "^\\*ChatGPT\\*"
;;   "^\\*gptel-ask\\*"
;;   "\\*Shell Command Output\\*"
;;   ("\\*Async Shell Command\\*" . hide)
;;   ("\\*Detached Shell Command\\*" . hide)
;;   "\\*Completions\\*"
;;   ;; "\\*scratch.*\\*$"
(setq popper-reference-buffers (append my-help-modes-list
                                       my-grep-modes-list
                                       my-compilation-modes-list
                                       my-repl-modes-list
                                       my-repl-names-list
                                       '(;; "^\\*Messages\\*$"
                                         messages-buffer-mode)
                                       '("^\\*Embark Export:"
                                         "^\\*Embark Collect:")
                                       '("^\\*doom eval\\*"
                                         "[Oo]utput\\*"
                                         "^\\*eldoc\\*")))

(add-to-list 'display-buffer-alist
             `(;; (or (derived-mode . helpful-mode)
               ;;     (derived-mode . help-mode)
               ;;     (derived-mode . apropos-mode))
               (or ,@(let (result)
                       (dolist (mode my-help-modes-list result)
                         (push `(derived-mode . ,mode)
                               result))))
               (display-buffer-reuse-mode-window display-buffer-pop-up-window)
               (mode helpful-mode
                     help-mode
                     apropos-mode)
               (window-width . 80)
               (body-function . select-window)))

(add-to-list 'display-buffer-alist
             '((or "^\\*Embark Export:"
                   "^\\*Embark Collect:")
               nil
               (body-function . select-window)))

(add-to-list 'display-buffer-alist
             `((or ,@my-repl-names-list)
               nil
               (body-function . select-window)))

;; (add-to-list 'display-buffer-alist
;;              `(,(rx string-start
;;                     (or "*Apropos*" "*Messages*" "*Help*" "*helpful" "*info*" "*Man" "*Summary*")
;;                     (0+ not-newline))
;;                (display-buffer-reuse-mode-window display-buffer-pop-up-window)
;;                (mode apropos-mode help-mode helpful-mode Info-mode Man-mode messages-buffer-mode)
;;                (window-width . 80)
;;                ;; (window-parameters
;;                ;;  (no-delete-other-windows . t))
;;                (body-function . select-window)))

(use-package! popper
  :custom
  ;; have popper respect display-buffer-alist rules
  (popper-display-control nil)
  ;; enable actions in echo area (k to kill buffer)
  (popper-echo-dispatch-actions t)
  (popper-echo-dispatch-keys '("0" "1" "2" "3" "4" "5" "6" "7" "8" "9"))
  (popper-group-function #'popper-group-by-projectile) ; projectile projects
  ;; (popper-group-function #'popper-group-by-project) ; project.el projects

  :config
  (popper-mode +1)
  (popper-echo-mode +1)                 ; For echo area hints
  ;; (popper-tab-line-mode +1)
  )

(tab-bar-mode)

;; :options
;; tab-bar-format-menu-bar
;; tab-bar-format-tabs
;; tab-bar-format-tabs-groups
;; tab-bar-separator
;; tab-bar-format-add-tab
;; tab-bar-format-align-right
;; tab-bar-format-global
(setq! tab-bar-format '(tab-bar-format-history
                        tab-bar-format-tabs-groups
                        tab-bar-separator
                        tab-bar-format-add-tab))

(setq! tab-bar-tab-hints nil ; Show tab numbers.
       tab-bar-close-button-show nil
       ;; tab-bar-new-tab-choice "*dashboard*" ; Buffer to show in new tab.
       )

;; (setq! tab-bar-show 1) ;; Hide tab bar if only 1 tabs open.
(setq! tab-bar-show t) ;; Always show tab bar.

(defun my-tab-new (arg)
  "Execute `tab-new` normally, or `tab-window-detach` with a universal argument."
  (interactive "P")
  (if arg
      (tab-window-detach)
    (tab-new)))

(after! winner
  (winner-mode -1)
  (tab-bar-history-mode +1)
  (setq tab-bar-history-limit 20)
  (global-set-key [remap winner-undo] #'tab-bar-history-back)
  (global-set-key [remap winner-redo] #'tab-bar-history-forward))

;; (setq evil-respect-visual-line-mode t)

(after! evil
  (setq! evil-collection-setup-minibuffer t
         ;; evil-search-module 'isearch
         evil-want-fine-undo t
         ;; evil-undo-system 'undo-redo
         ;; evil-overriding-maps nil
         evil-move-beyond-eol t
         evil-shift-round t
         evil-want-C-i-jump t
         evil-vsplit-window-right t
         evil-split-window-below t)

  ;; Bind `:ls' command to `bufler' /`ibuffer' instead of `list-buffers'.
  (evil-ex-define-cmd "ls" 'ibuffer))

(defvar +word-wrap-mode nil)

(defun my/evil-end-of-line ()
  "Move the cursor to the end of the current line."
  (interactive)
  (if +word-wrap-mode
      (evil-end-of-visual-line)
    (evil-end-of-line)))

(defun my/evil-first-non-blank ()
  "Move the cursor to the end of the current line."
  (interactive)
  (if +word-wrap-mode
      (evil-first-non-blank-of-visual-line)
    (evil-first-non-blank)))

(after! evil
  (define-advice +evil/insert-newline-above (:after (count) fix-unimpaired)
    (when (bolp) (forward-char count))))

;; (after! evil
;;   (defun my/insert-newline-above (count)
;;     "Insert COUNT blank line(s) above current line. Does not change modes."
;;     (interactive "p")
;;     (save-excursion (dotimes (_ count) (evil-insert-newline-above)))
;;     (when (bolp) (forward-char count)))
;;
;;   (global-set-key [remap +evil/insert-newline-above] #'my/insert-newline-above))

(defvar +evil-collection-disabled-list
  '(anaconda-mode
    buff-menu
    calc
    comint
    company
    custom
    eldoc
    elisp-mode
    ert
    free-keys
    helm
    help
    image
    indent
    kotlin-mode
    lispy
    ;; outline
    replace
    shortdoc
    simple
    slime
    tab-bar)
  "A list of `evil-collection' modules to ignore.")

(with-eval-after-load 'evil
  (define-advice forward-evil-paragraph
      (:around (orig-fun &rest args) use-default-paragraph-definiton-in-org)
    (if (derived-mode-p 'org-mode)
        (let ((paragraph-start    (default-value 'paragraph-start))
              (paragraph-separate (default-value 'paragraph-separate)))
          (apply orig-fun args))
      (apply orig-fun args))))

;; Should be set before `evil-snipe' loaded
(setq! evil-snipe-override-evil-repeat-keys nil)

(after! evil-snipe
  (setq! evil-snipe-scope 'whole-visible
         evil-snipe-smart-case t)
  ;; (evil-snipe-mode)
  ;; (evil-snipe-override-mode)
  (pushnew! evil-snipe-disabled-modes #'telega-root-mode
                                      #'pdf-view-mode
                                      ;; #'helpful-mode
                                      #'magit-mode ;; #'magit-status-mode
                                      #'nov-mode)
  (map! :map evil-snipe-parent-transient-map
        "n" #'evil-snipe-repeat
        "N" #'evil-snipe-repeat-reverse
        "<tab>"     #'evil-snipe-repeat
        "<backtab>" #'evil-snipe-repeat-reverse
        ;; Integration with evil-easymotion
        ";" (cmd! (require 'evil-easymotion)
                  (call-interactively
                   (evilem-create #'evil-snipe-repeat
                                  :bind ((evil-snipe-scope 'buffer)
                                         (evil-snipe-enable-highlight nil)
                                         (evil-snipe-enable-incremental-highlight nil))
                                  :post-hook #'evil-snipe--cleanup)))))

(after! evil-easymotion
  (require 'avy)
  (evil-define-avy-motion avy-goto-word-0-above exclusive)
  (evil-define-avy-motion avy-goto-word-0-below exclusive)
  (evilem-make-motion evilem-motion-forward-WORD-begin  #'evil-forward-WORD-begin)
  (evilem-make-motion evilem-motion-backward-WORD-begin #'evil-backward-WORD-begin)
  (evilem-make-motion evilem-motion-forward-word-end    #'evil-forward-word-end)
  (evilem-make-motion evilem-motion-forward-WORD-end    #'evil-forward-WORD-end)
  (map! :m ";" evilem-map
        (:map evilem-map
         :desc "word"          "w"  #'evil-avy-goto-word-0-below
         :desc "WORD"          "W"  #'evilem-motion-forward-WORD-begin
         :desc "backward word" "b"  #'evil-avy-goto-word-0-above
         :desc "backward WORD" "B"  #'evilem-motion-backward-WORD-begin
         :desc "word end"      "e"  #'evilem-motion-forward-word-end
         :desc "WORD end"      "E"  #'evilem-motion-forward-WORD-end
         ;; "ge" #'evilem-motion-backward-word-end
         ;; "gE" #'evilem-motion-backward-WORD-end
         ;; "j"  #'evilem-motion-next-visual-line
         ;; "k"  #'evilem-motion-previous-visual-line
         )))

(use-package! evil-goggles
  :hook (doom-first-input . evil-goggles-mode)
  :init
  ;; (setq evil-goggles-duration 0.100  ; default is 0.200
  ;;       evil-goggles-enable-delete nil
  ;;       evil-goggles-enable-change ni)
  (setq evil-goggles-pulse t) ; may be slow

  :config
  ;;; Add `evil-cleverparens' support
  (pushnew! evil-goggles--commands
            '(evil-cp-delete      :face evil-goggles-delete-face :switch t :advice evil-goggles--generic-blocking-advice)
            '(evil-cp-delete-line :face evil-goggles-delete-face :switch t :advice evil-goggles--delete-line-advice)
            '(evil-cp-yank        :face evil-goggles-yank-face   :switch t :advice evil-goggles--generic-async-advice)
            '(evil-cp-yank-line   :face evil-goggles-yank-face   :switch t :advice evil-goggles--generic-async-advice)
            '(evil-cp-change      :face evil-goggles-change-face :switch t :advice evil-goggles--generic-blocking-advice)
            '(evil-cp-change-line :face evil-goggles-change-face :switch t :advice evil-goggles--generic-blocking-advice))

  ;; From Doom `ui/ophints' module
  (pushnew! evil-goggles--commands
            '(evil-magit-yank-whole-line :face evil-goggles-yank-face :switch evil-goggles-enable-yank :advice evil-goggles--generic-async-advice)
            '(+evil:yank-unindented      :face evil-goggles-yank-face :switch evil-goggles-enable-yank :advice evil-goggles--generic-async-advice)
            '(+eval:region               :face evil-goggles-yank-face :switch evil-goggles-enable-yank :advice evil-goggles--generic-async-advice))

  ;; Use diff-mode's faces; deleted text will be highlighed with `diff-removed',
  ;; other faces such as `diff-added' will be used for other actions.
  (evil-goggles-use-diff-faces))

(after! evil-org
  (setq! evil-org-special-o/O '(table-row item)))

;; (evil-add-command-properties #'dired-find-file :jump t)
;; (evil-add-command-properties #'elisp-refs-visit-match :jump t)

;; (setq evil--jumps-buffer-targets "\\(\\*\\(\\new\\|scratch\\)\\*\\|\\*refs:.+\\)")

;; Allow opening new minibuffers from inside existing minibuffers.
(setq! enable-recursive-minibuffers t)
(minibuffer-depth-indicate-mode +1)

;; Show current key-sequence in minibuffer ala 'set showcmd' in vim. Any
;; feedback after typing is better UX than no feedback at all.
(setq! echo-keystrokes 0.02)

;; Hide commands in `M-x' menu which do not work in the current mode.
;; - Vertico commands are hidden in normal buffers.
;; - Corfu commands are hidden, since they are not supposed to be used via `M-x'.
(setq! read-extended-command-predicate #'command-completion-default-include-p)

(setq! read-file-name-completion-ignore-case t
       read-buffer-completion-ignore-case t
       completion-ignore-case t)

(after! vertico
  (setq! vertico-count 15 ; How many candidates to show
         vertico-scroll-margin 2
         vertico-cycle nil
         vertico-resize 'grow-only) ; Grow and shrink the Vertico minibuffer
  )

(after! consult
  (consult-customize
   consult-ripgrep consult-git-grep consult-grep
   ;; consult--grep
   ;; consult--read
   ;; consult-bookmark consult-recent-file
   ;; consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
   :preview-key '(:debounce 0.4 any)    ; or 'any
   )

  (consult-customize
   +default/search-project +default/search-other-project
   ;; +default/search-project-for-symbol-at-point
   ;; +default/search-cwd +default/search-other-cwd
   ;; +default/search-notes-for-symbol-at-point
   ;; +default/search-emacsd
   +vertico/jump-list
   :preview-key 'any)

  (consult-customize org-roam-node-find :preview-key "C-<return>"))

(setq! xref-show-definitions-function 'consult-xref
       xref-show-xrefs-function 'consult-xref)

;; (setq project-vc-extra-root-markers '(".projectile" ".project"))

(after! projectile
  (setq! projectile-project-search-path (list (file-truename "~"))))

(setq! eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)

(use-package! eldoc-box
  :autoload (eldoc-box--replace-en-space
             eldoc-box--prettify-markdown-separator
             eldoc-box--remove-linked-images
             eldoc-box--remove-noise-chars
             eldoc-box--fontify-html
             eldoc-box--condense-large-newline-gaps)
  :config
  (pushnew! eldoc-box-self-insert-command-list #'evil-force-normal-state)

  (define-advice eldoc-doc-buffer
      (:after (_) prettify-eldoc-buffer)
    (with-current-buffer eldoc--doc-buffer
      (setq-local fill-column 90)
      (+word-wrap-mode)
      ;; (eldoc-box--prettify-markdown-separator)
      (eldoc-box--replace-en-space)
      ;; (eldoc-box--remove-linked-images)
      ;; (eldoc-box--remove-noise-chars)
      ;; (eldoc-box--fontify-html)
      ;; (eldoc-box--condense-large-newline-gaps)
      )))

(add-hook! 'org-src-mode-hook
  (setq-local flycheck-disabled-checkers '(emacs-lisp emacs-lisp-checkdoc)))

(after! flycheck
  ;; https://www.masteringemacs.org/article/seamlessly-merge-multiple-documentation-sources-eldoc
  (defun my/flycheck-eldoc-function (callback &rest _ignored)
    "A member of `eldoc-documentation-functions', for flycheck."
    (when-let ((flycheck-errors (and flycheck-mode
                                     (flycheck-overlay-errors-at (point)))))
      (mapc (lambda (err)
              (funcall callback
                       (format "%s: %s"
                               (let ((level (flycheck-error-level err)))
                                 (pcase level
                                   ('info (propertize "I" 'face 'flycheck-error-list-info))
                                   ('error (propertize "E" 'face 'flycheck-error-list-error))
                                   ('warning (propertize "W" 'face 'flycheck-error-list-warning))
                                   (_ level)))
                               (flycheck-error-message err))
                       :thing (or (flycheck-error-id err)
                                  (flycheck-error-group err))
                       :face 'font-lock-doc-face))
            flycheck-errors)))

  (defun my/flycheck-prefer-eldoc ()
    (add-hook 'eldoc-documentation-functions #'my/flycheck-eldoc-function 90 t)
    (setq! flycheck-display-errors-function nil
           flycheck-help-echo-function nil))

  (add-hook 'flycheck-mode-hook #'my/flycheck-prefer-eldoc))

(after! lsp-mode
  (setq! lsp-lens-enable nil
         ;; lsp-ui-sideline-show-diagnostics nil
         lsp-enable-folding nil
         lsp-enable-text-document-color nil
         lsp-headerline-breadcrumb-enable t
         lsp-signature-render-documentation nil)

  (setq lsp-signature-function #'lsp-lv-message) ;; show signature in echo area
  ;; (setq! lsp-signature-function #'lsp-signature-posframe) ;; show signature in posframe

  (set-lookup-handlers! 'lsp-mode
    :definition #'+lsp-lookup-definition-handler
    :references #'+lsp-lookup-references-handler
    :documentation '(lsp-ui-doc-glance :async t) ;; default `lsp-describe-thing-at-point'
    :implementations '(lsp-find-implementation :async t)
    :type-definition #'lsp-find-type-definition))

;; (advice-add #'consult-xref :after #'evil-normal-state)

(defun my/lsp-doc ()
  "Open lsp doc in popup window. If called with `universal-argument' open in split."
  ;; (interactive "P")
  (interactive)
  (cond
   ((null current-prefix-arg)       (eldoc-box-help-at-point))
   ((equal current-prefix-arg '(4))
    ;; (call-interactively #'+lookup/documentation)
    (+lookup/documentation))))

;; (defun my/eldoc-settings-for-lsp-mode ()
;;   "Setup my eldoc setting for lsp-mode"
;;   (if lsp-managed-mode
;;       (progn
;;         (add-hook 'eldoc-documentation-functions #'my/flycheck-eldoc-function nil t)
;;         (add-hook 'eldoc-documentation-functions #'lsp-eldoc-function nil t))
;;     (progn
;;       (remove-hook 'eldoc-documentation-functions #'my/flycheck-eldoc-function t)
;;       (remove-hook 'eldoc-documentation-functions #'lsp-eldoc-function nil t))))
;; (add-hook 'lsp-managed-mode-hook #'my/eldoc-settings-for-lsp-mode)

;; (defun my-lsp--filter-servers-by-major-mode ()
;;   "Filter the available LSP servers to match the current major mode."
;;   (let ((current-mode major-mode)
;;         (available-clients (hash-table-keys lsp-clients)))
;;     ;; Filter the clients that support the current major mode
;;     (seq-filter
;;      (lambda (client)
;;        (let* ((client-info (gethash client lsp-clients))
;;               (supported-modes (plist-get client-info :major-modes)))
;;          (and supported-modes
;;               (memq current-mode supported-modes))))
;;      available-clients)))

;; (defun my-lsp ()
;;   "Custom wrapper around `lsp' that filters servers by major mode."
;;   (interactive)
;;   (let ((filtered-servers (my-lsp--filter-servers-by-major-mode)))
;;     ;; When `C-u M-x lsp` is used, `lsp` interactively prompts for servers
;;     ;; Set the `lsp-enabled-clients` to limit the servers for the prompt
;;     (if filtered-servers
;;         (let ((lsp-enabled-clients filtered-servers))
;;           (lsp))
;;       (message "No LSP servers available for current major mode: %s" major-mode))))

;; ;; Optionally override the original lsp command (remove this if you don't want to override)
;; (advice-add 'lsp :override #'my-lsp)

(defun lsp-booster--advice-json-parse (old-fn &rest args)
  "Try to parse bytecode instead of json."
  (or
   (when (equal (following-char) ?#)
     (let ((bytecode (read (current-buffer))))
       (when (byte-code-function-p bytecode)
         (funcall bytecode))))
   (apply old-fn args)))

(advice-add (if (progn (require 'json)
                       (fboundp 'json-parse-buffer))
                'json-parse-buffer
              'json-read)
            :around
            #'lsp-booster--advice-json-parse)

(defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
  "Prepend emacs-lsp-booster command to lsp CMD."
  (let ((orig-result (funcall old-fn cmd test?)))
    (if (and (not test?)                             ;; for check lsp-server-present?
             (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
             lsp-use-plists
             (not (functionp 'json-rpc-connection))  ;; native json-rpc
             (executable-find "emacs-lsp-booster"))
        (progn
          (when-let ((command-from-exec-path (executable-find (car orig-result))))  ;; resolve command from exec-path (in case not found in $PATH)
            (setcar orig-result command-from-exec-path))
          (message "Using emacs-lsp-booster for %s!" orig-result)
          (cons "emacs-lsp-booster" orig-result))
      orig-result)))

(advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)

(setq! xref-auto-jump-to-first-definition 'show)

(defun my-sly-last-sexp-a (command &rest args)
  "In normal-state or motion-state, last sexp ends at point."
  (if (or (evil-normal-state-p)
          (evil-motion-state-p))
      (save-excursion
        (when (and (eq (char-after) ?\) )
                   (not (eobp))
                   (not (eolp)))
          (forward-char))
        (apply command args))
    (apply command args)))

(defun my-sly-eval-print-last-expression-a (string)
  "Evaluate sexp before point; print value into the current buffer.

Evil version of `sly-eval-print-last-expression' that accounts for
`evil-move-beyond-eol'."
  (interactive (list (progn
                       (when (or (evil-normal-state-p)
                                 (evil-motion-state-p))
                         (when (and (eq (char-after) ?\))
                                    (not (eobp))
                                    (not (eolp))
                                    (forward-char)))
                         (sly-last-expression))))
               (insert "\n")
               (sly-eval-print string)))

(advice-add 'sly-eval-last-expression :around 'my-sly-last-sexp-a)
(advice-add 'sly-pprint-eval-last-expression :around 'my-sly-last-sexp-a)
(advice-add 'sly-mrepl-return :around 'my-sly-last-sexp-a)
(advice-add 'sly-eval-print-last-expression :override 'my-sly-eval-print-last-expression-a)

(use-package! aggressive-indent
  ;; :config
  ;; (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
  ;; (add-hook 'css-mode-hook #'aggressive-indent-mode)
  )

(after! avy
  (setq! avy-keys (number-sequence ?a ?z) ; Any lower-case letter a-z.
         avy-style 'at-full
         avy-all-windows nil))

(setq deft-directory "~/notes")

(setq! dired-listing-switches "-lAhF -v --group-directories-first")
;; (setq! dired-listing-switches "-l --human-readable --group-directories-first")

(setq! dired-dwim-target t
       dired-auto-revert-buffer #'dired-buffer-stale-p
       dired-kill-when-opening-new-dired-buffer t
       delete-by-moving-to-trash t
       dired-recursive-deletes 'always ;; 'top
       dired-recursive-copies 'always
       dired-no-confirm t
       ;; Ask whether destination dirs should get created when copying/removing files.
       dired-create-destination-dirs 'ask)

(add-hook! dired-mode '(dired-hide-details-mode
                        hl-line-mode))

(defun my-dired-copy-file-name ()
  "Copy file name."
  (interactive)
  (dired-copy-filename-as-kill))

(defun my-dired-copy-file-path ()
  "Copy full path to the file"
  (interactive)
  (dired-copy-filename-as-kill 0))

(defun dired-do-flagged-delete-permanently ()
  "Delete files permanently instead of trashing them"
  ;; (declare (interactive-only t))
  ;; (interactive nil dired-mode)
  (interactive)
  (let ((delete-by-moving-to-trash nil))
    (dired-do-flagged-delete)))

(setq! dired-omit-files "\\`[.]?#\\|\\`[.][.]?\\'\\|\\`[.].+")

(add-hook 'dired-mode-hook #'dired-omit-mode)

(defun my-dired-toggle-omit-mode ()
  "Toggle `dired-omit-mode' not only in current buffer,but in general."
  (interactive)
  (if dired-omit-mode
      (progn
        (dired-omit-mode -1)
        (remove-hook 'dired-mode-hook #'dired-omit-mode))
    (dired-omit-mode +1)
    (add-hook 'dired-mode-hook #'dired-omit-mode)))

(after! wdired
  (setq! wdired-allow-to-change-permissions t) ; or 'advanced

  (defun my-wdired-toggle-bit ()
    "Toggle the permission bit at point."
    (interactive)
    (wdired-toggle-bit)
    (backward-char)))

;; Use Thumbnail Managing Standard
(setq! image-dired-thumbnail-storage 'standard)  ; 128x128
;; (setq! image-dired-thumbnail-storage 'standard-large)  ; 256x256
;; (setq! image-dired-thumbnail-storage 'standard-x-large) ; 512x512

(setq! image-dired-marking-shows-next nil)

;; TODO: xdg-open doesn't worked
(setq! image-dired-external-viewer "qimgv")

;; image-dired-dired-display-image
;; dired-open-file

(use-package! dired-filter
  :config
  (setq! dired-filter-group-saved-groups
         '(("default"
            ("Directories"
             (directory))
            ("Archives"
             (extension "zip" "rar" "gz" "bz2" "tar"))
            ("Pictures"
             (or (extension "jfif" "JPG")
                 (mode . 'image-mode)))
            ("Videos"
             (extension "mp4" "mkv" "flv" "mpg" "avi" "webm"))
            ;; ("LaTeX"
            ;;  (extension "tex" "bib"))
            ;; ("Org"
            ;;  (extension . "org"))
            ("PDF"
             (extension . "pdf"))))))

(defun my-dired-filter-group-mode ()
  "Toggle `dired-filter-group-mode' in all buffers."
  (interactive)
  (if dired-filter-group-mode
      (progn
        (dired-filter-group-mode -1)
        (remove-hook 'dired-mode-hook #'dired-filter-group-mode))
    (dired-filter-group-mode +1)
    (add-hook 'dired-mode-hook #'dired-filter-group-mode)))

(use-package! dired-open
  :config
  (setq! dired-open-extensions '(("pdf" . "evince")
                                 ;; ("exe" . "wine")
                                 ;; ("docx" . "libreoffice")
                                 ;; ("doc" . "libreoffice")
                                 ;; ("xlsx" . "libreoffice")
                                 ;; ("xls" . "libreoffice")
                                 ;; ("epub" . "fbreader")
                                 ))
  ;; NOTE: With this setting, dired will also open directories with `xdg-open'.
  ;; (add-to-list 'dired-open-functions #'my/dired-xdg-open)
  )

(defun my/dired-xdg-open ()
  "In a dired buffer, open file or folder on the current line with `xdg-open'
shell command."
  (interactive)
  (when (executable-find "xdg-open")
    (let* ((file-name (ignore-errors
                        (thread-first (dired-get-file-for-visit)
                                      (file-truename)
                                      (shell-quote-argument)))))
      (when file-name
        (call-process-shell-command (concat "xdg-open " file-name))))))

(defconst denote-id-format "%Y%m%dT%H%M%S")
(defconst denote-id-regexp "\\([0-9]\\{8\\}\\)\\(T[0-9]\\{6\\}\\)")

(defun my-get-file-creation-time (filepath)
  "Get the creation time of FILEPATH using the `stat' from coreutils."
  (thread-first (format "stat --format=%%w %s" (shell-quote-argument filepath))
                (shell-command-to-string)
                (string-trim)
                (parse-time-string)
                (encode-time)))

(defun my-get-file-modification-time (filepath)
  (file-attribute-modification-time (file-attributes filepath)))

(defun my-get-file-denote-id (filepath)
  "Get file denote ID or `nil'"
  (let ((filename (file-name-nondirectory filepath)))
    (if (string-match (concat "\\`" denote-id-regexp) filename)
        (match-string-no-properties 0 filename)
      nil)))

(defun my-create-file-denote-id (filepath)
  "Generate denote ID based on file creation time"
  (let* ((created (my-get-file-creation-time filepath))
         (modified (file-attribute-modification-time (file-attributes filepath)))
         (time (if (time-less-p created modified)
                   created modified)))
    (format-time-string denote-id-format time)))

(defun my-dired-add-denote-id ()
  "Add denote timestamp in front of the files name, unless it's already there."
  (declare (interactive-only t))
  (interactive nil dired-mode)
  (dolist (file (dired-get-marked-files))
    (unless (my-get-file-denote-id file)
      (let ((filename (file-name-nondirectory file)))
        (cond
         ;; Files from Reddit app on android. They have timestamp in their name,
         ;; like this: RDT_20220820_0858002573777192519160821.jpg
         ((string-match "^RDT_\\([0-9]\\{8\\}\\)_\\([0-9]\\{6\\}\\)" filename)
          (let* ((date (match-string-no-properties 1 filename))
                 (time (match-string-no-properties 2 filename))
                 (extension (file-name-extension file))
                 (newname (format "%sT%s.%s" date time extension)))
            (rename-file file newname)))
         (t
          (let* ((id (my-create-file-denote-id file))
                 (newname (format "%s--%s" id filename)))
            (rename-file file newname)))))))
  (dired-revert))

(use-package! casual-dired)
(use-package! diredfl
  :hook (dired-mode . diredfl-mode))
(use-package! dired-copy-paste)
(use-package! dired-narrow)
(use-package! dired-subtree)

(after! elfeed
  (add-hook 'elfeed-search-mode-hook #'elfeed-update))

;; (after! embark
;;   (setq prefix-help-command #'embark-prefix-help-command))

;; (after! embark-consult
;;   (add-hook embark-collect-mode-hook #'consult-preview-at-point-mode))

(after! ibuffer
  (setq! ibuffer-expert t ; Do not ask for confirmation to delete the unmodified buffer.
         ibuffer-truncate-lines t
         ibuffer-show-empty-filter-groups nil ; Don't show emtpy filter groups
         ibuffer-display-summary nil
         ;; ibuffer-default-sorting-mode 'filename/process ; recency alphabetic major-mode
         ;; ibuffer-read-only-char "%"
         ;; ibuffer-modified-char "*"
         ;; ibuffer-marked-char ">"
         ;; ibuffer-locked-char "L"
         ;; ibuffer-deletion-char "D"
         ibuffer-eliding-string "‚Ä¶")
  
  (pushnew! ibuffer-help-buffer-modes #'helpful-mode)
  (add-hook! 'ibuffer-mode-hook
    #'ibuffer-auto-mode ; automatically update ibuffer
    #'hl-line-mode
    ;; (ibuffer-switch-to-saved-filter-groups "home")
    )
  
  (evil-ex-define-cmd "buffers" #'ibuffer)
  (defun ibuffer-jump-to-last-buffer ()
    (ibuffer-jump-to-buffer (buffer-name (cadr (buffer-list)))))
  
  (add-hook 'ibuffer-hook #'ibuffer-jump-to-last-buffer)
  (let ((path (cond ((require 'ibuffer-projectile nil t) 'my/project-relative-filename-or-process)
                    (t 'filename-and-process))))
    (setq ibuffer-formats
          `((mark modified read-only locked
                  " " (icon 2 2 :left :elide)
                  ,(propertize " " 'display `(space :align-to 8))
                  (name 26 -1)
                  "  " ,path)
            (mark modified read-only locked
                  " " (icon 2 2 :left :elide)
                  ,(propertize " " 'display `(space :align-to 8))
                  (name 30 30 :left :elide)
                  " " (size 6 -1 :right)
                  " " (mode 16 16 :left :elide)
                  ;; ,@(when (require 'ibuffer-vc nil t)
                  ;;     '(" " (vc-status 12 :left)))
                  " " ,path))))
  ;; Display buffer icons on GUI
  (define-ibuffer-column icon
    (:name "  ")
    (let ((icon (if (and (buffer-file-name)
                         (nerd-icons-auto-mode-match?))
                    (nerd-icons-icon-for-file (file-name-nondirectory (buffer-file-name)) :v-adjust -0.05)
                  (nerd-icons-icon-for-mode major-mode :v-adjust -0.05))))
      (if (symbolp icon)
          (setq icon (nerd-icons-faicon "nf-fa-file_o" :face 'nerd-icons-dsilver :height 0.8 :v-adjust 0.0))
        icon)))
  
  ;; Human readable size column
  (define-ibuffer-column size
    (:name "Size"
     :inline t
     :header-mouse-map ibuffer-size-header-map)
    (file-size-human-readable (buffer-size)))
  )

(use-package! ibuffer-projectile
  :hook
  (ibuffer . ibuffer-projectile-set-filter-groups)
  :config
  (setq ibuffer-projectile-prefix (concat (nerd-icons-octicon
                                           "nf-oct-file_directory"
                                           :face ibuffer-filter-group-name-face
                                           :v-adjust -0.05)
                                          " "))

  ;; Render filnames relative to project root
  (define-ibuffer-column my/project-relative-filename-or-process
    (:name "Filename/Process"
     :header-mouse-map ibuffer-filename/process-header-map
     :summarizer
     (lambda (strings)
       (setq strings (delete "" strings))
       (let ((procs (--count (get-text-property 1 'ibuffer-process it)
                             strings))
             (files (length strings)))
         (concat (cond ((zerop files) "No files")
                       ((= 1 files) "1 file")
                       (t (format "%d files" files)))
                 ", "
                 (cond ((zerop procs) "no processes")
                       ((= 1 procs) "1 process")
                       (t (format "%d processes" procs)))))))
    (let ((proc     (get-buffer-process buffer))
          (filename (ibuffer-make-column-filename buffer mark)))
      (if proc
          (concat (propertize (format "(%s %s)" proc (process-status proc))
                              'font-lock-face 'italic
                              'ibuffer-process proc)
                  (if (> (length filename) 0)
                      (format " %s" filename)
                    ""))
        ;; else
        (let ((root-dir (cdr (ibuffer-projectile-root buffer))))
          (if root-dir
              (file-relative-name filename root-dir)
            (abbreviate-file-name filename)))))))

(use-package! evil-xkbswitch
  :after evil
  :diminish evil-xkbswitch-mode
  :config
  ;; If you use GNOME:
  (when (string-equal-ignore-case (getenv "DESKTOP_SESSION") "gnome")
    (setq evil-xkbswitch-set-layout "g3kb-switch -s"
          evil-xkbswitch-get-layout "g3kb-switch"))
  (evil-xkbswitch-mode))

(use-package! evil-cleverparens
  :hook (lisp-data-mode . evil-cleverparens-mode)
  :custom
  (evil-cleverparens-use-s-and-S nil)
  (evil-cleverparens-drag-ignore-lines t)
  :config

  (evil-define-motion my/evil-cp-forward-sexp (count)
    "Motion for moving forward by a sexp."
    :type exclusive
    (let ((count (or count 1)))
      (when (evil-eolp)
        (forward-char))
      (forward-sexp count)
      (forward-sexp)
      (backward-sexp)))

  (evil-define-motion my/evil-cp-backward-sexp (count)
    "Motion for moving backwward by a sexp."
    :type exclusive
    (let ((count (or count 1)))
      (backward-sexp count)))

  (evil-define-motion my/evil-cp-up-sexp (count)
    "Move the cursor to the nearest paired closing bracket."
    :move-point nil
    :type inclusive
    (let ((count (or count 1)))
      (when (evil-cp--looking-at-any-opening-p)
        (if (fboundp 'evilmi-jump-items) (evilmi-jump-items) (evil-jump-item))
        (setq count (- count 1)))
      (when (> count 0)
        (when (evil-cp--looking-at-any-closing-p)
          (forward-char))
        (and (sp-up-sexp count)
             (backward-char))))))

(after! git-commit
 (remove-hook 'git-commit-setup-hook #'+vc-start-in-insert-state-maybe-h))

(after! magit
  (setq! magit-diff-refine-hunk 'all
         magit-diff-hide-trailing-cr-characters t
         magit-display-buffer-function #'my/magit-display-buffer-fn))

(defun my/magit-display-buffer-fn (buffer)
    "Same as `magit-display-buffer-traditional', except...

- Open status buffer in the same window.
- Magit process windows are always opened in small windows below the current. "
    (let ((buffer-mode (buffer-local-value 'major-mode buffer)))
      (display-buffer
       buffer (cond
               ((eq buffer-mode 'magit-status-mode) '(display-buffer-same-window))
               ((eq buffer-mode 'magit-process-mode) '(display-buffer-below-selected
                                                       (window-height . (truncate (* (window-height) 0.35)))))
               ((and (derived-mode-p 'magit-mode)
                     (not (memq buffer-mode
                                '(magit-process-mode
                                  magit-revision-mode
                                  magit-diff-mode
                                  magit-stash-mode))))
                '(display-buffer-same-window))

               ('(+magit--display-buffer-in-direction))))))

;; (use-package! pandoc-mode
;;   :commands (pandoc-mode))

(defun my-convert-makrdown-region-to-org (start end)
  "Convert selected region from markdown to org and replace selection"
  (interactive "r")
  (shell-command-on-region start end "pandoc -f markdown -t org" t t))

(use-package! chezmoi
  :config
  ;; Integrate with evil mode by toggling template display when entering insert
  ;; mode.
  (defun chezmoi--evil-insert-state-enter ()
    "Run after evil-insert-state-entry."
    (chezmoi-template-buffer-display nil (point))
    (remove-hook 'after-change-functions #'chezmoi-template--after-change 1))

  (defun chezmoi--evil-insert-state-exit ()
    "Run after evil-insert-state-exit."
    (chezmoi-template-buffer-display nil)
    (chezmoi-template-buffer-display t)
    (add-hook 'after-change-functions #'chezmoi-template--after-change nil 1))

  (defun chezmoi-evil ()
    (if chezmoi-mode
        (progn
          (add-hook 'evil-insert-state-entry-hook #'chezmoi--evil-insert-state-enter nil 1)
          (add-hook 'evil-insert-state-exit-hook #'chezmoi--evil-insert-state-exit nil 1))
      (progn
        (remove-hook 'evil-insert-state-entry-hook #'chezmoi--evil-insert-state-enter 1)
        (remove-hook 'evil-insert-state-exit-hook #'chezmoi--evil-insert-state-exit 1))))
  (add-hook 'chezmoi-mode-hook #'chezmoi-evil))

(use-package! chezmoi-dired
  :init
  (add-to-list 'load-path (file-name-concat doom-local-dir "straight/repos/chezmoi.el/extensions"))
  :commands (chezmoi-dired-add-marked-files))

(setq org-directory (expand-file-name "~/notes/"))

(after! org
  (setq! org-modules '(;; ol-doi
                       ;; ol-w3m
                       ;; ol-bbdb
                       ol-bibtex
                       ol-docview
                       ;; ol-gnus
                       ol-info
                       ;; ol-irc
                       ;; ol-mhe
                       ;; ol-rmail
                       ;; ol-eww
                       ))
  (setq! org-return-follows-link t
         ;; org-fold-core-style 'overlays
         org-tags-column -80 ; –ü—Ä–∏–∂–∏–º–∞—Ç—å —Ç—ç–≥–∏ –∫ 80 –∫–æ–ª–æ–Ω–∫–µ —Å–ø—Ä–∞–≤–∞.
  
         ;; org-M-RET-may-split-line '((default . t))
         org-insert-heading-respect-content nil
         org-default-notes-file (file-name-concat org-directory "inbox.org")
  
         ;; Indentation for the content of a source code block.
         org-edit-src-content-indentation 0
         org-src-preserve-indentation nil
  
         ;; Use `TAB' language's major-mode binding in code blocks.
         org-src-tab-acts-natively nil
  
         ;; ;; Follow org links by press Enter with point on it.
         ;; org-return-follows-link t
  
         ;; ;; Changes to task states might get logged, especially for recurring
         ;; ;; routines. If so, log them in a drawer, not the content of the note.
         ;; org-log-state-notes-into-drawer t
  
         org-indirect-buffer-display 'current-window
         org-list-allow-alphabetical t
         ;; org-log-into-drawer t
  
         org-startup-folded 'show2levels ; Initial visibility
  
         ;; Properties apply also for sublevels.
         org-use-property-inheritance t
  
         ;; org-log-done 'time ; Track time when tasks were finished.
         org-deadline-warning-days 14
         org-log-redeadline 'note
         org-log-reschedule nil
         org-blank-before-new-entry '((heading . t)
                                      (plain-list-item . auto)))
  (setq org-startup-indented t
        org-fontify-whole-heading-line t
        org-fontify-quote-and-verse-blocks t
        org-pretty-entities t)
  
  ;; Enclose text in "{}" after "_" to make it treated as subscript.
  (setq org-use-sub-superscripts '{})
  (setq! org-id-method 'ts
         org-id-ts-format "%Y%m%dT%H%M%S")
  (setq! org-id-link-to-org-use-id 'create-if-interactive)
  ;; (setq! org-id-link-to-org-use-id 'use-existing)
  (setq! org-attach-store-link-p 'attached
         org-attach-dir-relative t
         org-attach-id-dir (file-name-concat org-directory "org-attach/")
         org-attach-method 'mv ; move
         ;; org-attach-use-inheritance nil
         org-attach-auto-tag "ATTACH"
         org-attach-preferred-new-method 'id
         org-attach-sync-delete-empty-dir 'query
         org-file-apps '((system . "xdg-open %s")
                         ("\\.pdf\\'" . system)
                         ("\\.djvu?\\'" . system)
                         (directory . system)
                         (auto-mode . emacs)
                         ("\\.x?html?\\'" . default))
         org-attach-id-to-path-function-list '(identity
                                               org-attach-id-uuid-folder-format
                                               org-attach-id-ts-folder-format
                                               org-attach-id-fallback-folder-format))
  
  (defun my-org-attach-id-ts-folder-format (id)
    "Translate an UUID ID into a folder-path.
  Default format for how Org translates ID properties to a path for
  attachments.  Useful if ID is generated with UUID."
    (and (< 4 (length id))
         (format "%s/%s"
                 (substring id 0 4)
                 id
                 ;; (substring id 4)
                 )))
  (setq org-capture-templates
        '(("j" "journal" plain
           (file+olp+datetree +org-capture-journal-file)
           "%?"
           :empty-lines-before 1
           ;; :kill-buffer t
           )))
  (setq! org-src-window-setup 'current-window)
  ;; Allow babel code execution without confirming it every time.
  (setq! org-confirm-babel-evaluate nil)
  (setq! org-babel-load-languages '((sql . t)
                                    (shell . t)
                                    (emacs-lisp . t)
                                    (python . t)
                                    (plantuml . t)))
  (setq! org-plantuml-exec-mode 'plantuml
         org-plantuml-jar-path (expand-file-name "~/.nix-profile/lib/plantuml.jar"))
  (setq! org-footnote-define-inline nil
         org-footnote-auto-adjust t)
  (setq! org-startup-with-inline-images t
         org-cycle-inline-images-display t
         org-image-actual-width '(300))
  (setq! org-todo-keywords
         '((sequence ;; "Û∞îå" ; SOMEDAY
                     "Û∞íÖ" ; SOMEDAY
                     "Û∞Ñ±" ; TODO
                     "Û∞°ñ" ; NEXT
                     ;; "Û∞§å" ; IN PROCESS
                     "Û±Öä" ; IN PROGRESS
                     "Û±óù" ; IN PROGRESS
                     "Û∞îü" ; WAITING
                     "|"
                     "Û∞Ñµ" ; DONE
                     "Û±àé" ; ARCHIVED
                     "Û∞Öò" ; CANCELLED
                     )
           (sequence "SOMEDAY" "TODO" "NEXT" "IN-PROGRESS" "WAITING" "|"
                     "DONE" "ARCHIVED" "CANCELLED")))
  
  ;; Make priority signs be integers from 1 to 5, with 3 as default.
  ;; Default priorities are: #A, #B, #C, with #B as default.
  (setq! org-priority-highest ?A
         org-priority-lowest  ?D
         org-priority-default ?C)
  
  ;; Consider all nested entries in the subtree for cookies.
  ;; [[info:org#Breaking Down Tasks]]
  (setq! org-hierarchical-todo-statistics nil)
  ;; (setq! org-use-tag-inheritance nil)
  (setq! org-tags-exclude-from-inheritance '("project" "main" "index")
         org-tags-match-list-sublevels nil)
  (org-link-set-parameters "zotero" :follow
                           (lambda (zpath)
                             (browse-url (format "zotero:%s" zpath))))
  )

;; ("TODO" . "ÔÑå")
;; ("WAIT" . "Ôäå")
;; ("NOPE" . "ÔÅú")
;; ("DONE" . "ÔÅù")
;; ("[#A]" . "Ôàû")
;; ("[#B]" . "ÔÄ§")
;; ("[#C]" . "ÔÉ¥")
;; ("[ ]" . "ÔÇñ")
;; ("[X]" . "ÔÅÜ")
;; ("[-]" . "Ôâí")
;; (":PROPERTIES:" . "Ôáû")
;; (":END:" . "‚Äï")
;; ("#+STARTUP:" . "ÔÇÖ")
;; ("#+TITLE: " . "")
;; ("#+RESULTS:" . "ÔÄØ")
;; ("#+NAME:" . "ÔÄ´")
;; ("#+ROAM_TAGS:" . "ÔÄ¨")
;; ("#+FILETAGS:" . "ÔÄ¨")
;; ("#+HTML_HEAD:" . "Ôáº")
;; ("#+SUBTITLE:" . "Ôáú")
;; ("#+AUTHOR:" . "ÔÉÄ")
;; (":Effort:" . "ÔÄó")
;; ("SCHEDULED:" . "ÔÅ≥")
;; ("DEADLINE:" . "ÔÄù")

(defun my/org-icons ()
  "Beautify org mode keywords."
  (setq prettify-symbols-alist
        (mapcan (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
                '(("#+begin_src" . "ÔÑ°")
                  ("#+end_src" . "‚Äï")
                  ("#+begin_example" . "ÔÅ∏")
                  ("#+end_example" . "ÔÅ∑")
                  ("#+begin_quote" . "ÔÑç")
                  ("#+end_quote" . "ÔÑé")
                  ;; ("#+begin_quote" . "Ó¨≥")
                  ;; ("#+end_quote" . "Ó¨≥")
                  ;; ("#+header:" . ?ÔÄ§)
                  ;; ("#+name:" . ?ÔÆ∏)
                  ;; ("#+results:" . ?ÔÉ£)
                  ;; ("#+call:" . ?ÔÇï)
                  ;; (":properties:" . ?ÔÄì)
                  ;; (":logbook:" . ?Ôñπ)
                  )))
  (prettify-symbols-mode))

(use-package! org-superstar
  :custom
  (org-superstar-remove-leading-stars nil)
  (org-superstar-headline-bullets-list '("‚óè"))
  ;; (org-superstar-leading-bullet)
  (org-superstar-item-bullet-alist '((?+ . ?‚ñ∏)
                                     (?- . ?‚Ä¢)
                                     (?* . ?‚óÜ)))
  :hook (org-mode . org-superstar-mode))

(use-package! org-pretty-tags
  :hook (org-mode . org-pretty-tags-mode)
  :custom (org-pretty-tags-surrogate-strings '(("attach" . "Û∞Å¶")
                                               ("ATTACH" . "Û∞Å¶"))))

(use-package! org-appear
  :custom
  (org-hide-emphasis-markers t)
  :hook (org-mode . org-appear-mode))

(use-package! org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode)
  ;; :custom (org-auto-tangle-babel-safelist '("~/.config/emacs/README.org"))
  )

(after! org
  (use-package! org-tempo
    ;; :after org
    :config
    ;; Elements of length one have a tab appended. Elements of length two are
    ;; kept as is. Longer elements are truncated to length two. If an element
    ;; cannot be made unique, an error is raised.
    (pushnew! org-structure-template-alist
              '("se" . "src emacs-lisp")
              '("sh" . "src sh")
              '("sc" . "src cpp")
              '("sf" . "src fennel")
              '("sl" . "src common-lisp")
              '("sm" . "src markdown")
              ;; '("sr" . "src rust")
              '("sp" . "src python")
              '("su" . "src lua"))))

(after! org-roam
  (setq org-roam-directory org-directory)
  (setq org-roam-completion-everywhere t)
  (setq! org-roam-db-gc-threshold most-positive-fixnum)
  (setq! org-roam-graph-executable "dot")
  
  (setq org-roam-mode-section-functions '(org-roam-backlinks-section
                                          org-roam-reflinks-section
                                          ;; org-roam-unlinked-references-section
                                          ))
  (setq! org-roam-node-display-template
         (format "${title:*} %s %s"
                 (propertize "${doom-type:12}" 'face 'font-lock-keyword-face)
                 (propertize "${doom-tags:42}" 'face '(:inherit org-tag :box nil))))
  (setq org-roam-extract-new-file-path "${slug}.org")
  
  (setq org-roam-capture-templates
        `(("d" "denote" plain "%?" :target
           (file+head "${slug}.org"
                      ,(concat "#+title:    ${title}\n"
                               "#+filetags: ${my-tags}"))
           :immediate-finish t
           :unnarrowed t)))
  (cl-defmethod org-roam-node-slug ((node org-roam-node))
    "Return the slug of NODE."
    (let ((title (org-roam-node-title node))
          (id (org-roam-node-id node))
          (slug-trim-chars '(;; Combining Diacritical Marks https://www.unicode.org/charts/PDF/U0300.pdf
                             768 ; U+0300 COMBINING GRAVE ACCENT
                             769 ; U+0301 COMBINING ACUTE ACCENT
                             770 ; U+0302 COMBINING CIRCUMFLEX ACCENT
                             771 ; U+0303 COMBINING TILDE
                             772 ; U+0304 COMBINING MACRON
                             774 ; U+0306 COMBINING BREVE
                             775 ; U+0307 COMBINING DOT ABOVE
                             776 ; U+0308 COMBINING DIAERESIS
                             777 ; U+0309 COMBINING HOOK ABOVE
                             778 ; U+030A COMBINING RING ABOVE
                             780 ; U+030C COMBINING CARON
                             795 ; U+031B COMBINING HORN
                             803 ; U+0323 COMBINING DOT BELOW
                             804 ; U+0324 COMBINING DIAERESIS BELOW
                             805 ; U+0325 COMBINING RING BELOW
                             807 ; U+0327 COMBINING CEDILLA
                             813 ; U+032D COMBINING CIRCUMFLEX ACCENT BELOW
                             814 ; U+032E COMBINING BREVE BELOW
                             816 ; U+0330 COMBINING TILDE BELOW
                             817 ; U+0331 COMBINING MACRON BELOW
                             )))
      (cl-flet* ((nonspacing-mark-p (char)
                   (memq char slug-trim-chars))
                 (strip-nonspacing-marks (s)
                   (string-glyph-compose
                    (apply #'string (seq-remove #'nonspacing-mark-p
                                                (string-glyph-decompose s)))))
                 (cl-replace (title pair)
                   (replace-regexp-in-string (car pair) (cdr pair) title)))
        (let* ((pairs `(("[^[:alnum:][:digit:]]" . " ") ;; convert anything not alphanumeric to spaces
                        ("%s*" . " ")                   ;; remove sequential spaces
                        ("^-" . "")                     ;; remove starting underscore
                        ("-$" . "")))                   ;; remove ending underscore
               (slug (-reduce-from #'cl-replace (strip-nonspacing-marks title) pairs)))
          ;; (downcase slug)
          (concat id "--" slug)))))
  (cl-defmethod org-roam-node-my-tags ((node org-roam-node))
    (let ((tags (completing-read-multiple "New note KEYWORDS: "
                                          (org-roam-tag-completions))))
      (when tags
        (concat ":" (mapconcat #'identity tags ":") ":"))))
  (org-roam-db-autosync-mode)
  (add-to-list 'org-default-properties "ROAM_EXCLUDE")
  
  ;; Soft-wrap lines in the backlinks buffer
  (remove-hook 'org-roam-mode-hook #'turn-on-visual-line-mode)
  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-side-window)
                 ;; (side . left)
                 (side . right)
                 (slot . 0)
                 (window-width . 50) ; 0.4
                 (window-height . fit-window-to-buffer)))
  
  ;; Uncomment only one of the following two peaces, as they aim to achieve the
  ;; same behavior:
  ;;
  ;; - If there are two open windows (an org-roam buffer with backlinks in side
  ;;   window and a general org-mode window displaying an org-roam note), pressing
  ;;   RET in the org-roam buffer (`org-roam-preview-visit') should open the note
  ;;   buffer in the main window.
  ;;
  ;; - In all other cases, the org-roam note should open in the same window.
  ;;
  ;; Alternative way is to set `display-buffer-base-action' (which is not
  ;; recomended).
  
  ;; ;; 1
  ;; (add-hook 'org-roam-mode-hook
  ;;           (lambda ()
  ;;             (setq-local display-buffer--same-window-action
  ;;                         '(display-buffer-use-some-window (main)))))
  
  ;; 2
  (add-to-list 'display-buffer-alist
               '(org-roam-buffer-p
                 (display-buffer-same-window display-buffer-reuse-mode-window)
                 (mode org-mode)
                 (body-function . select-window)))
  (defun my-org-roam-buffer-preview-function-1 ()
    (let* ((elem (org-element-context))
           (parent (org-element-property :parent elem)))
      ;; TODO: alt handling for non-paragraph elements
      (string-trim-right (buffer-substring-no-properties
                          (org-element-property :begin parent)
                          (org-element-property :end parent)))))
  
  
  (defun my-org-element-string (elem)
    "Get the string for org AST node."
    (string-trim (buffer-substring-no-properties
                  (org-element-property :begin elem)
                  (org-element-property :end elem))))
  
  
  (defun my-org-roam-buffer-preview-function-2 ()
    (let* ((elem (org-element-at-point))
           (type (car elem))
           (parent (org-element-property :parent elem)))
      (cond
       ;; Handle headlines
       ((eq type 'headline)
        (let* ((title (org-element-property :title elem))
               (level (org-element-property :level elem))
               (stars (make-string level ?*)))
          (concat stars " " title)))
       ;; list items
       ((and (eq type 'paragraph)
             ;; `parent' is checked here to prevent from evaluation the next
             ;; line if it is nil.
             parent
             (eq (car parent) 'item))
        (my-org-element-string parent))
       ;; All others
       (t
        (string-trim-right (buffer-substring-no-properties
                            (org-element-property :begin elem)
                            (org-element-property :end elem)))
        (my-org-element-string elem)))))
  
  
  ;; (defun my-org-roam-buffer-preview-function-3 ()
  ;;   "Return the preview content at point - depending on context.
  ;;
  ;; This function handles different cases:
  ;; - If the current line is an Org-mode list item, show the entire list.
  ;; - If the current line has more than 300 characters, it retrieves the whole line.
  ;; - Otherwise, it retrieves two lines before and after the current
  ;;   line, without crossing headlines."
  ;;
  ;;   (let* ((line-beg (save-excursion (org-beginning-of-line) (point)))  ; Start of current line
  ;;          (line-end (save-excursion (org-end-of-line) (point)))        ; End of current line
  ;;          (line-length (- line-end line-beg))                          ; Calculate line length
  ;;          (is-item (org-at-item-p))                                    ; Check if the line is an item
  ;;          (beg (cond
  ;; 	       ;; If the line is an item, go to item list beginning
  ;; 	       (is-item (save-excursion
  ;; 		          (let* ((struct (org-list-struct))
  ;; 			         (pos (progn (beginning-of-line) (point)))
  ;; 			         (ind (org-list-get-nth 1 pos struct))
  ;; 			         (n (if (= 0 ind)
  ;; 				        (progn (org-beginning-of-item-list) 0)
  ;; 			              (log ind 2))))
  ;; 		            (while (> n 0)
  ;; 		              (org-beginning-of-item-list)
  ;; 		              (forward-line -1)
  ;; 		              (org-beginning-of-item-list)
  ;; 		              (setq n
  ;; 			            (log (org-list-get-nth 1
  ;; 						           (progn (beginning-of-line) (point))
  ;; 						           struct))))
  ;; 		            (point))))
  ;; 	       ;; If the line length is greater than 300, return the whole line
  ;; 	       ((> line-length 300) line-beg)
  ;; 	       ;; Otherwise, go two lines before the current line or beginning
  ;; 	       ;; of block whichever comes first
  ;; 	       (t (let ((meta-end (save-excursion (org-roam-end-of-meta-data t) (point)))
  ;; 		        (line-beg-1 (save-excursion (org-beginning-of-line -1) (point))))
  ;; 		    (if (>= meta-end line-beg-1)
  ;; 		        meta-end
  ;; 		      line-beg-1)))))
  ;;
  ;;          (end (cond
  ;; 	       ;; If the line is an item, go to the end of item
  ;; 	       (is-item (save-excursion
  ;;                           (org-end-of-item-list) (point)))
  ;; 	       ;; If the line length is greater than 300, return the whole line
  ;; 	       ((> line-length 300) line-end)
  ;; 	       ;; Otherwise, go two lines after the current line
  ;; 	       (t (let ((next-heading (save-excursion (org-next-visible-heading 1) (point)))
  ;; 		        (line-end+3 (save-excursion (org-end-of-line 3) (point))))
  ;; 		    (if (<= next-heading line-end+3) next-heading line-end+3))))))
  ;;
  ;;     ;; Return the trimmed content between `beg` and `end`
  ;;     (string-trim (buffer-substring-no-properties beg end))))
  
  
  ;; (setq org-roam-preview-function #'org-roam-preview-default-function)
  ;; (setq org-roam-preview-function #'my-org-roam-buffer-preview-function-1)
  (setq org-roam-preview-function #'my-org-roam-buffer-preview-function-2)
  ;; (setq org-roam-preview-function #'my-org-roam-buffer-preview-function-3)
  (defun my-org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))
  (defun my-org-roam-create-untracked-node ()
    "Create Org-Roam node with `ROAM_EXCLUDE' property."
    (interactive)
    (org-id-get-create)
    (org-set-property "ROAM_EXCLUDE" "t"))
  )

(use-package! org-roam-dailies
  :after org-roam
  :config
  (setq org-roam-dailies-directory "daily/")
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry "* %?"
           :target (file+head "%<%Y-%m-%d>.org"
                              "#+title: %<%Y-%m-%d>\n")
           :empty-lines 1))))

(use-package! consult-org-roam
  :after org-roam
  :config
  (setq! consult-org-roam-grep-func #'consult-ripgrep)
  (setq! consult-org-roam-buffer-narrow-key ?r)
  ;; (setq! consult-org-roam-buffer-after-buffers t)
  (consult-org-roam-mode))

(use-package! org-roam-ui
  :after org-roam
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-follow-mode t)
  (org-roam-ui-open-on-start nil))

(use-package! org-roam-ql
  :after org-roam)

(use-package! org-roam-dblocks
  :hook (org-mode . org-roam-dblocks-autoupdate-mode)
  :config
  (defalias 'org-roam-insert-notes-dblock     #'org-insert-dblock:notes)
  (defalias 'org-roam-insert-backlinks-dblock #'org-insert-dblock:backlinks))

;; (use-package org-roam-lazy-previews
;;   :after org-roam
;;   :demand t)

;;; Backport from Emacs 30
(defvar minibuffer-completion-base nil
  "The base for the current completion.

This is the part of the current minibuffer input which comes
before the current completion field, as determined by
`completion-boundaries'.  This is primarily relevant for file
names, where this is the directory component of the file name.")

(defun minibuffer-sort-by-history (completions)
  "Sort COMPLETIONS by their position in `minibuffer-history-variable'.

COMPLETIONS are sorted first by `minibuffer-sort-alphbetically',
then any elements occurring in the minibuffer history list are
moved to the front based on the chronological order they occur in
the history.  If a history variable hasn't been specified for
this call of `completing-read', COMPLETIONS are sorted only by
`minibuffer-sort-alphbetically'.

This is a suitable function to use for `completions-sort' or to
include as `display-sort-function' in completion metadata."
  (let ((alphabetized (sort completions #'string-lessp)))
    ;; Only use history when it's specific to these completions.
    (if (eq minibuffer-history-variable
            (default-value minibuffer-history-variable))
        alphabetized
      (minibuffer--sort-by-position
       (minibuffer--sort-preprocess-history minibuffer-completion-base)
       alphabetized))))


(use-package! org-bookmarks
  :commands (org-bookmarks)
  :init
  (setq! org-bookmarks-file (file-name-concat org-directory "bookmarks.org")
         org-bookmarks-add-org-capture-template t
         org-bookmarks-display-screenshot t
         )
  (org-bookmarks-add-org-capture-template))

(after! org-journal
  ;; When switching from daily to weekly, monthly, yearly, or from weekly,
  ;; monthly, yearly to daily, you need to invalidate the cache. This has
  ;; currently to be done manually by calling `org-journal-invalidate-cache'.
  (setq! org-journal-file-type 'monthly)
  (setq! org-extend-today-until 4
         org-journal-date-format "%x, %A")) ; "DATE, WEEKDAY"

(use-package! org-web-tools
  ;; :after org
  :commands (org-web-tools-insert-web-page-as-entry
             org-web-tools-read-url-as-org
             org-web-tools-convert-links-to-page-entries
             org-web-tools-archive-attach
             org-web-tools-archive-view))

(after! org
  (set-lookup-handlers! 'org-mode
    :definition #'+org-lookup-definition-handler
    :references #'+org-lookup-references-handler
    :documentation #'helpful-at-point ;; original: #'+org-lookup-documentation-handler
    ))

(use-package! org-sliced-images
  ;; :config
  ;; (org-sliced-images-mode +1)
  )

(use-package! org-fragtog
  :after org
  :hook
  (org-mode . org-fragtog-mode)
  :init
  (setq! org-startup-with-latex-preview t)

  (setq! org-format-latex-options (thread-first
                                    org-format-latex-options
                                    (plist-put :scale 0.85)
                                    ;; (plist-put :foreground 'auto)
                                    ;; (plist-put :background 'auto)
                                    )))

(use-package! obsidian
  ;; :demand t
  :custom
  ;; Create missing files in inbox, when clicking on a wiki link?
  ;; t: in inbox, nil: next to the file with the link
  (obsidian-wiki-link-create-file-in-inbox nil)
  ;; The directory for daily notes (file name is YYYY-MM-DD.md)
  (obsidian-daily-notes-directory "Daily Notes")
  ;; Directory of note templates, unset (nil) by default
  ;(obsidian-templates-directory "Templates")
  ;; Daily Note template name - requires a template directory.
  ;; Default: Daily Note Template.md
  ;(obsidian-daily-note-template "Daily Note Template.md")
  :config
  (obsidian-specify-path "~/obsidian")
  (global-obsidian-mode t))

(after! cc-mode
  (c-add-style "my-custom-style"
               '("stroustrup" ;; "doom"
                 (c-basic-offset . 4)
                 (indent-tabs-mode . nil)
                 (c-offsets-alist . ((innamespace . 0)
                                     (namespace-open . 0)
                                     (namespace-close . 0)
                                     (access-label . 0)))))
  (setf (alist-get 'other c-default-style) "my-custom-style"))

(add-hook! 'compilation-mode-hook
  (+word-wrap-mode +1))

(add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)

(add-hook 'lisp-mode-hook #'aggressive-indent-mode)

;; (set-popup-rules!
;;  '(("^\\*sly-mrepl"       :vslot 2 :size 0.3 :quit nil :ttl nil)
;;    ("^\\*sly-compilation" :vslot 3 :ttl nil)
;;    ("^\\*sly-traces"      :vslot 4 :ttl nil)
;;    ("^\\*sly-description" :vslot 5 :size 0.3 :ttl 0)
;;    ;; Do not display debugger or inspector buffers in a popup window. These
;;    ;; buffers are meant to be displayed with sufficient vertical space.
;;    ("^\\*sly-\\(?:db\\|inspector\\)" :ignore t)))

(add-hook! 'org-mode-hook :append
  (setq-local fill-column 80) ;; set textwidth to 80
  (display-line-numbers-mode -1)
  ;; (auto-revert-mode) ;; –æ–±–Ω–æ–≤–ª—è—Ç—å –±—É—Ñ–µ—Ä, –µ—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è

  (auto-fill-mode) ;; hard wrap long lines
  ;; (setq-local normal-auto-fill-function #'do-auto-fill) ;; Default is `org-auto-fill-function'

  (+word-wrap-mode -1) ;; soft wrap long lines

  (my/org-icons)
  (setq-local evil-shift-width 2)
  ;; (setq-local TeX-electric-sub-and-superscript nil)
  )

(add-hook! 'prog-mode-hook :append
  (setq-local visual-fill-column-width (+ fill-column 5)))

(remove-hook! 'text-mode-hook #'display-line-numbers-mode)

(use-package! fish-mode)

(defun my-which-key-add-command-based-replacements (&rest args)
  "Add description for command that would be shown in the which-key menu"
  (dolist (pair (-partition 2 args))
    (-let* (((command description) pair)
            (command (if (symbolp command)
                       (symbol-name command)
                     command)))
      (add-to-list 'which-key-replacement-alist
                   `((nil . ,command) . (nil . ,description))))))

(defun my-narrow-to-active-region ()
  (interactive)
  (narrow-to-region (region-beginning)
                    (region-end))
  (evil-exit-visual-state))

(defun my-toggle-window-dedication ()
  "Toggles window dedication in the selected window."
  (interactive)
  (let* ((window    (selected-window))
         (dedicated (window-dedicated-p window)))
    (set-window-dedicated-p window (not dedicated))
    (message "Window %sdedicated to %s"
             (if dedicated "no longer " "")
             (buffer-name))))

(defun my/toggle-line-spacing ()
  "Toggle line spacing between my custom value and no extra space"
  (interactive)
  (if line-spacing
      (setq line-spacing nil)
    (setq line-spacing (default-value 'line-spacing)))
  (redraw-frame (selected-frame)))

(defun my/copy-file-current-line-position-to-clipboard ()
  "Copy current line in file to clipboard as `</path/to/file>:<line-number>'."
  (interactive)
  (let* ((path (if (equal current-prefix-arg '(4))
                   (string-replace (getenv "HOME") "~" (buffer-file-name))
                 (buffer-file-name)))
         (path-with-line-number (concat path ":" (number-to-string (line-number-at-pos)))))
    (kill-new path-with-line-number)
    (message path-with-line-number)))

(defun my/copy-file-position-for-org-link-target-to-clipboard ()
  "Copy current line in file to clipboard as `file:</path/to/file>::<line-number>'."
  (interactive)
  (let* ((file-name (buffer-file-name))
         (line-number (number-to-string (line-number-at-pos)))
         (path-with-line-number (concat "file:" file-name "::" line-number)))
    (kill-new path-with-line-number)
    (message (concat path-with-line-number " copied to clipboard"))))

;; kill-buffer-and-window

(evil-define-command my-evil-kill-buffer-and-window ()
  (kill-buffer)
  (evil-window-delete))

(defvar-keymap my-notes-map)
(defvar-keymap my-org-roam-ui)
(defvar-keymap my-dired-localleader-map)

;; (let ((keys '("\\`SPC p d\\'"
;;               "\\`SPC t i\\'")))
;;   (seq-remove (lambda (element)
;;                 (cl-some (lambda (key)
;;                            (string-equal key (caar element)))
;;                          keys))
;;               which-key-replacement-alist))

(after! which-key
  (my-which-key-add-command-based-replacements
   'display-fill-column-indicator-mode "Fill-column indicator"
   'evil-collection-consult-mark       "Evil marks"))

(after! which-key
  (my-which-key-add-command-based-replacements
   'my-dired-filter-group-mode "Dired Filter groups"
   'casual-dired-sort-by-tmenu "Options"
   'casual-dired-link-tmenu    "Symlink"
   'casual-dired-utils-tmenu   "Utils"))

(after! which-key
  (my-which-key-add-command-based-replacements
   'dired-unmark-all-files           "Unmark all files"
   'dired-change-marks               "Change marks char"
   'dired-filter-mark-by-extension   "Mark by extension"
   'dired-filter-mark-by-directory   "Mark directories"
   'dired-filter-mark-by-predicate   "Mark by predicate"
   'dired-filter-mark-by-file        "Mark files"
   'dired-filter-mark-by-garbage     "Mark garbage"
   'dired-filter-mark-by-dot-files   "Mark dotfiles"
   'dired-filter-mark-by-mode        "Mark by mode"
   'dired-filter-mark-by-name        "Mark by name"
   'dired-filter-mark-by-omit        "Mark omit"
   'dired-filter-mark-by-regexp      "Mark by regexp"
   'dired-filter-mark-by-symlink     "Mark symlinks"
   'dired-filter-mark-by-executable  "Mark executables"
   'dired-filter-mark-by-git-ignored "Mark git-ignored"
   'dired-filter-mark-by-saved-filters "Mark by saved filters"))

(after! which-key
  (my-which-key-add-command-based-replacements
   'denote-rename-file-using-front-matter "Rename via front-matter"))

(with-eval-after-load 'which-key
  (my-which-key-add-command-based-replacements
   'org-attach              "org-attach"
   'org-ctrl-c-ctrl-c       "Org C-c C-c"
   'org-capture             "Org capture"
   'org-capture-goto-target "Org capture destination"
   'org-todo-list           "Todo list"
   '+org/remove-link        "Remove link"
   'org-store-link          "Store org link"
   'org-set-property        "Property")
  (my-which-key-add-command-based-replacements
   'consult-org-heading "Headings")
  (my-which-key-add-command-based-replacements
   '+default/find-in-notes   "Find file in notes"
   '+default/browse-notes    "Browse notes"
   '+default/search-notes-for-symbol-at-point "Search notes for selection"
   '+org/export-to-clipboard "Org export to clipboard"
   '+org/export-to-clipboard-as-rich-text "Org export to clipboard as RTF")
  (my-which-key-add-command-based-replacements
   'org-cliplink                      "Web title link"
   'org-web-tools-insert-link-for-url "Web title link")
  (my-which-key-add-command-based-replacements
   'my-org-roam-create-untracked-node   "Create untracked-node"
   'org-roam-node-random                "Open random node"
   'org-roam-node-find                  "Find org-roam node"
   'org-roam-ref-find                   "Find ref"
   'org-roam-extract-subtree            "Org-roam extract subtree"
   'org-roam-alias-add                  "Add roam alias"
   'org-roam-alias-remove               "Remove roam alias"
   'org-roam-node-insert                "link to Roam node"
   'org-roam-tag-add                    "Add tag"
   'org-roam-tag-remove                 "Remove tag"
   'my-org-roam-node-insert-immediate   "create Roam node & insert link"
   'org-roam-dailies-goto-previous-note "Goto previous note"
   'org-roam-dailies-goto-date          "Goto date"
   'org-roam-dailies-capture-date       "Capture date"
   'org-roam-dailies-goto-next-note     "Goto next note"
   'org-roam-dailies-goto-tomorrow      "Goto tomorrow"
   'org-roam-dailies-capture-tomorrow   "Capture tomorrow"
   'org-roam-dailies-capture-today      "Capture today"
   'org-roam-dailies-goto-today         "Goto today"
   'org-roam-dailies-capture-today      "Capture today"
   'org-roam-dailies-goto-yesterday     "Goto yesterday"
   'org-roam-dailies-capture-yesterday  "Capture yesterday"
   'org-roam-dailies-find-directory     "Find directory"))

(after! which-key
  (my-which-key-add-command-based-replacements
   '+default/browse-project                    "Browse project"
   'doom/browse-in-other-project               "Browse other project"
   'projectile-run-shell-command-in-root       "Run cmd in project root"
   'projectile-run-async-shell-command-in-root "Async cmd in project root"
   'projectile-add-known-project               "Add new project"
   'projectile-switch-to-buffer                "Switch to project buffer"
   'projectile-compile-project                 "Compile in project"
   'projectile-repeat-last-command             "Repeat last command"
   'projectile-remove-known-project            "Remove known project"
   '+default/discover-projects                 "Discover projects in folder"
   'projectile-edit-dir-locals                 "Edit project .dir-locals"
   'projectile-find-file                       "Find file in project"
   'projectile-find-dir                        "Find dir in project"
   'doom/find-file-in-other-project            "Find file in other project"
   'projectile-configure-project               "Configure project"
   'projectile-invalidate-cache                "Invalidate project cache"
   'projectile-kill-buffers                    "Kill project buffers"
   'find-sibling-file                          "Find sibling file"
   'projectile-switch-project                  "Switch project"
   'projectile-recentf                         "Find recent project files"
   'projectile-run-project                     "Run project"
   'projectile-save-project-buffers            "Save project files"
   'projectile-test-project                    "Test project"
   'doom/open-project-scratch-buffer           "Pop up scratch buffer"
   'doom/switch-to-project-scratch-buffer      "Switch to scratch buffer"))

(after! which-key
  (my-which-key-add-command-based-replacements
   'winner-undo                    "Back in window history"
   'winner-redo                    "Forward in window history")
  (my-which-key-add-command-based-replacements
   'tab-bar-history-back           "Back in window history"
   'tab-bar-history-forward        "Forward in window history"
   'tab-bar-move-tab               "Move tab forward"
   'tab-bar-move-tab-backward      "Move tab backward")
  (my-which-key-add-command-based-replacements
   'my-evil-kill-buffer-and-window "Kill buffer and window"))

(remove-hook 'doom-after-init-hook #'doom-init-leader-keys-h)

(setq! doom-localleader-key ","
       doom-localleader-alt-key "M-,")

(map! :m "<backspace>" #'execute-extended-command ; emacs M-x
      ;; :nvm "SPC" doom-leader-map
      :nvm "SPC"   #'doom/leader ; doom-leader-map
      :ei  "M-SPC" #'doom/leader ; doom-leader-map in insert state
      :m   "C-s"   #'evil-write
      :m   "-"     #'dired-jump
      :m   "/"     #'+default/search-buffer
      :m   "?"     #'evil-ex-search-forward
      :m   "zn"    #'my-narrow-to-active-region
      :m   "zw"    #'widen
      :m   "z SPC" #'cycle-spacing
      :m   "z;"    #'comment-dwim
      :m   "z."    #'set-fill-prefix
      :n   "ga"    #'describe-char
      :mnv "gh"    #'my/evil-first-non-blank
      :mnv "gl"    #'my/evil-end-of-line)

(map! (:leader "n" (cons "notes" my-notes-map))
      ;; <leader> t
      (:map doom-leader-toggle-map
            "c" #'display-fill-column-indicator-mode)
      ;; <leader> s
      (:map doom-leader-search-map
            "m" #'evil-collection-consult-mark
            "r" nil ;; consult-mark
            ))

(map! :m "M-u" #'universal-argument
      :map universal-argument-map
      "M-u" #'universal-argument-more)

(map! :ri "C-<backspace>" #'evil-delete-backward-word
      :ri "C-—Ü" #'evil-delete-backward-word)

(map! :leader
      "-" #'dired)

(map! :after dired
      :map dired-mode-map
      :n "^" #'evil-first-non-blank)

(map! :after dired
      :map dired-mode-map
      :n "C-w <return>" #'dired-find-file-other-window
      :nv "C-<return>" #'my/dired-xdg-open
      :n "SPC tf" #'my-dired-filter-group-mode
      :n "SPC tg" #'my-dired-filter-group-mode
      :n "l"  #'dired-find-file
      :n "h"  #'dired-up-directory
      :n "<"  #'dired-prev-marked-file
      :n ">"  #'dired-next-marked-file
      :n ")"  #'my-dired-toggle-omit-mode
      :n "o"  #'my/dired-xdg-open
      :n "K"  #'dired-do-kill-lines
      :n "s"  #'dired-sort-toggle-or-edit
      :n "S"  #'casual-dired-sort-by-tmenu
      :n "n"  #'dired-narrow-fuzzy
      :n "N"  #'dired-narrow-regexp
      :n "zn" #'dired-narrow-fuzzy
      :n "zN" #'dired-narrow-regexp
      :n "w"  #'dired-display-file
      :n "c" (cons "change/compress"
                   (define-keymap
                     "d" #'my-dired-add-denote-id
                     "g" #'dired-do-chgrp
                     "o" #'dired-do-chown
                     "m" #'dired-do-chmod
                     "t" #'dired-do-touch
                     "c" #'dired-do-compress-to
                     "z" #'dired-do-compress))
      ;; :n "o" #'dired-sort-toggle-or-edit
      ;; :n "O" #'casual-dired-sort-by-tmenu
      :n "g" (progn
               (defvar-keymap my-dired-g-map
                 :full t
                 :suppress t
                 "$" #'dired-hide-subdir
                 "A" #'dired-show-file-type
                 "o" #'dired-view-file
                 "O" #'dired-find-file-other-window
                 "q" #'dired-do-find-regexp-and-replace
                 "r" #'dired-do-redisplay
                 "u" #'dired-undo

                 "l" #'dired-subtree-down
                 "h" #'dired-subtree-up
                 "k" #'dired-prev-dirline
                 "j" #'dired-next-dirline

                 "a" #'describe-char
                 "g" #'evil-goto-first-line
                 "v" #'evil-visual-restore
                 "*" #'evil-ex-search-unbounded-word-forward
                 "#" #'evil-ex-search-unbounded-word-backward
                 "<home>" #'evil-first-non-blank-of-visual-line
                 "<end>"  #'evil-end-of-visual-line)
               my-dired-g-map)
      :n "r" (cons "regexp"
                   (define-keymap
                     "d" #'dired-flag-files-regexp
                     "q" #'dired-mark-files-containing-regexp
                     "m" #'dired-mark-files-regexp
                     "r" #'dired-do-rename-regexp
                     "c" #'dired-do-copy-regexp
                     "h" #'dired-do-hardlink-regexp
                     "s" #'dired-do-symlink-regexp
                     "g" #'dired-flag-garbage-files))
      ;; :n "s"  (define-keymap
      ;;           "s" #'dired-do-symlink
      ;;           "r" #'dired-do-relsymlink
      ;;           "S" #'dired-do-relsymlink
      ;;           "h" #'dired-do-hardlink)
      :n "p"  #'dired-copy-paste-do-paste
      :n "y"  (cons "yank"
                    (define-keymap
                      "y" #'dired-copy-paste-do-copy
                      "x" #'dired-copy-paste-do-cut
                      "c" #'dired-do-copy
                      "n" #'my-dired-copy-file-name
                      "p" #'my-dired-copy-file-path))
      :nv "u" #'dired-unmark
      :nv "U" #'dired-unmark-all-marks
      :nv "," (define-keymap
                :keymap my-dired-localleader-map
                "a" #'org-attach-dired-to-subtree
                "d" #'my-dired-add-denote-id
                "r" (cons "rename"
                          (define-keymap
                            "d" #'my-dired-add-denote-id
                            "r" #'my-dired-rename-files-from-reddit))
                "f" (cons "filter" dired-filter-map)
                "l" #'casual-dired-link-tmenu
                "s" #'casual-dired-sort-by-tmenu
                "u" #'casual-dired-utils-tmenu))

;; dired-subtree
(with-eval-after-load 'dired
  (define-keymap
    :keymap dired-mode-map
    "<tab>"     #'dired-subtree-toggle
    "<backtab>" #'dired-subtree-cycle
    "z j" #'dired-subtree-down
    "z k" #'dired-subtree-up
    "z u" #'dired-subtree-up
    "C-j" #'dired-subtree-next-sibling
    "C-k" #'dired-subtree-previous-sibling))

;; dired-filter
(with-eval-after-load 'dired-filter
  (define-keymap
    :keymap my-dired-localleader-map
    "m" (cons "marks"
              (define-keymap
                :parent dired-filter-mark-map
                "c" #'dired-change-marks
                "u" #'dired-unmark-all-files
                "i" #'dired-filter-mark-by-git-ignored)))
  ;; Keibindings that are active when point hovers on group title.
  (define-keymap
    :keymap dired-filter-group-mode-map
    ;; "<tab>" #'dired-filter-group-toggle-header
    ;; "<backtab>" nil
    "C-j" #'dired-filter-group-forward-drawer
    "C-k" #'dired-filter-group-backward-drawer
    "z j"  #'dired-filter-group-forward-drawer
    "z k"  #'dired-filter-group-backward-drawer))

(map! :after wdired
      :map wdired-mode-map
      ;; :n "("   #'dired-hide-details-mode
      :n "RET" #'my-wdired-toggle-bit
      ;; :n "ESC" #'wdired-exit
      )

;; (map! :after dirvish
;;       :map dirvish-mode-map
;;       :n  "q"   #'quit-window
;;       :n  "zh"  #'dirvish-subtree-up
;;       :n  "zl"  #'dirvish-subtree-down
;;       :ng "zn"  #'dirvish-narrow
;;       :n  "gz"  #'dirvish-history-jump)

(map! :map image-dired-thumbnail-mode-map
      :n "RET" #'image-dired-display-this
      :n "o" #'image-dired-thumbnail-display-external
      :n "m" #'image-dired-mark-thumb-original-file
      :n "u" #'image-dired-unmark-thumb-original-file
      :n "d" #'image-dired-flag-thumb-original-file
      :n "K" #'image-dired-delete-char
      :n "n" #'image-dired-display-next
      :n "p" #'image-dired-display-previous)

;; (map! :map image-dired-image-mode-map)

(map! "M-;" #'embark-dwim)

(map! :after doom
      :map help-map
      "s" #'helpful-symbol
      "M" #'describe-keymap

      ;; Rebild `+lookup/online' from capital `O' to `o'
      "o" #'+lookup/online
      "O" nil)

(map! :after ibuffer
      :map ibuffer-mode-map
      :n "TAB" #'ibuffer-toggle-filter-group
      :n "A"   #'ibuffer-do-view-horizontally
      :n "zk"  #'ibuffer-backward-filter-group
      :n "zj"  #'ibuffer-forward-filter-group
      :n "zu"  #'ibuffer-backward-filter-group)

;; (general-def :keymaps 'Info-mode-map :states 'normal
;;   "SPC" (define-keymap :parent 'leader-map
;;           "1" 'Info-top-node
;;           "t" 'Info-toc
;;           "h" 'Info-history
;;           "d" 'Info-directory)

(map! :after info
      :map Info-mode-map
      :n "C-j" #'Info-next
      :n "C-k" #'Info-prev
      :n "<C-i>" #'Info-history-forward

      :n "zj" #'Info-forward-node
      :n "zk" #'Info-backward-node
      :n "zu" #'Info-up
      :n "zd" #'Info-directory
      :n "gd" #'Info-directory

      :n "J" #'Info-forward-node
      :n "K" #'Info-backward-node

      :n "M" #'Info-menu)

;; (after! info
;;   (evil-define-key 'normal Info-mode-map (kbd "<C-i>") #'Info-history-forward))

(after! info
  (dolist (i (number-sequence 1 9))
    (keymap-unset Info-mode-map (format "<normal-state> g %s" i) :remove)))

(map! :map evil-cleverparens-mode-map
      :mnv ")"   'my/evil-cp-up-sexp
      :mnv "["    nil  ; unbind `evil-cp-previous-opening' in favor of unimpaired
      :mnv "]"    nil  ; unbind `evil-cp-next-closing' in favor of unimpaired
      :mnv "C-(" 'evil-cp-backward-up-sexp
      :mnv "C-)" 'my/evil-cp-up-sexp
      :mnv "M-w" 'my/evil-cp-forward-sexp
      :mnv "M-b" 'my/evil-cp-backward-sexp
      :mnv "L"   'my/evil-cp-forward-sexp
      :mnv "H"   'my/evil-cp-backward-sexp
      :mnv ",w"  'evil-cp-wrap-next-round
      :mnv ",W"  'evil-cp-wrap-previous-round
      :mnv ",b"  'evil-cp-wrap-next-square
      :mnv ",B"  'evil-cp-wrap-previous-square
      :mnv ",f"  'evil-cp-wrap-next-curly
      :mnv ",F"  'evil-cp-wrap-previous-curly)

;; (map! :leader
;;       (:prefix "t"
;;        :desc "Truncate lines" "t" #'toggle-truncate-lines
;;        :desc "Inlay hints"    "i" #'lsp-inlay-hints-mode
;;        :desc "Code-lens"      "l" #'lsp-lens-mode
;;        :desc "Line numbers"   "L" #'doom/toggle-line-numbers))

;; (map! :leader
;;         (:prefix "t"
;;          :desc "Truncate lines" "t" #'toggle-truncate-lines
;;          :desc "Line numbers"   "L" #'doom/toggle-line-numbers))

(map! :after lsp-mode
      :map lsp-mode-map
      ;; :n "SPC t" (defvar-keymap my/lsp-mode-toggle-map
      ;;              :parent doom-leader-toggle-map
      ;;              "i" '("Inlay hints" . lsp-inlay-hints-mode)
      ;;              "L" '("Code-lens" . lsp-lens-mode))
      ;; :nv "K" #'my/lsp-doc
      :in "C-<return>" #'lsp-signature-activate
      :in "C-RET" #'lsp-signature-activate
      :n  "C-h ." #'lsp-describe-thing-at-point)

(map! :after (ccls cc-mode)
      :map (c-mode-map c++-mode-map)
      :n "C-h" nil
      :n "C-j" nil
      :n "C-k" nil
      :n "C-l" nil)

(map! :after (ccls cc-mode)
      :map (c-mode-map c++-mode-map)
      :in "C-<return>" #'lsp-signature-activate
      :in "C-RET" #'lsp-signature-activate
      :n  "C-h ." #'lsp-describe-thing-at-point)

;; (map! :after (ccls cc-mode)
;;       :map (c-mode-map c++-mode-map)
;;       :n "C-h" nil
;;       :n "C-j" nil
;;       :n "C-k" nil
;;       :n "C-l" nil)

(map! :after magit
      (:map magit-mode-map
       :mnv "SPC" #'doom/leader
       :n   "C-j" #'magit-section-forward-sibling
       :n   "C-k" #'magit-section-backward-sibling
       :n   "zj"  #'magit-section-forward
       :n   "zk"  #'magit-section-backward
       :n   "Z"   #'magit-stash)

      (:map magit-section-mode-map
       :n "C-j" #'magit-section-forward-sibling
       :n "C-k" #'magit-section-backward-sibling
       :n "zj" #'magit-section-forward
       :n "zk" #'magit-section-backward
       :n "zu" #'magit-section-up
       :n "gh" #'evil-first-non-blank
       :n "gl" #'evil-end-of-line
       :n "zt" #'evil-scroll-line-to-top
       :n "zz" #'evil-scroll-line-to-center
       :n "zb" #'evil-scroll-line-to-bottom
       :n "za" #'magit-section-toggle
       :n "zo" #'magit-section-toggle
       :n "zc" #'magit-section-toggle
       :n "<tab>" #'magit-section-cycle
       :n "C-<tab>" #'tab-next
       :n "C-<backtab>" #'tab-previous
       ;; :n "g <tab>" #'tab-new
       ;; :n "g <backtab>" #'tab-bar-move-window-to-tab
       )

      (:map magit-status-mode-map
       :n "gt" #'tab-next
       :n "gT" #'tab-previous)

      (:map with-editor-mode-map
       :n "ZZ" 'with-editor-finish
       :n "Q" 'with-editor-cancel
       :n "ZQ" 'with-editor-cancel)

      (:map magit-diff-mode-map
       :mnv "SPC" #'doom/leader))

;; (map! :map with-editor-mode-map
;;       :n "ZZ" #'with-editor-finish
;;       :n "Q"  #'with-editor-cancel
;;       :n "ZQ" #'with-editor-cancel)

(map! :leader
      :desc "Select vertico session" "\"" #'vertico-repeat-select)

(map! :after vertico
      :map vertico-map
      :gin "<tab>"      #'next-history-element
      :gin "<backtab>"  #'previous-history-element
      :gin "M-<return>" #'vertico-exit-input
      :gin "C-<return>" #'+vertico/embark-preview
      :in  "C-<backspace>" #'vertico-directory-delete-word
      :inv "C-f" #'vertico-scroll-up
      :inv "C-b" #'vertico-scroll-down
      :nv  "n"   #'vertico-next-group
      :nv  "N"   #'vertico-previous-group
      ;; :inv "C-n" #'vertico-next-group
      ;; :inv "C-p" #'vertico-previous-group
      :nv  "C-p" #'consult-yank-from-kill-ring
      :nv  "C-d" #'consult-dir
      ;; :nv  "C-j" #'consult-dir-jump-file
      ;; "C-h" (cmds! (eq 'file (vertico--metadata-get 'category))
      ;;              #'vertico-directory-up)
      ;; :in  "C-l" #'vertico-insert
      :in  "C-l" (cmds! (eq 'file (vertico--metadata-get 'category))
                        #'+vertico/enter-or-preview
                        #'vertico-insert)
      :nv "gg" #'vertico-first
      :nv "G" #'vertico-last
      :nv "q" #'minibuffer-keyboard-quit
      ;; Russian
      :i "C-–æ" #'vertico-next
      :i "C-–ª" #'vertico-previous)

(map! :map minibuffer-local-map
      :mi "M-a" #'marginalia-cycle)

(map! :map outline-mode-map
      ;; :n "<tab>" #'outline-cycle

      ;; folding
      ;; Evil default keys:
      ;; zO: Show recursively for current branch only.
      ;; za: Toggle first level like outline-toggle-children.
      ;; zc: Hide complete subtree.
      ;; zm: Show only root notes.
      ;; zo: Show current node like "za".
      ;; zr: Show everything.
      ;; :n "zo" #'outline-hide-other
      ;; :n "zb" #'outline-show-branches
      :n "zB" #'outline-hide-body ; Hide all bodies, Emacs has "C-c C-t".
      :n "ze" #'outline-show-entry ; Show current body only, not subtree, reverse of outline-hide-entry, Emacs has "C-c C-e".
      :n "zE" #'outline-hide-entry ; Hide current body, Emacs has "C-c C-c".
      :n "zj" #'outline-next-visible-heading
      :n "zk" #'outline-previous-visible-heading
      ;; :n "zl" #'outline-hide-leaves
      :n "zL" #'outline-hide-leaves ; Like `outline-hide-body' but for current subtree only, Emacs has "C-c C-l".
      :n "zK" #'outline-show-branches ; Show all children recursively but no body.  Emacs has "C-c C-k".
      ;; :n "zk" #'outline-show-children ; Direct children only unlike `outline-show-branches', and no content unlike `outline-show-entry' and `outline-toggle-children'.  Emacs has "C-c TAB".
      :n "zu" #'outline-up-heading
      :n "zm" #'my-outline-hide-sublevels

      :n "zp" #'outline-hide-other ; Hide all nodes and bodies except current body.  Emacs has "C-c C-o".
      ;; outline-hide-sublevels ; q ; Is it any different from `outline-hide-body'?
      ;; outline-hide-subtree ; Emacs has "C-c C-d", Evil has default "zc".
      ;; outline-show-subtree ; Emacs has "C-c C-s", Evil has default "zO".

      ;; motion
      ;; :m "[[" #'outline-previous-visible-heading
      ;; :m "]]" #'outline-next-visible-heading
      :m "C-k" #'outline-backward-same-level
      :m "C-j" #'outline-forward-same-level
      ;; :m "gk" #'outline-backward-same-level
      ;; :m "gj" #'outline-forward-same-level

      ;; :m "M-h" #'outline-promote ; Org-mode has "M-<left>", Evil-org has "M-h"
      ;; :m "M-j" #'outline-move-subtree-down ; Org-mode has "M-<down>", Evil-org has "M-j"
      ;; :m "M-k" #'outline-move-subtree-up ; Org-mode has "M-<up>", Evil-org has "M-k"
      ;; :m "M-l" #'outline-demote ; Org-mode has "M-<right>", Evil-org has "M-l"

      ;; :m "M-<return>" #'outline-insert-heading ; Org-mode has "M-<return>"
      )

(defun my-outline-hide-sublevels (levels)
  (interactive "p")
  (outline-hide-sublevels (or levels 1)))

;; "C-c C-S-l"  #'+org/remove-link
;; "C-c C-i"    #'org-toggle-inline-images
;; ;; textmate-esque newline insertion
;; "S-RET"      #'+org/shift-return
;; "C-RET"      #'+org/insert-item-below
;; "C-S-RET"    #'+org/insert-item-above
;; "C-M-RET"    #'org-insert-subheading
;; [C-return]   #'+org/insert-item-below
;; [C-S-return] #'+org/insert-item-above
;; [C-M-return] #'org-insert-subheading
;; (:when (featurep :system 'macos)
;;  [s-return]   #'+org/insert-item-below
;;  [s-S-return] #'+org/insert-item-above
;;  [s-M-return] #'org-insert-subheading)
;; ;; Org-aware C-a/C-e
;; [remap doom/backward-to-bol-or-indent]          #'org-beginning-of-line
;; [remap doom/forward-to-last-non-comment-or-eol] #'org-end-of-line
;; :localleader
;; "A" #'org-archive-subtree-default
;; "I" #'org-id-get-create
;; "t" #'org-todo
;; "T" #'org-todo-list
;; "x" #'org-toggle-checkbox
;; (:prefix ("c" . "clock")
;;  "c" #'org-clock-cancel
;;  "d" #'org-clock-mark-default-task
;;  "e" #'org-clock-modify-effort-estimate
;;  "E" #'org-set-effort
;;  "g" #'org-clock-goto
;;  "G" (cmd! (org-clock-goto 'select))
;;  "l" #'+org/toggle-last-clock
;;  "i" #'org-clock-in
;;  "I" #'org-clock-in-last
;;  "o" #'org-clock-out
;;  "r" #'org-resolve-clocks
;;  "R" #'org-clock-report
;;  "t" #'org-evaluate-time-range
;;  "=" #'org-clock-timestamps-up
;;  "-" #'org-clock-timestamps-down)
;; (:prefix ("s" . "tree/subtree")
;;  "a" #'org-toggle-archive-tag
;;  "b" #'org-tree-to-indirect-buffer
;;  "c" #'org-clone-subtree-with-time-shift
;;  "d" #'org-cut-subtree
;;  "h" #'org-promote-subtree
;;  "j" #'org-move-subtree-down
;;  "k" #'org-move-subtree-up
;;  "l" #'org-demote-subtree
;;  "n" #'org-narrow-to-subtree
;;  "r" #'org-refile
;;  "s" #'org-sparse-tree
;;  "A" #'org-archive-subtree-default
;;  "N" #'widen
;;  "S" #'org-sort)

(after! org
  (defvar-keymap my-org-mode-leader-map
    :parent doom-leader-map
    "SPC" #'org-ctrl-c-ctrl-c
    "a"   #'org-attach
    "d"   (cons "denote"
                (define-keymap
                  "r" #'denote-rename-file-using-front-matter))
    ;; "i l" #'org-roam-node-insert
    "i n" #'org-roam-node-insert
    "i d" '("Org drawer" . #'org-insert-drawer)
    "l"   (cons "links"
                (define-keymap
                  "a" #'org-insert-all-links
                  "c" #'org-web-tools-insert-link-for-url ;; or #'org-cliplink
                  "l" #'org-insert-link
                  "L" #'org-web-tools-insert-link-for-url
                  "d" #'+org/remove-link
                  "i" #'org-roam-node-insert
                  "I" #'my-org-roam-node-insert-immediate
                  "n" #'org-roam-node-insert
                  "N" #'my-org-roam-node-insert-immediate
                  "r" #'org-roam-node-insert
                  "R" #'my-org-roam-node-insert-immediate
                  "s" #'org-insert-last-stored-link
                  "w" #'org-web-tools-read-url-as-org))
    ;; "n"   (cons "notes" my-notes-map)
    "n b" #'org-roam-buffer-toggle
    "n B" #'org-roam-buffer-display-dedicated
    "n i" #'org-id-get-create
    "n I" #'my-org-roam-create-untracked-node
    "n e" #'org-roam-extract-subtree
    "s i" #'consult-org-heading
    "t i" #'org-toggle-inline-images
    "t o" #'org-sliced-images-mode
    ;; "u"   (cons "org-roam ui" my-org-roam-ui)
    "v"   (cons "org-babel" org-babel-map)) ;; deft

  (defvar-keymap my-org-mode-localleader-map
    "#" #'org-update-statistics-cookies
    "*" #'org-ctrl-c-star
    "-" #'org-ctrl-c-minus
    "," #'org-insert-structure-template
    "." #'org-goto
    "/" #'consult-org-agenda
    "@" #'org-cite-insert
    "a" #'org-roam-alias-add
    "A" #'org-roam-alias-remove
    "b" #'org-roam-buffer-toggle
    "B" #'org-roam-buffer-display-dedicated
    "e" #'org-export-dispatch
    "f" #'org-footnote-action
    "h" #'org-toggle-heading
    "l" #'consult-org-roam-backlinks
    "L" #'consult-org-roam-backlinks-recursive
    "p" #'org-set-property
    "q" #'org-roam-tag-add ;; #'org-set-tags-command
    "Q" #'org-set-tags-command ;; #'org-roam-tag-remove
    ;; "s" #'org-roam-db-sync ;; with C-u force the rebuild of the cache
    "S" #'org-sparse-tree
    "u" (cons "org-roam ui" my-org-roam-ui)
    "v" (cons "org-babel" org-babel-map)
    "y" #'yank-media
    "d" (cons "date/deadline"
              (define-keymap
                "d" #'org-deadline
                "s" #'org-schedule
                "t" #'org-time-stamp
                "T" #'org-time-stamp-inactive))
    "t" (cons "tables"
              (define-keymap
                "-" #'org-table-insert-hline
                "a" #'org-table-align
                "b" #'org-table-blank-field
                "c" #'org-table-create-or-convert-from-region
                "e" #'org-table-edit-field
                "f" #'org-table-edit-formulas
                "h" #'org-table-field-info
                "s" #'org-table-sort-lines
                "r" #'org-table-recalculate
                "R" #'org-table-recalculate-buffer-tables
                "d" (cons "delete"
                          (define-keymap
                            "c" #'org-table-delete-column
                            "r" #'org-table-kill-row))
                "i" (cons "insert"
                          (define-keymap
                            "c" #'org-table-insert-column
                            "h" #'org-table-insert-hline
                            "r" #'org-table-insert-row
                            "H" #'org-table-hline-and-move))
                "t" (cons "toggle"
                          (define-keymap
                            "f" #'org-table-toggle-formula-debugger
                            "o" #'org-table-toggle-coordinate-overlays))
                "p" #'org-plot/gnuplot)))

  (map! :map org-babel-map
        ;; "k" #'org-babel-remove-result-one-or-many
        "K" #'+org/remove-result-blocks)

  (map! :map org-mode-map
        ;; Recently, a [tab] keybind in `outline-mode-cycle-map' has begun
        ;; overriding org's [tab] keybind in GUI Emacs. This is needed to undo
        ;; that, and should probably be PRed to org.
        :mni "<tab>" #'org-cycle

        :nv doom-leader-key      my-org-mode-leader-map
        :nv doom-localleader-key my-org-mode-localleader-map
        :n  "; h" #'+org/goto-visible

        :nv "C-<up>"   #'org-backward-heading-same-level
        :nv "C-<down>" #'org-forward-heading-same-level
        :nv "^"  #'evil-org-beginning-of-line
        :nv "$"  #'evil-org-end-of-line
        ;; :nv "H"  #'org-up-element
        ;; :nv "L"  #'org-down-element
        :nv "gn" #'org-next-link
        :nv "gN" #'org-previous-link
        :nv "gx" #'org-open-at-point
        :nv "zC" #'outline-hide-entry
        :nv "zn" #'org-narrow-to-subtree
        :nv "z'" #'org-edit-special
        :nv "z," #'org-insert-structure-template
        :nv "z/" #'org-sparse-tree
        :nv "z;" #'org-toggle-comment
        :nv "z|" #'org-table-create-or-convert-from-region
        ;; :nv "M-q" 'unpackaged/flex-fill-paragraph
        ))

(map! :map evil-org-mode-map
      :after evil-org
      :mnv "gh"    #'evil-org-beginning-of-line
      :mnv "gl"    #'my/evil-end-of-line
      :n   "[ RET" #'+org/insert-item-above
      :n   "] RET" #'+org/insert-item-below
      :n   "zn"    #'org-narrow-to-subtree
      :i   "C-t"   #'evil-shift-right-line
      :i   "C-d"   #'evil-shift-left-line
      :i   "C-h"   help-map)

;; (map! :after (evil-org org-src)
;;       :map org-src-mode-map
;;       [remap evil-save-and-close]          #'org-edit-src-exit
;;       [remap evil-save-modified-and-close] #'org-edit-src-exit
;;       [remap evil-quit]                    #'org-edit-src-abort)

(map! :map evil-org-mode-map
      :after evil-org
      :n "za" nil ;; #'+org/toggle-fold
      :n "zA" nil ;; #'org-shifttab
      :n "zc" nil ;; #'+org/close-fold
      :n "zC" nil ;; #'outline-hide-subtree
      :n "zm" nil ;; #'+org/hide-next-fold-level
      :n "zM" nil ;; #'+org/close-all-folds
      :n "zn" nil ;; #'org-tree-to-indirect-buffer
      :n "zo" nil ;; #'+org/open-fold
      :n "zO" nil ;; #'outline-show-subtree
      :n "zr" nil ;; #'+org/show-next-fold-level
      :n "zR" nil ;; #'+org/open-all-folds
      :n "zi" nil ;; #'org-toggle-inline-images
      )

(map! :map my-org-roam-ui
      "u" #'org-roam-ui-open
      ;; "u" #'org-roam-ui-mode
      "f" #'org-roam-ui-follow-mode
      "l" #'org-roam-ui-node-local)

(map! :map my-notes-map
      "*" #'+default/search-notes-for-symbol-at-point
      "a" #'org-agenda
      "A" #'org-roam-node-random
      "f" #'+default/find-in-notes
      "F" #'+default/browse-notes
      "g" #'org-roam-graph
      "n" #'org-roam-node-find
      "N" #'org-roam-ref-find
      "c" #'org-capture
      "C" #'org-capture-goto-target
      "d" (cons "dailies"
                (define-keymap
                  "-" #'org-roam-dailies-find-directory
                  "f" #'org-roam-dailies-goto-next-note
                  "b" #'org-roam-dailies-goto-previous-note
                  "]" #'org-roam-dailies-goto-next-note
                  "[" #'org-roam-dailies-goto-previous-note
                  "d" #'org-roam-dailies-goto-date
                  "D" #'org-roam-dailies-capture-date
                  "n" #'org-roam-dailies-capture-today
                  "t" #'org-roam-dailies-goto-today
                  "T" #'org-roam-dailies-capture-today
                  "y" #'org-roam-dailies-goto-yesterday
                  "Y" #'org-roam-dailies-capture-yesterday
                  "m" #'org-roam-dailies-goto-tomorrow
                  "M" #'org-roam-dailies-capture-tomorrow))
      "j" (cons "journal"
                (define-keymap
                  "j" #'org-journal-new-entry
                  "J" #'org-journal-new-scheduled-entry
                  "s" #'org-journal-search-forever))
      "l" #'org-store-link
      "t" #'org-todo-list
      "u" (cons "org-roam ui" my-org-roam-ui)
      "y" #'+org/export-to-clipboard
      "Y" #'+org/export-to-clipboard-as-rich-text
      "/" #'consult-org-roam-search)

;; Bindings in org-roam buffer with backlinks.
(map! :map org-roam-mode-map
      :after org-roam
      (:localleader "b" #'org-roam-buffer-toggle)
      :n "SPC nb" #'org-roam-buffer-toggle
      :nv "q"   #'quit-window
      :nv "C-j" #'magit-section-forward-sibling
      :nv "C-k" #'magit-section-backward-sibling
      :nv "zj"  #'magit-section-forward
      :nv "zk"  #'magit-section-backward)

;; (setq org-pretty-entities-include-sub-superscripts nil)

(add-hook 'cdlatex-mode-hook
          (lambda ()
            (when (eq major-mode 'org-mode)
              ;; (make-local-variable 'org-pretty-entities-include-sub-superscripts)
              ;; (setq org-pretty-entities-include-sub-superscripts nil)
              (setq-local org-pretty-entities-include-sub-superscripts nil))))

;; (map! :map org-cdlatex-mode-map
;;       "^" nil  ; #'org-cdlatex-underscore-caret
;;       "_" nil) ; #'org-cdlatex-underscore-caret

(defvar-keymap my-project-prefix-map
  :parent doom-leader-map
  "-" #'projectile-dired
  "." #'+default/browse-project
  ">" #'doom/browse-in-other-project
  "!" #'projectile-run-shell-command-in-root
  "&" #'projectile-run-async-shell-command-in-root
  "a" #'projectile-add-known-project
  "b" #'projectile-switch-to-buffer
  "c" #'projectile-compile-project
  "C" #'projectile-repeat-last-command
  "d" #'projectile-find-dir
  ;; "d" #'projectile-remove-known-project
  "D" #'+default/discover-projects
  "e" #'projectile-edit-dir-locals
  "f" #'projectile-find-file
  "F" #'doom/find-file-in-other-project
  "g" #'projectile-configure-project
  "i" #'projectile-invalidate-cache
  "k" #'projectile-kill-buffers
  "o" #'find-sibling-file
  "p" #'projectile-switch-project
  "r" #'projectile-recentf
  "R" #'projectile-run-project
  "s" #'projectile-save-project-buffers
  "t" #'projectile-test-project
  "x" #'doom/open-project-scratch-buffer
  "X" #'doom/switch-to-project-scratch-buffer)

(map! :leader "p" (cons "project" my-project-prefix-map))

(map! :n "C-<tab>"     #'tab-next
      :n "C-<backtab>" #'tab-previous
      :n "C-`" #'popper-cycle
      ;; C-w prefix
      (:map evil-window-map
            "n"   #'other-window-prefix
            "C-n" #'other-tab-prefix
            "d"   #'my-toggle-window-dedication
            "p"   #'popper-toggle
            "P"   #'popper-toggle-type
            "q"   #'my-evil-kill-buffer-and-window
            "C-q" #'my-evil-kill-buffer-and-window)
      ;; Tabs
      (:map evil-window-map
            "<tab>" #'my-tab-new  ; tab-new
            ;; "C-<tab>" #'tab-window-detach
            "C-<tab>" #'other-tab-prefix
            "t" (cons "tab-bar"
                      (progn
                        (defvar-keymap my-tab-prefix-map
                          "RET" #'tab-switch
                          "]" #'tab-next
                          "[" #'tab-previous
                          ">" #'tab-bar-move-tab
                          "<" #'tab-bar-move-tab-backward
                          "-" #'dired-other-tab
                          "c" #'tab-close
                          "C" #'tab-close-other
                          "d" #'tab-duplicate
                          "F" #'tab-detach
                          "g" #'tab-group
                          "n" #'other-tab-prefix
                          "r" #'tab-rename
                          "t" #'my-tab-new ; tab-new
                          "u" #'tab-undo)
                        my-tab-prefix-map))))

(map! :map messages-buffer-mode-map
      :n "q" #'quit-window)

(map! :map special-mode-map
      :n "q" #'my-evil-kill-buffer-and-window)
